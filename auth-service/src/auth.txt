[1;32m=== ESTRUCTURA DE DIRECTORIOS ===[0m
.
├── controllers
│   ├── friends.controller.ts
│   └── games.controller.ts
├── routes
│   ├── friends.routes.ts
│   └── games.routes.ts
├── services
│   ├── friends.services.ts
│   └── games.services.ts
├── utils
│   └── auth-middleware.ts
├── auth.txt
├── database.ts
├── print_tree.sh
├── redis-client.ts
└── server.ts

5 directories, 12 files

[1;32m=== CONTENIDO DE ARCHIVOS DE TEXTO ===[0m

[1;34m=== ./database.ts ===[0m
import sqlite3 from 'sqlite3';
import { open, Database } from 'sqlite'; // Importar Database de sqlite
import path from 'path';

// Asegúrate de que el directorio 'data' exista en la raíz del proyecto para la persistencia.
// Docker montará un volumen aquí.
const DB_PATH = path.join(__dirname, '../data/app.db');

export async function openDb(): Promise<Database> { // Especificar tipo de retorno
    return open({
        filename: DB_PATH,
        driver: sqlite3.Database
    });
}

export async function initializeDb() {
    const db = await openDb();
    try {
        await db.exec(`
            CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, email TEXT UNIQUE NOT NULL, password_hash TEXT, google_id TEXT UNIQUE, intra_id TEXT UNIQUE, is_active BOOLEAN DEFAULT 1, is_admin BOOLEAN DEFAULT 0, last_login DATETIME, created_at DATETIME DEFAULT CURRENT_TIMESTAMP);
            CREATE TABLE IF NOT EXISTS user_profiles ( user_id INTEGER PRIMARY KEY, avatar_url TEXT, language TEXT DEFAULT 'es', notifications TEXT DEFAULT 'true', sound TEXT DEFAULT 'true', difficulty TEXT DEFAULT 'normal', FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);
            CREATE TABLE IF NOT EXISTS sessions ( id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, session_token TEXT UNIQUE NOT NULL, expires_at DATETIME NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);
            CREATE TABLE IF NOT EXISTS friendships ( id INTEGER PRIMARY KEY AUTOINCREMENT, requester_id INTEGER NOT NULL, approver_id INTEGER, status TEXT DEFAULT 'pending', created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (requester_id) REFERENCES users(id) ON DELETE CASCADE, FOREIGN KEY (approver_id) REFERENCES users(id) ON DELETE CASCADE);
            CREATE TABLE IF NOT EXISTS chat_messages ( id INTEGER PRIMARY KEY AUTOINCREMENT, sender_id INTEGER NOT NULL, receiver_id INTEGER, message TEXT NOT NULL, sent_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE, FOREIGN KEY (receiver_id) REFERENCES users(id) ON DELETE CASCADE);
            CREATE TABLE IF NOT EXISTS tournaments ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, created_by INTEGER, status TEXT DEFAULT 'upcoming', created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL);
            CREATE TABLE IF NOT EXISTS games ( id INTEGER PRIMARY KEY AUTOINCREMENT, tournament_id INTEGER, match TEXT, status TEXT DEFAULT 'pending', started_at DATETIME, finished_at DATETIME, FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE SET NULL);
            CREATE TABLE IF NOT EXISTS participants ( id INTEGER PRIMARY KEY AUTOINCREMENT, game_id INTEGER NOT NULL, user_id INTEGER, is_bot BOOLEAN DEFAULT 0, is_winner BOOLEAN DEFAULT 0, team_name TEXT NOT NULL, FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL);
            CREATE TABLE IF NOT EXISTS scores (id INTEGER PRIMARY KEY AUTOINCREMENT, game_id INTEGER NOT NULL, scorer_id INTEGER, team_name TEXT NOT NULL, point_number INTEGER NOT NULL, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE,  FOREIGN KEY (scorer_id) REFERENCES users(id) ON DELETE SET NULL);
            
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (1, 'Manu', 'ardeiro@outlook.com', '$2b$12$U.2UHoDtA3/oeQHQIrznVuBokjoVRTfdv2zM7Qv7E3H0AldZ1Qhbe', datetime('now', '-1 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (2, 'Ardeiro', 'ardeiro@gmail.com', '$2b$12$/1r9td3OkeutXq16OoALGuUeEO/nCCX4AwLvFJ2ZYZNWEuzkMyzEG', datetime('now', '-2 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (3, 'HAL7000', 'manuel.ardeiro@gmail.com', '$2b$12$RagfU1ULf9zvoZBRqcQ5XOb.EgZybLX2mfr9W3gaKYiWiTUzi5sC6', datetime('now', '-3 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (4, 'Verdu', 'jorge.verdu.ruiz@gmail.com', '$2b$12$fmkXJsqahw1S9bM8fQ6G3uhnDCfrLZlUwvKlKmr5SASA7AbX6kQZq', datetime('now', '-4 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (5, 'David', 'david.aparicio247@hotmail.com', '$2b$12$iASlBV76WELxwwjOUmWeM.FjqHuDhkWQEEbTBBNRZb4B6/tEfyCmC', datetime('now', '-5 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (6, 'ManuFern', 'manufern@student.42madrid.com', '$2b$12$1Mqudh5FrajQHKxtBOG26O/dL47xnZrbbQ8HjcipegON1NQdMFXou', datetime('now', '-6 days'));
            INSERT OR IGNORE INTO users (id, username, email, password_hash, created_at) VALUES (7, 'Diego', 'diegorubiomorato@gmail.com', '$2b$12$SC.8HYivrjOrLQQscZz7SuBNY4vodoHRh.cWXQ0htB/vBBJxblJPa', datetime('now', '-7 days'));

            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (1, NULL, 'es', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (2, NULL, 'gl', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (3, NULL, 'en', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (4, NULL, 'es', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (5, NULL, 'en', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (6, NULL, 'es', 'true', 'true', 'normal');
            INSERT OR IGNORE INTO user_profiles (user_id, avatar_url, language, notifications, sound, difficulty) VALUES (7, NULL, 'en', 'true', 'true', 'normal');

            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (1, 1, 2, 'pending', datetime('now', '-1 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (2, 1, 4, 'accepted', datetime('now', '-2 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (3, 1, 6, 'accepted', datetime('now', '-3 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (4, 2, 3, 'accepted', datetime('now', '-4 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (5, 2, 4, 'accepted', datetime('now', '-5 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (6, 2, 5, 'pending', datetime('now', '-6 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (7, 7, 2, 'pending', datetime('now', '-7 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (8, 3, 1, 'accepted', datetime('now', '-8 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (9, 3, 4, 'accepted', datetime('now', '-9 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (10, 3, 6, 'pending', datetime('now', '-9 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (10, 5, 4, 'accepted', datetime('now', '-10 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (11, 4, 7, 'accepted', datetime('now', '-11 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (12, 5, 6, 'accepted', datetime('now', '-12 hours'));
            INSERT OR IGNORE INTO friendships (id, requester_id, approver_id, status, created_at) VALUES (13, 6, 7, 'accepted', datetime('now', '-13 hours'));

            INSERT OR IGNORE INTO tournaments (id, name, created_by, status, created_at) VALUES (1, 'Torneo Relámpago', 1, 'finished', datetime('now', '-1 days'));
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (1, 1, '1/2(1)', 'finished', datetime('now', '-1 days', '15:00:00'), datetime('now', '-1 days', '15:00:00', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (1, 1, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (2, 1, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (1, 1, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (2, 1, 3, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (2, 1, '1/2(2)', 'finished', datetime('now', '-1 days', '15:08:00'), datetime('now', '-1 days', '15:08:00', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (3, 2, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (4, 2, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (3, 2, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (4, 2, 5, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (3, 1, 'Final', 'finished', datetime('now', '-1 days', '15:18:00'), datetime('now', '-1 days', '15:18:00', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (5, 3, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (6, 3, 4, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (5, 3, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (6, 3, 4, 'Team B', 4);

            INSERT OR IGNORE INTO tournaments (id, name, created_by, status, created_at) VALUES (2, 'Copa Velocidad', 3, 'finished', datetime('now', '-2 days'));
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (4, 2, '1/2(1)', 'finished', datetime('now', '-2 days', '16:00:00'), datetime('now', '-2 days', '16:00:00', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (7, 4, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (8, 4, 5, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (7, 4, 1, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (8, 4, 5, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (5, 2, '1/2(2)', 'finished', datetime('now', '-2 days', '16:06:00'), datetime('now', '-2 days', '16:06:00', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (9, 5, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (10, 5, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (9, 5, 6, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (10, 5, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (6, 2, 'Final', 'finished', datetime('now', '-2 days', '16:19:00'), datetime('now', '-2 days', '16:19:00', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (11, 6, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (12, 6, 7, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (11, 6, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (12, 6, 7, 'Team B', 3);

            INSERT OR IGNORE INTO tournaments (id, name, created_by, status, created_at) VALUES (3, 'Torneo Express', 2, 'finished', datetime('now', '-3 days'));
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (7, 3, '1/2(1)', 'finished', datetime('now', '-3 days', '17:30:00'), datetime('now', '-3 days', '17:30:00', '+4 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (13, 7, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (14, 7, 4, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (13, 7, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (14, 7, 4, 'Team B', 1);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (8, 3, '1/2(2)', 'finished', datetime('now', '-3 days', '17:35:00'), datetime('now', '-3 days', '17:35:00', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (15, 8, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (16, 8, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (15, 8, 1, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (16, 8, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (9, 3, 'Final', 'finished', datetime('now', '-3 days', '17:50:00'), datetime('now', '-3 days', '17:50:00', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (17, 9, 3, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (18, 9, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (17, 9, 3, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (18, 9, 7, 'Team B', 5);

            INSERT OR IGNORE INTO tournaments (id, name, created_by, status, created_at) VALUES (4, 'Desafío Rápido', 5, 'finished', datetime('now', '-4 days'));
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (10, 4, '1/2(1)', 'finished', datetime('now', '-4 days', '18:00:00'), datetime('now', '-4 days', '18:00:00', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (19, 10, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (20, 10, 6, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (19, 10, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (20, 10, 6, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (11, 4, '1/2(2)', 'finished', datetime('now', '-4 days', '18:07:00'), datetime('now', '-4 days', '18:07:00', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (21, 11, 4, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (22, 11, 5, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (21, 11, 4, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (22, 11, 5, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (12, 4, 'Final', 'finished', datetime('now', '-4 days', '18:19:00'), datetime('now', '-4 days', '18:19:00', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (23, 12, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (24, 12, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (23, 12, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (24, 12, 5, 'Team B', 4);

            INSERT OR IGNORE INTO tournaments (id, name, created_by, status, created_at) VALUES (5, 'Torneo Flash', 7, 'finished', datetime('now', '-5 days'));
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (13, 5, '1/2(1)', 'finished', datetime('now', '-5 days', '19:00:00'), datetime('now', '-5 days', '19:00:00', '+10 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (25, 13, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (26, 13, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (25, 13, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (26, 13, 3, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (14, 5, '1/2(2)', 'finished', datetime('now', '-5 days', '19:11:00'), datetime('now', '-5 days', '19:11:00', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (27, 14, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (28, 14, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (27, 14, 6, 'Team A', 1);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (28, 14, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, tournament_id, match, status, started_at, finished_at) VALUES (15, 5, 'Final', 'finished', datetime('now', '-5 days', '19:17:00'), datetime('now', '-5 days', '19:17:00', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (29, 15, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (30, 15, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (29, 15, 1, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (30, 15, 7, 'Team B', 5);
            
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (16, 'finished', datetime('now', '-10 hours'), datetime('now', '-10 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (31, 16, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (32, 16, 2, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (31, 16, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (32, 16, 2, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (17, 'finished', datetime('now', '-15 hours'), datetime('now', '-15 hours', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (33, 17, 3, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (34, 17, 4, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (33, 17, 3, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (34, 17, 4, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (18, 'finished', datetime('now', '-20 hours'), datetime('now', '-20 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (35, 18, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (36, 18, 6, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (35, 18, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (36, 18, 6, 'Team B', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (19, 'finished', datetime('now', '-25 hours'), datetime('now', '-25 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (37, 19, 7, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (38, 19, 1, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (37, 19, 7, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (38, 19, 1, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (20, 'finished', datetime('now', '-30 hours'), datetime('now', '-30 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (39, 20, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (40, 20, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (39, 20, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (40, 20, 3, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (21, 'finished', datetime('now', '-35 hours'), datetime('now', '-35 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (41, 21, 4, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (42, 21, 5, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (41, 21, 4, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (42, 21, 5, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (22, 'finished', datetime('now', '-40 hours'), datetime('now', '-40 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (43, 22, 6, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (44, 22, 7, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (43, 22, 6, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (44, 22, 7, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (23, 'finished', datetime('now', '-45 hours'), datetime('now', '-45 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (45, 23, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (46, 23, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (45, 23, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (46, 23, 3, 'Team B', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (24, 'finished', datetime('now', '-50 hours'), datetime('now', '-50 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (47, 24, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (48, 24, 4, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (47, 24, 2, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (48, 24, 4, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (25, 'finished', datetime('now', '-55 hours'), datetime('now', '-55 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (49, 25, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (50, 25, 6, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (49, 25, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (50, 25, 6, 'Team B', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (26, 'finished', datetime('now', '-60 hours'), datetime('now', '-60 hours', '+10 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (51, 26, 7, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (52, 26, 1, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (51, 26, 7, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (52, 26, 1, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (27, 'finished', datetime('now', '-65 hours'), datetime('now', '-65 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (53, 27, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (54, 27, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (53, 27, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (54, 27, 5, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (28, 'finished', datetime('now', '-70 hours'), datetime('now', '-70 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (55, 28, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (56, 28, 6, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (55, 28, 2, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (56, 28, 6, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (29, 'finished', datetime('now', '-75 hours'), datetime('now', '-75 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (57, 29, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (58, 29, 7, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (57, 29, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (58, 29, 7, 'Team B', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (30, 'finished', datetime('now', '-80 hours'), datetime('now', '-80 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (59, 30, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (60, 30, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (59, 30, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (60, 30, 5, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (31, 'finished', datetime('now', '-85 hours'), datetime('now', '-85 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (61, 31, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (62, 31, 2, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (61, 31, 6, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (62, 31, 2, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (32, 'finished', datetime('now', '-90 hours'), datetime('now', '-90 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (63, 32, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (64, 32, 7, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (63, 32, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (64, 32, 7, 'Team B', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (33, 'finished', datetime('now', '-95 hours'), datetime('now', '-95 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (65, 33, 4, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (66, 33, 1, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (65, 33, 4, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (66, 33, 1, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (34, 'finished', datetime('now', '-100 hours'), datetime('now', '-100 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (67, 34, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (68, 34, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (67, 34, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (68, 34, 3, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (35, 'finished', datetime('now', '-105 hours'), datetime('now', '-105 hours', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (69, 35, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (70, 35, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (69, 35, 6, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (70, 35, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (36, 'finished', datetime('now', '-110 hours'), datetime('now', '-110 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (71, 36, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (72, 36, 4, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (71, 36, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (72, 36, 4, 'Team B', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (37, 'finished', datetime('now', '-115 hours'), datetime('now', '-115 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (73, 37, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (74, 37, 5, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (73, 37, 2, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (74, 37, 5, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (38, 'finished', datetime('now', '-120 hours'), datetime('now', '-120 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (75, 38, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (76, 38, 6, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (75, 38, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (76, 38, 6, 'Team B', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (39, 'finished', datetime('now', '-125 hours'), datetime('now', '-125 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (77, 39, 7, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (78, 39, 1, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (77, 39, 7, 'Team A', 0);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (78, 39, 1, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (40, 'finished', datetime('now', '-130 hours'), datetime('now', '-130 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (79, 40, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (80, 40, 2, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (79, 40, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (80, 40, 2, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (41, 'finished', datetime('now', '-135 hours'), datetime('now', '-135 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (81, 41, 5, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (82, 41, 6, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (81, 41, 5, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (82, 41, 6, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (42, 'finished', datetime('now', '-140 hours'), datetime('now', '-140 hours', '+10 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (83, 42, 7, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (84, 42, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (83, 42, 7, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (84, 42, 3, 'Team B', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (43, 'finished', datetime('now', '-145 hours'), datetime('now', '-145 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (85, 43, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (86, 43, 2, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (85, 43, 1, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (86, 43, 2, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (44, 'finished', datetime('now', '-150 hours'), datetime('now', '-150 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (87, 44, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (88, 44, 4, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (87, 44, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (88, 44, 4, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (45, 'finished', datetime('now', '-155 hours'), datetime('now', '-155 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (89, 45, 5, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (90, 45, 6, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (89, 45, 5, 'Team A', 1);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (90, 45, 6, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (46, 'finished', datetime('now', '-160 hours'), datetime('now', '-160 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (91, 46, 7, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (92, 46, 1, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (91, 46, 7, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (92, 46, 1, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (47, 'finished', datetime('now', '-165 hours'), datetime('now', '-165 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (93, 47, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (94, 47, 3, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (93, 47, 2, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (94, 47, 3, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (48, 'finished', datetime('now', '-170 hours'), datetime('now', '-170 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (95, 48, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (96, 48, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (95, 48, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (96, 48, 5, 'Team B', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (49, 'finished', datetime('now', '-175 hours'), datetime('now', '-175 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (97, 49, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (98, 49, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (97, 49, 6, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (98, 49, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (50, 'finished', datetime('now', '-180 hours'), datetime('now', '-180 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (99, 50, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (100, 50, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (99, 50, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (100, 50, 5, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (51, 'finished', datetime('now', '-185 hours'), datetime('now', '-185 hours', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (101, 51, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (102, 51, 6, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (101, 51, 2, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (102, 51, 6, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (52, 'finished', datetime('now', '-190 hours'), datetime('now', '-190 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (103, 52, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (104, 52, 7, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (103, 52, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (104, 52, 7, 'Team B', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (53, 'finished', datetime('now', '-195 hours'), datetime('now', '-195 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (105, 53, 4, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (106, 53, 1, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (105, 53, 4, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (106, 53, 1, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (54, 'finished', datetime('now', '-200 hours'), datetime('now', '-200 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (107, 54, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (108, 54, 2, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (107, 54, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (108, 54, 2, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (55, 'finished', datetime('now', '-205 hours'), datetime('now', '-205 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (109, 55, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (110, 55, 3, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (109, 55, 6, 'Team A', 0);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (110, 55, 3, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (56, 'finished', datetime('now', '-210 hours'), datetime('now', '-210 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (111, 56, 7, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (112, 56, 4, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (111, 56, 7, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (112, 56, 4, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (57, 'finished', datetime('now', '-215 hours'), datetime('now', '-215 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (113, 57, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (114, 57, 5, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (113, 57, 1, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (114, 57, 5, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (58, 'finished', datetime('now', '-220 hours'), datetime('now', '-220 hours', '+10 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (115, 58, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (116, 58, 6, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (115, 58, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (116, 58, 6, 'Team B', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (59, 'finished', datetime('now', '-225 hours'), datetime('now', '-225 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (117, 59, 3, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (118, 59, 7, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (117, 59, 3, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (118, 59, 7, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (60, 'finished', datetime('now', '-230 hours'), datetime('now', '-230 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (119, 60, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (120, 60, 1, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (119, 60, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (120, 60, 1, 'Team B', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (61, 'finished', datetime('now', '-235 hours'), datetime('now', '-235 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (121, 61, 5, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (122, 61, 2, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (121, 61, 5, 'Team A', 1);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (122, 61, 2, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (62, 'finished', datetime('now', '-240 hours'), datetime('now', '-240 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (123, 62, 6, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (124, 62, 3, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (123, 62, 6, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (124, 62, 3, 'Team B', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (63, 'finished', datetime('now', '-245 hours'), datetime('now', '-245 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (125, 63, 7, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (126, 63, 4, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (125, 63, 7, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (126, 63, 4, 'Team B', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (64, 'finished', datetime('now', '-250 hours'), datetime('now', '-250 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (127, 64, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (128, 64, 5, 0, 0, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (127, 64, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (128, 64, 5, 'Team B', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (65, 'finished', datetime('now', '-255 hours'), datetime('now', '-255 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (129, 65, 2, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (130, 65, 6, 0, 1, 'Team B');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (129, 65, 2, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (130, 65, 6, 'Team B', 5);

            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (66, 'finished', datetime('now', '-12 hours'), datetime('now', '-12 hours', '+4 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (131, 66, 1, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (132, 66, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (131, 66, 1, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (132, 66, NULL, 'Easy Bot', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (67, 'finished', datetime('now', '-18 hours'), datetime('now', '-18 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (133, 67, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (134, 67, NULL, 1, 0, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (133, 67, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (134, 67, NULL, 'Medium Bot', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (68, 'finished', datetime('now', '-24 hours'), datetime('now', '-24 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (135, 68, 3, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (136, 68, NULL, 1, 1, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (135, 68, 3, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (136, 68, NULL, 'Hard Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (69, 'finished', datetime('now', '-30 hours'), datetime('now', '-30 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (137, 69, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (138, 69, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (137, 69, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (138, 69, NULL, 'Easy Bot', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (70, 'finished', datetime('now', '-36 hours'), datetime('now', '-36 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (139, 70, 5, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (140, 70, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (139, 70, 5, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (140, 70, NULL, 'Medium Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (71, 'finished', datetime('now', '-42 hours'), datetime('now', '-42 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (141, 71, 6, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (142, 71, NULL, 1, 0, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (141, 71, 6, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (142, 71, NULL, 'Hard Bot', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (72, 'finished', datetime('now', '-48 hours'), datetime('now', '-48 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (143, 72, 7, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (144, 72, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (143, 72, 7, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (144, 72, NULL, 'Easy Bot', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (73, 'finished', datetime('now', '-54 hours'), datetime('now', '-54 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (145, 73, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (146, 73, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (145, 73, 1, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (146, 73, NULL, 'Medium Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (74, 'finished', datetime('now', '-60 hours'), datetime('now', '-60 hours', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (147, 74, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (148, 74, NULL, 1, 0, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (147, 74, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (148, 74, NULL, 'Hard Bot', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (75, 'finished', datetime('now', '-66 hours'), datetime('now', '-66 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (149, 75, 3, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (150, 75, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (149, 75, 3, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (150, 75, NULL, 'Easy Bot', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (76, 'finished', datetime('now', '-72 hours'), datetime('now', '-72 hours', '+10 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (151, 76, 4, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (152, 76, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (151, 76, 4, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (152, 76, NULL, 'Medium Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (77, 'finished', datetime('now', '-78 hours'), datetime('now', '-78 hours', '+14 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (153, 77, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (154, 77, NULL, 1, 0, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (153, 77, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (154, 77, NULL, 'Hard Bot', 3);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (78, 'finished', datetime('now', '-84 hours'), datetime('now', '-84 hours', '+7 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (155, 78, 6, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (156, 78, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (155, 78, 6, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (156, 78, NULL, 'Easy Bot', 0);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (79, 'finished', datetime('now', '-90 hours'), datetime('now', '-90 hours', '+11 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (157, 79, 7, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (158, 79, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (157, 79, 7, 'Team A', 4);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (158, 79, NULL, 'Medium Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (80, 'finished', datetime('now', '-96 hours'), datetime('now', '-96 hours', '+6 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (159, 80, 1, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (160, 80, NULL, 1, 1, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (159, 80, 1, 'Team A', 2);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (160, 80, NULL, 'Hard Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (81, 'finished', datetime('now', '-102 hours'), datetime('now', '-102 hours', '+13 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (161, 81, 2, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (162, 81, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (161, 81, 2, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (162, 81, NULL, 'Easy Bot', 1);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (82, 'finished', datetime('now', '-108 hours'), datetime('now', '-108 hours', '+8 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (163, 82, 3, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (164, 82, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (163, 82, 3, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (164, 82, NULL, 'Medium Bot', 5);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (83, 'finished', datetime('now', '-114 hours'), datetime('now', '-114 hours', '+12 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (165, 83, 4, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (166, 83, NULL, 1, 0, 'Hard Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (165, 83, 4, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (166, 83, NULL, 'Hard Bot', 4);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (84, 'finished', datetime('now', '-120 hours'), datetime('now', '-120 hours', '+5 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (167, 84, 5, 0, 1, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (168, 84, NULL, 1, 0, 'Easy Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (167, 84, 5, 'Team A', 5);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (168, 84, NULL, 'Easy Bot', 2);
            INSERT OR IGNORE INTO games (id, status, started_at, finished_at) VALUES (85, 'finished', datetime('now', '-126 hours'), datetime('now', '-126 hours', '+9 minutes'));
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (169, 85, 6, 0, 0, 'Team A');
            INSERT OR IGNORE INTO participants (id, game_id, user_id, is_bot, is_winner, team_name) VALUES (170, 85, NULL, 1, 1, 'Medium Bot');
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (169, 85, 6, 'Team A', 3);
            INSERT OR IGNORE INTO scores (id, game_id, scorer_id, team_name, point_number) VALUES (170, 85, NULL, 'Medium Bot', 5);
        `);
        console.log('Base de datos inicializada y tablas creadas (si no existían).');
    } finally {
        await db.close();
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./services/games.services.ts ===[0m
// auth-service/services/games.service.ts

import { openDb } from '../database';

export class GameService {
  // 1. Crear partida y devolver el game_id generado
  static async createGame(tournamentId: number | null = null, match: string | null = null): Promise<number> {
    const db = await openDb();

    const result = await db.run(
      `INSERT INTO games (tournament_id, match, status, started_at)
       VALUES (?, ?, 'in_progress', datetime('now'))`,
      [tournamentId, match]
    );

    const gameId = result.lastID;
    if (typeof gameId !== 'number') {
        throw new Error('Could not retrieve last inserted game ID');
        }
    return gameId;
  }

  // 2. Añadir un participante (jugador humano o bot)
  static async addParticipant(gameId: number, {
    userId = null,
    isBot = false,
    teamName
  }: {
    userId?: number | null;
    isBot?: boolean;
    teamName: string;
  }): Promise<void> {
    const db = await openDb();

    await db.run(
      `INSERT INTO participants (game_id, user_id, is_bot, team_name)
       VALUES (?, ?, ?, ?)`,
      [gameId, userId, isBot ? 1 : 0, teamName]
    );
  }

  // 3. Inicializar score en 0 para un participante
  static async initScore(gameId: number, scorerId: number | null, teamName: string): Promise<void> {
    const db = await openDb();

    await db.run(
      `INSERT INTO scores (game_id, scorer_id, team_name, point_number)
       VALUES (?, ?, ?, 0)`,
      [gameId, scorerId, teamName]
    );
  }

  // 4. Registrar un punto anotado por un participante
  static async updateScore(gameId: number, scorerId: number | null, teamName: string, pointNumber: number): Promise<void> {
    const db = await openDb();

    await db.run(
      `INSERT INTO scores (game_id, scorer_id, team_name, point_number)
       VALUES (?, ?, ?, ?)`,
      [gameId, scorerId, teamName, pointNumber]
    );
  }

  // 5. Finalizar partida y actualizar estado + ganadores
  static async finalizeGame(gameId: number, winnerTeam: string): Promise<void> {
    const db = await openDb();

    await db.run(
      `UPDATE games SET status = 'finished', finished_at = datetime('now') WHERE id = ?`,
      [gameId]
    );

    await db.run(
      `UPDATE participants
       SET is_winner = CASE WHEN team_name = ? THEN 1 ELSE 0 END
       WHERE game_id = ?`,
      [winnerTeam, gameId]
    );
  }
}[1;30m----------------------------------------[0m

[1;34m=== ./services/friends.services.ts ===[0m
// auth-service/src/services/friends.services.ts

import { openDb } from '../database';

interface Friend {
    id: number;
    username: string;
    isOnline: boolean;
    elo: number;
}

export async function getFriends(userId: number): Promise<Friend[]> {
  const db = await openDb();

  const friendsRaw = await db.all(`
    SELECT u.id, u.username,
      IFNULL(SUM(CASE WHEN p.user_id = u.id THEN s.point_number ELSE 0 END), 0) AS pointsFor,
      IFNULL(SUM(CASE WHEN p.user_id != u.id THEN s.point_number ELSE 0 END), 0) AS pointsAgainst
    FROM friendships f
    JOIN users u ON (u.id = f.requester_id OR u.id = f.approver_id) AND u.id != ?
    LEFT JOIN participants p ON p.user_id = u.id
    LEFT JOIN scores s ON s.game_id = p.game_id AND s.team_name = p.team_name
    WHERE f.status = 'accepted'
      AND (f.requester_id = ? OR f.approver_id = ?)
    GROUP BY u.id;
  `, [userId, userId, userId]);

  // Opcional: obtener usuarios online de Redis
  // const onlineIds = await getOnlineUserIdsFromRedis();

  const friends: Friend[] = friendsRaw.map(f => ({
    id: f.id,
    username: f.username,
    elo: 1000 + (f.pointsFor - f.pointsAgainst),
    isOnline: false,
  }));

  await db.close();
  return friends;
}

export async function getPendingRequests(userId: number) {
  const db = await openDb();
  const result = await db.all(`
    SELECT u.id, u.username
    FROM friendships f
    JOIN users u ON u.id = f.requester_id
    WHERE f.status = 'pending'
      AND f.approver_id = ?;
  `, [userId]);
  await db.close();
  return result;
}

export async function getAvailableUsers(userId: number) {
  const db = await openDb();
  return db.all(`
    SELECT u.id, u.username
    FROM users u
    WHERE u.id != ?
      AND u.id NOT IN (
        SELECT requester_id FROM friendships WHERE approver_id = ?
        UNION
        SELECT approver_id FROM friendships WHERE requester_id = ?
      );
  `, [userId, userId, userId]);
}

export async function sendFriendRequest(userId: number, targetId: number): Promise<boolean> {
  const db = await openDb();

  // Verifica si ya existe
  const existing = await db.get(
    `SELECT * FROM friendships 
     WHERE (user_id = ? AND friend_id = ?) 
        OR (user_id = ? AND friend_id = ?)`,
    [userId, targetId, targetId, userId]
  );

  if (existing) {
    await db.close();
    return false;
  }

  await db.run(
    `INSERT INTO friendships (user_id, friend_id, status) VALUES (?, ?, 'pending')`,
    [userId, targetId]
  );

  await db.close();
  return true;
}
[1;30m----------------------------------------[0m

[1;34m=== ./auth.txt ===[0m
[1;30m----------------------------------------[0m

[1;34m=== ./print_tree.sh ===[0m
#!/bin/bash

# Función para detectar si un archivo es de texto
is_text_file() {
  file -b --mime-encoding "$1" | grep -q -v 'binary'
}

# Mostrar estructura de directorios (excluyendo .git, node_modules, styles y pages)
echo -e "\033[1;32m=== ESTRUCTURA DE DIRECTORIOS ===\033[0m"
tree -a -I '.git|node_modules' --dirsfirst

# Mostrar contenido de archivos de texto, ignorando .git, node_modules, styles y pages
echo -e "\n\033[1;32m=== CONTENIDO DE ARCHIVOS DE TEXTO ===\033[0m"
find . -type f \
  ! -path '*/.git/*' \
  ! -path '*/print-tree.sh' \
  ! -path '*/README.md' \
  | while read -r file; do
    if is_text_file "$file"; then
      echo -e "\n\033[1;34m=== $file ===\033[0m"
      cat "$file"
      echo -e "\033[1;30m----------------------------------------\033[0m"
    else
      echo -e "\n\033[1;31m=== $file (archivo binario, omitido) ===\033[0m"
    fi
done



  # ! -path '*/.api-gateway/src/*' \
  # ! -path '*/.api-gateway/package.json' \
  # ! -path '*/.api-gateway/tsconfig.json' \
  # ! -path '*/.chat-service/src/*' \
  # ! -path '*/.chat-service/package.json' \
  # ! -path '*/.chat-service/tsconfig.json' \
  # ! -path '*/frontend/src/*' \
  # ! -path '*/frontend/package.json' \
  # ! -path '*/frontend/tailwind.config.js' \
  # ! -path '*/frontend/tsconfig.json' \
  # ! -path '*/frontend/webpack.config.js' \
  # ! -path '*/game-service/tsconfig.json' \
  # ! -path '*/game-service/package.json' \
  # ! -path '*/game-service/src/*' \[1;30m----------------------------------------[0m

[1;34m=== ./controllers/friends.controller.ts ===[0m
// auth-service/src/controllers/friends.controller.ts

import { FastifyRequest, FastifyReply } from 'fastify';
import { getFriends, getPendingRequests, getAvailableUsers, sendFriendRequest } from '../services/friends.services';

export async function getFriendsHandler(request: FastifyRequest, reply: FastifyReply) {
  const userId = (request as any).user.user_id;
  if (!userId) return reply.status(401).send({ error: 'Unauthorized' });

  const friends = await getFriends(userId);
  return reply.send(friends);
}

export async function getPendingRequestsHandler(request: FastifyRequest, reply: FastifyReply) {
  const userId = (request as any).user.user_id;
  if (!userId) return reply.status(401).send({ error: 'Unauthorized' });

  const pending = await getPendingRequests(userId);
  return reply.send(pending);
}

export async function getAvailableUsersHandler(request: FastifyRequest, reply: FastifyReply) {
  const userId = (request as any).user.user_id;
  if (!userId) return reply.status(401).send({ error: 'Unauthorized' });

  const users = await getAvailableUsers(userId);
  return reply.send(users);
}

export async function sendFriendRequestHandler(request: FastifyRequest, reply: FastifyReply) {
  const userId = (request as any).user.user_id;
  const targetId = Number((request.params as any).targetId);
  if (!userId || !targetId || userId === targetId) {
    return reply.status(400).send({ error: 'Invalid target user' });
  }

  try {
    const result = await sendFriendRequest(userId, targetId);
    return reply.send({ success: result });
  } catch (err) {
    console.error('Error sending friend request:', err);
    return reply.status(500).send({ error: 'Server error' });
  }
}[1;30m----------------------------------------[0m

[1;34m=== ./controllers/games.controller.ts ===[0m
// auth-service/controllers/games.controller.ts

import { FastifyRequest, FastifyReply } from 'fastify';
import { GameService } from '../services/games.services';
import { openDb } from '../database';

export const startGameHandler = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const {
      gameId,
      player1,
      player2,
      tournamentId = null,
      match = null
    } = req.body as any;

    const db = await openDb();

    // Insert en games
    const result = await db.run(
      `INSERT INTO games (id, tournament_id, match, status, started_at)
       VALUES (?, ?, ?, 'in_progress', datetime('now'))`,
      [gameId, tournamentId, match]
    );

    // helper para obtener user_id si es humano
    const getUserId = async (username: string | null): Promise<number | null> => {
      if (!username) return null;
      const user = await db.get(`SELECT id FROM users WHERE username = ?`, [username]);
      return user?.id ?? null;
    };

    // player1
    const userId1 = player1.isBot ? null : await getUserId(player1.username);
    await GameService.addParticipant(gameId, {
      userId: userId1,
      isBot: player1.isBot,
      teamName: player1.teamName
    });
    await GameService.initScore(gameId, userId1, player1.teamName);

    // player2
    const userId2 = player2.isBot ? null : await getUserId(player2.username);
    await GameService.addParticipant(gameId, {
      userId: userId2,
      isBot: player2.isBot,
      teamName: player2.teamName
    });
    await GameService.initScore(gameId, userId2, player2.teamName);

    reply.send({ success: true });
  } catch (error) {
    console.error('❌ Error in /api/games/start:', error);
    reply.status(500).send({ error: 'Failed to start game' });
  }
};

export const getUserIdByUsername = async (req: FastifyRequest, reply: FastifyReply) => {
  const { username } = req.query as { username?: string };

  if (!username) {
    return reply.status(400).send({ error: 'Falta el parámetro username' });
  }

  try {
    const db = await openDb();
    const user = await db.get('SELECT id FROM users WHERE username = ?', [username]);
    await db.close();

    if (!user) {
      return reply.status(404).send({ error: 'Usuario no encontrado' });
    }

    return reply.send({ userId: user.id });
  } catch (error) {
    console.error('❌ Error al obtener userId:', error);
    return reply.status(500).send({ error: 'Error interno del servidor' });
  }
};[1;30m----------------------------------------[0m

[1;34m=== ./utils/auth-middleware.ts ===[0m
// src/utils/auth-middleware.ts

import { FastifyRequest, FastifyReply } from 'fastify';
import jwt from 'jsonwebtoken';
import redisClient from '../redis-client';

// Extiende el tipo de FastifyRequest para incluir cookies
declare module 'fastify' {
  interface FastifyRequest {
    cookies?: {
      token?: string;
    };
  }
}

const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';

export const verifyToken = async (
  request: FastifyRequest,
  reply: FastifyReply,
  done: (err?: Error) => void
) => {
  const authHeader = request.headers['authorization'];
  const token = authHeader && authHeader.startsWith('Bearer ')
    ? authHeader.slice(7)
    : request.cookies?.token || (request.body as any)?.token;

  if (!token) {
    reply.code(401).send({ message: 'Token requerido' });
    return done(new Error('Unauthorized'));
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as {
      user_id: number;
      username: string;
      email: string;
    };

    const sessionId = `jwt:${token}`;
    const isValid = await redisClient.get(sessionId);
    if (!isValid) {
      reply.code(401).send({ message: 'Sesión cerrada o inválida' });
      return done(new Error('Session invalid'));
    }

    await redisClient.expire(sessionId, 3600); // renovar TTL

    (request as any).user = decoded;
    (request as any).token = token;

    done();
  } catch (err: any) {
    if (err.name === 'TokenExpiredError') {
      reply.code(401).send({ message: 'Token expirado' });
    } else {
      reply.code(403).send({ message: 'Token inválido' });
    }
    done(err);
  }
};[1;30m----------------------------------------[0m

[1;34m=== ./server.ts ===[0m
import Fastify from 'fastify';
import fs from 'fs';
import path from 'path';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { openDb, initializeDb } from './database';
import multipart from '@fastify/multipart';
import { pipeline } from 'stream';
import util from 'util';
import { FastifyRequest } from 'fastify';
import { MultipartFile } from '@fastify/multipart';
import { createCanvas, loadImage } from 'canvas';
import { verifyToken } from './utils/auth-middleware';
import gamesRoutes from './routes/games.routes';
import friendsRoutes from './routes/friends.routes';
import { promisify } from 'util';
import { connectRedis } from './redis-client'
import redisClient from './redis-client';

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
const fastify = Fastify({ logger: true });

fastify.register(multipart);

// Rutas para gestionar el guardado de partidas y estadísticas del juego
fastify.register(gamesRoutes, { prefix: '/auth/games' });

// Ruta para gestionar amistades
fastify.register(friendsRoutes, { prefix: '/auth/friends' });

// Habilitar CORS

fastify.register(require('@fastify/cors'), {
  origin: true,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
});

// Asegurar que las carpetas existen
const dataPath = path.join(__dirname, '../data');
const avatarPath = path.join(dataPath, 'avatars');
if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath, { recursive: true });
if (!fs.existsSync(avatarPath)) fs.mkdirSync(avatarPath, { recursive: true });

// Registro de rutas estáticas para descargas y avatares
fastify.register(require('@fastify/static'), {
  root: dataPath,
  prefix: '/downloads/'
});
fastify.register(require('@fastify/static'), {
  root: avatarPath,
  prefix: '/avatars/',
  decorateReply: false // evita conflicto
});

// Endpoint para registrar un nuevo usuario
fastify.post('/auth/register', async (request, reply) => {
  const { username, email, password } = request.body as any;
  
  if (!username || !email || !password) {
    return reply.code(400).send({ message: 'Faltan campos requeridos' });
  }

  try {
    const db = await openDb();
    
    // Verificar si el usuario ya existe
    const existingUser = await db.get('SELECT * FROM users WHERE email = ? OR username = ?', [email, username]);
    if (existingUser) {
      await db.close();
      return reply.code(409).send({ message: 'Usuario o email ya existe' });
    }

    const hash = await bcrypt.hash(password, 10);
    
    // Insertar directamente en la base de datos
    const result = await db.run('INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)', [username, email, hash]);
    
    await db.close();
    
    return reply.code(201).send({ message: 'Usuario registrado exitosamente' });
  } catch (err: any) {
    console.error('Error en registro:', err);
    if (err.code === 'SQLITE_CONSTRAINT') {
      return reply.code(409).send({ message: 'Usuario o email ya existe' });
    }
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Endpoint para iniciar sesión (login) y generar token JWT
fastify.post('/auth/login', async (request, reply) => {
  const { email, password } = request.body as any;
  
  if (!email || !password) {
    return reply.code(400).send({ message: 'Email y contraseña son requeridos' });
  }

  try {
    const db = await openDb();
    const user = await db.get('SELECT * FROM users WHERE email = ?', [email]);
    
    if (!user || !(await bcrypt.compare(password, user.password_hash))) {
      await db.close();
      return reply.code(401).send({ message: 'Credenciales inválidas' });
    }

    const token = jwt.sign({
      user_id: user.id,
      username: user.username,
      email: user.email,
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hora
    }, JWT_SECRET);

    // Registrar sesión en DB y Redis
    const expiresAt = new Date(Date.now() + 3600 * 1000); // 1 hora// Guardar en Redis: clave = jwt:<token>, valor = user_id
    await redisClient.set(`jwt:${token}`, user.id.toString(), { EX: 3600 }); // 3600s = 1h
    await redisClient.set(`user:${user.id}:online`, 'true');
    await redisClient.sAdd('online_users', user.id.toString());
    await redisClient.set(`user:${user.id}:last_seen`, Date.now().toString());


    await db.run(
      `INSERT INTO sessions (user_id, session_token, expires_at) 
       VALUES (?, ?, ?)`,
      [user.id, token, expiresAt.toISOString()]
    );

    // Obtener avatar_url e idioma
    const profile = await db.get('SELECT avatar_url, language FROM user_profiles WHERE user_id = ?', [user.id]);

    await db.close();

    return reply.send({ 
      token,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        avatar_url: profile?.avatar_url || null,
        language: profile?.language || 'es'
      }
    });
  } catch (err) {
    console.error('Error en login:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Endpoint para cerrar sesión
fastify.post('/auth/logout', { preHandler: verifyToken }, async (request, reply) => {
  const token = (request as any).token;
  const userId = (request as any).user.user_id;

  try {
    const db = await openDb();
    
    // Eliminar sesión de la base de datos
    await db.run(`DELETE FROM sessions WHERE session_token = ?`, [token]);
    
    // Eliminar de Redis
    await redisClient.del(`jwt:${token}`); // ✅ Eliminar el token JWT
    await redisClient.del(`user:${userId}:online`);
    await redisClient.sRem('online_users', userId.toString());
    await redisClient.del(`user:${userId}:last_seen`);
    
    return reply.send({ message: 'Sesión cerrada correctamente' });
  } catch (err) {
    console.error('Error en logout:', err);
    return reply.code(500).send({ message: 'Error al cerrar sesión' });
  }
});

// Endpoint heartbeat para mantener sesión activa
fastify.get('/auth/heartbeat', { preHandler: verifyToken }, async (request, reply) => {
  const userId = (request as any).user.user_id;
  
  try {
    // Actualizar timestamp de última actividad
    await redisClient.set(`user:${userId}:last_seen`, Date.now().toString());
    return reply.send({ status: 'active' });
  } catch (err) {
    console.error('Error en heartbeat:', err);
    return reply.code(500).send({ message: 'Error interno' });
  }
});

// Endpoint para obtener usuarios conectados
fastify.get('/auth/online-users', async (request, reply) => {
  try {
    const onlineUsers = await redisClient.sMembers('online_users');
    return reply.send(onlineUsers.map(id => parseInt(id)));
  } catch (err) {
    console.error('Error obteniendo usuarios online:', err);
    return reply.code(500).send({ message: 'Error interno' });
  }
});

// Función de limpieza periódica de usuarios online
async function cleanInactiveSessions() {
  try {
    const onlineUsers = await redisClient.sMembers('online_users');
    const now = Date.now();
    
    for (const userId of onlineUsers) {
      const lastSeen = await redisClient.get(`user:${userId}:last_seen`);
      const inactiveTime = now - parseInt(lastSeen || '0');
      
      // Eliminar si inactivo por más de 10 minutos
      if (inactiveTime > 600000) {
        await redisClient.sRem('online_users', userId);
        await redisClient.del(`user:${userId}:online`);
        await redisClient.del(`user:${userId}:last_seen`);
        
        // También eliminar de la base de datos
        const db = await openDb();
        await db.run(`DELETE FROM sessions WHERE user_id = ?`, [userId]);
        await db.close();
      }
    }
  } catch (err) {
    console.error('Error en limpieza de sesiones:', err);
  }
}

// Iniciar limpieza periódica cada 10 minutos
setInterval(cleanInactiveSessions, 600000);

// Endpoint para subir y optimizar el avatar
fastify.post('/auth/profile/avatar', { preHandler: verifyToken }, async (request, reply) => {
  const userId = (request as any).user.user_id;
  
  const mpRequest = request as FastifyRequest & {
    file: () => Promise<MultipartFile>;
  };

  const data = await mpRequest.file();

  if (!data) {
    return reply.code(400).send({ message: 'No se ha enviado ningún archivo' });
  }

  const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
  if (!allowedTypes.includes(data.mimetype)) {
    return reply.code(400).send({ message: 'Tipo de archivo no permitido' });
  }

  if (data.file.truncated) {
    return reply.code(400).send({ message: 'Archivo demasiado grande (máx 2MB)' });
  }

  try {
    const buffer = await data.toBuffer();
    const image = await loadImage(buffer);
    
    // Tamaño máximo deseado
    const MAX_SIZE = 256;
    let width = image.width;
    let height = image.height;

    // Redimensionar manteniendo aspect ratio
    if (width > height && width > MAX_SIZE) {
      height = Math.round((height * MAX_SIZE) / width);
      width = MAX_SIZE;
    } else if (height > MAX_SIZE) {
      width = Math.round((width * MAX_SIZE) / height);
      height = MAX_SIZE;
    }

    // Crear canvas con nuevas dimensiones
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');
    ctx.drawImage(image, 0, 0, width, height);

    // Convertir a JPEG con calidad del 80% (más ligero que PNG)
    const processedBuffer = canvas.toBuffer('image/jpeg', { quality: 0.8 });

    const filename = `avatar_${userId}.jpg`;
    const saveDir = '/app/data/avatars';
    const filepath = path.join(saveDir, filename);

    if (!fs.existsSync(saveDir)) {
      fs.mkdirSync(saveDir, { recursive: true });
    }

    fs.writeFileSync(filepath, processedBuffer);

    // Guardar en base de datos
    const db = await openDb();
    await db.run(`
      INSERT INTO user_profiles (user_id, avatar_url)
      VALUES (?, ?)
      ON CONFLICT(user_id) DO UPDATE SET avatar_url = excluded.avatar_url
    `, [userId, `/avatars/${filename}`]);

    await db.close();

    return reply.send({ 
      message: '✅ Avatar optimizado y subido correctamente', 
      avatar_url: `http://localhost:8000/avatars/${filename}`,
      dimensions: { width, height },
      size: `${(processedBuffer.length / 1024).toFixed(2)} KB`
    });

  } catch (err) {
    console.error('Error procesando avatar:', err);
    return reply.code(500).send({ message: 'Error procesando avatar' });
  }
});
 
// Endpoint para obtener estadísticas del usuario y generar archivo de historial
fastify.get('/auth/profile/stats', { preHandler: verifyToken }, async (request, reply) => {
  try {
    const db = await openDb();
    const userId = (request as any).user.user_id;

    // Obtener todas las partidas completadas con su info de jugadores
    const games = await db.all(`
      SELECT
        g.id AS game_id,
        g.finished_at,
        g.status,
        g.tournament_id,
        p.user_id AS player_id,
        p.team_name AS team,
        u.username,
        t.name AS tournament_name
      FROM games g
      JOIN participants p ON p.game_id = g.id
      LEFT JOIN users u ON u.id = p.user_id
      LEFT JOIN tournaments t ON g.tournament_id = t.id
      WHERE g.status IN ('finished')
    `);

    // Obtener todos los scores por game + team
    const scores = await db.all(`
      SELECT game_id, team_name, point_number
      FROM scores
    `);

    const scoreMap = new Map<string, number>();
    for (const s of scores) {
      scoreMap.set(`${s.game_id}_${s.team_name}`, s.point_number);
    }

    // Agrupar los jugadores por game_id
    const groupedGames = new Map<number, any[]>();
    for (const g of games) {
      if (!groupedGames.has(g.game_id)) groupedGames.set(g.game_id, []);
      groupedGames.get(g.game_id)!.push(g);
    }

    // Preparar stats individuales
    const userGames = new Map<number, {
      matches: any[],
      pointsFor: number,
      pointsAgainst: number
    }>();

    for (const [gameId, players] of groupedGames.entries()) {
      if (players.length < 1) continue;

      for (const current of players) {
        const opponent = players.find(p => p.player_id !== current.player_id && p.user_id !== null) || null;

        const userScore = scoreMap.get(`${gameId}_${current.team}`) ?? 0;

        let opponentScore = 0;
        let opponentName = 'Bot AI';

        if (opponent) {
          opponentScore = scoreMap.get(`${gameId}_${opponent.team}`) ?? 0;
          opponentName = opponent.username || 'Bot AI';
        } else {
          // Buscar en scores el otro equipo aunque no haya participant asociado
          const allTeams = scores
            .filter(s => s.game_id === gameId)
            .map(s => s.team_name);
          const otherTeam = allTeams.find(t => t !== current.team);
          if (otherTeam) {
            opponentScore = scoreMap.get(`${gameId}_${otherTeam}`) ?? 0;
          }
        }

        if (!userGames.has(current.player_id)) {
          userGames.set(current.player_id, {
            matches: [],
            pointsFor: 0,
            pointsAgainst: 0
          });
        }

        userGames.get(current.player_id)!.pointsFor += userScore;
        userGames.get(current.player_id)!.pointsAgainst += opponentScore;

        userGames.get(current.player_id)!.matches.push({
          id: gameId,
          result: userScore > opponentScore ? 'win' : 'loss',
          opponent: opponentName,
          score: `${userScore}-${opponentScore}`,
          date: current.finished_at,
          tournament: current.tournament_name || '-'
        });
      }
    }

    // Calcular ELOs
    const eloList = Array.from(userGames.entries()).map(([uid, data]) => ({
      user_id: uid,
      elo: 1000 + data.pointsFor - data.pointsAgainst
    }));

    // Asegurar que todos los usuarios están presentes (aun sin partidas)
    const allUsers = await db.all(`SELECT id FROM users`);
    for (const u of allUsers) {
      if (!userGames.has(u.id)) {
        userGames.set(u.id, { matches: [], pointsFor: 0, pointsAgainst: 0 });
        eloList.push({ user_id: u.id, elo: 1000 });
      }
    }

    eloList.sort((a, b) => b.elo - a.elo);
    const ranking = eloList.findIndex(u => u.user_id === userId) + 1;

    const userData = userGames.get(userId)!;
    const wins = userData.matches.filter(m => m.result === 'win').length;
    const losses = userData.matches.filter(m => m.result === 'loss').length;
    const totalGames = wins + losses;
    const winRate = totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0;
    const elo = 1000 + userData.pointsFor - userData.pointsAgainst;

    const matchHistory = userData.matches.sort(
      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
    );

    // Guardar historial completo en txt
    const filePath = path.resolve('/app/data/historial_partidas.txt');
    const matchHistoryText = matchHistory.map(entry =>
      `Partida ${entry.id} | Resultado: ${entry.result} | Oponente: ${entry.opponent} | Torneo: ${entry.tournament} | Marcador: ${entry.score} | Fecha: ${entry.date}`
    );
    fs.writeFileSync(filePath, matchHistoryText.join('\n'));

    // Avatar
    const profile = await db.get('SELECT avatar_url FROM user_profiles WHERE user_id = ?', [userId]);

    await db.close();

    return reply.send({
      totalGames,
      wins,
      losses,
      winRate,
      elo,
      ranking,
      matchHistory: matchHistory.slice(0, 10),
      avatar_url: profile?.avatar_url || null
    });
  } catch (err) {
    console.error('Error obteniendo estadísticas:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Endpoint para obtener el ranking global completo (top 100)
fastify.get('/auth/ranking', async (request, reply) => {
  try {
    const db = await openDb();

    // Obtener partidas finalizadas
    const games = await db.all(`
      SELECT
        g.id AS game_id,
        g.finished_at,
        g.status,
        g.tournament_id,
        p.user_id AS player_id,
        p.team_name AS team,
        u.username,
        t.name AS tournament_name
      FROM games g
      JOIN participants p ON p.game_id = g.id
      LEFT JOIN users u ON u.id = p.user_id
      LEFT JOIN tournaments t ON g.tournament_id = t.id
      WHERE g.status IN ('finished')
    `);

    // Scores
    const scores = await db.all(`
      SELECT game_id, team_name, point_number
      FROM scores
    `);

    const scoreMap = new Map<string, number>();
    for (const s of scores) {
      scoreMap.set(`${s.game_id}_${s.team_name}`, s.point_number);
    }

    // Agrupar jugadores por partida
    const groupedGames = new Map<number, any[]>();
    for (const g of games) {
      if (!groupedGames.has(g.game_id)) groupedGames.set(g.game_id, []);
      groupedGames.get(g.game_id)!.push(g);
    }

    // Calcular estadísticas por jugador
    const userGames = new Map<number, {
      username: string;
      wins: number;
      losses: number;
      pointsFor: number;
      pointsAgainst: number;
    }>();

    for (const [gameId, players] of groupedGames.entries()) {
      if (players.length < 1) continue;

      for (const current of players) {
        const uid = current.player_id;
        if (!uid) continue;

        const opponent = players.find(p => p.player_id !== uid && p.user_id !== null) || null;
        const userScore = scoreMap.get(`${gameId}_${current.team}`) ?? 0;

        let opponentScore = 0;
        if (opponent) {
          opponentScore = scoreMap.get(`${gameId}_${opponent.team}`) ?? 0;
        } else {
          // Buscar el otro equipo aunque sea contra bot
          const allTeams = scores
            .filter(s => s.game_id === gameId)
            .map(s => s.team_name);
          const otherTeam = allTeams.find(t => t !== current.team);
          if (otherTeam) {
            opponentScore = scoreMap.get(`${gameId}_${otherTeam}`) ?? 0;
          }
        }

        if (!userGames.has(uid)) {
          userGames.set(uid, {
            username: current.username || `User${uid}`,
            wins: 0,
            losses: 0,
            pointsFor: 0,
            pointsAgainst: 0
          });
        }

        const stats = userGames.get(uid)!;
        stats.pointsFor += userScore;
        stats.pointsAgainst += opponentScore;
        if (userScore > opponentScore) {
          stats.wins += 1;
        } else {
          stats.losses += 1;
        }
      }
    }

    // Asegurar que todos los usuarios están en el ranking
    const allUsers = await db.all(`SELECT id, username FROM users`);
    for (const u of allUsers) {
      if (!userGames.has(u.id)) {
        userGames.set(u.id, {
          username: u.username,
          wins: 0,
          losses: 0,
          pointsFor: 0,
          pointsAgainst: 0
        });
      }
    }

    // Calcular ELO y preparar la respuesta
    const rankingRaw = Array.from(userGames.entries()).map(([uid, data]) => {
      const totalGames = data.wins + data.losses;
      const winRate = totalGames > 0 ? Math.round((data.wins / totalGames) * 100) : 0;
      const elo = 1000 + data.pointsFor - data.pointsAgainst;

      return {
        id: uid,
        username: data.username,
        wins: data.wins,
        losses: data.losses,
        totalGames,
        winRate,
        elo
      };
    });

    rankingRaw.sort((a, b) => b.elo - a.elo);

    const rankingTop100 = rankingRaw.slice(0, 100).map((entry, index) => ({
      ...entry,
      rank: index + 1,
      points: entry.elo // puedes ajustar esto si usas un sistema distinto de puntos
    }));

    await db.close();
    return reply.send(rankingTop100);
  } catch (err) {
    console.error('Error obteniendo ranking:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Endpoint de home para partidos en juego ('in_progress')
fastify.get('/auth/games/live', async (request, reply) => {
  try {
    const db = await openDb();

    // Buscar partidas en progreso
    const games = await db.all(`
      SELECT g.id AS game_id, g.status, g.started_at
      FROM games g
      WHERE g.status = 'in_progress'
    `);

    if (!games.length) {
      await db.close();
      return reply.send([]);
    }

    // Obtener participantes humanos (no bots) de esas partidas
    const participants = await db.all(`
      SELECT p.game_id, p.team_name, u.username
      FROM participants p
      LEFT JOIN users u ON u.id = p.user_id
      WHERE p.game_id IN (${games.map(g => g.game_id).join(',')})
    `);

    // Obtener puntuaciones por game_id + team
    const scores = await db.all(`
      SELECT game_id, team_name, MAX(point_number) AS score
      FROM scores
      WHERE game_id IN (${games.map(g => g.game_id).join(',')})
      GROUP BY game_id, team_name
    `);

    // Mapear resultados por partida
    const liveMatches = games.map(game => {
      const gameParticipants = participants.filter(p => p.game_id === game.game_id);
      const scoreMap = new Map();
      scores
        .filter(s => s.game_id === game.game_id)
        .forEach(s => scoreMap.set(s.team_name, s.score));
      const [p1, p2] = gameParticipants;
      return {
        id: game.game_id,
        player1: { username: p1?.username || 'Player 1' },
        player2: { username: p2?.username || 'Player 2' },
        score1: scoreMap.get(p1?.team_name) || 0,
        score2: scoreMap.get(p2?.team_name) || 0,
        round: Math.max(scoreMap.get(p1?.team_name) || 0, scoreMap.get(p2?.team_name) || 0)
      };
    });

    await db.close();
    return reply.send(liveMatches);
  } catch (err) {
    console.error('Error obteniendo partidas en vivo:', err);
    return reply.code(500).send({ error: 'Error al obtener partidas en vivo' });
  }
});

// Endpoint para cambiar datos de usuario
fastify.put('/auth/settings/user_data', { preHandler: verifyToken }, async (request, reply) => {
  const db = await openDb();

  try {
    const userId = (request as any).user.user_id;
    const {
      username,
      email,
      new_password,
      current_password
    } = request.body as any;

    const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      return reply.code(404).send({ message: 'Usuario no encontrado' });
    }

    const currentPassword = typeof current_password === 'string' ? current_password.trim() : '';
    const newPassword = typeof new_password === 'string' ? new_password.trim() : '';
    const quiereCambiarPassword = currentPassword !== '' || newPassword !== '';

    let updatedPasswordHash = user.password_hash;

    // Validaciones de cambio de contraseña
    if (quiereCambiarPassword) {
      if (!currentPassword) {
        return reply.code(400).send({ message: 'Falta contraseña actual' });
      }

      const isMatch = await bcrypt.compare(currentPassword, user.password_hash);
      if (!isMatch) {
        return reply.code(401).send({ message: 'Contraseña actual incorrecta' });
      }

      if (!newPassword) {
        return reply.code(400).send({ message: 'Nueva contraseña inválida' });
      }

      updatedPasswordHash = await bcrypt.hash(newPassword, 10);
    }

    // Actualizar email, username y contraseña si es válida
    await db.run(
      `UPDATE users SET username = ?, email = ?, password_hash = ? WHERE id = ?`,
      [
        username ?? user.username,
        email ?? user.email,
        updatedPasswordHash,
        userId
      ]
    );

    return reply.send({ message: 'Perfil actualizado correctamente' });

  } catch (err) {
    console.error('Error actualizando perfil:', err);
    return reply.code(500).send({ message: 'Error actualizando perfil' });
  } finally {
    await db.close();
  }
});

// Endpoint para obtener datos de usuario (username y email)
fastify.get('/auth/settings/user_data', { preHandler: verifyToken }, async (request, reply) => {
  try {
    const db = await openDb();
    const userId = (request as any).user.user_id;

    const user = await db.get(
      `SELECT username, email FROM users WHERE id = ?`,
      [userId]
    );

    await db.close();

    if (!user) {
      return reply.code(404).send({ message: 'Usuario no encontrado' });
    }

    return reply.send(user);
  } catch (err) {
    console.error('Error al obtener datos de usuario:', err);
    return reply.code(500).send({ message: 'Error al obtener datos de usuario' });
  }
});

// Endpoint para cambiar configuración juego
fastify.put('/auth/settings/config', { preHandler: verifyToken }, async (request, reply) => {
  try {
    const db = await openDb();
    const userId = (request as any).user.user_id;
    const {
      language,
      notifications,
      sound_effects,
      game_difficulty
    } = request.body as any;

    await db.run(
      `INSERT INTO user_profiles (user_id, language, notifications, sound, difficulty)
       VALUES (?, ?, ?, ?, ?)
       ON CONFLICT(user_id) DO UPDATE SET
         language = excluded.language,
         notifications = excluded.notifications,
         sound = excluded.sound,
         difficulty = excluded.difficulty`,
      [userId, language, notifications, sound_effects, game_difficulty]
    );

    await db.close();
    return reply.send({ message: 'Configuración guardada correctamente' });
  } catch (err) {
    console.error('Error guardando configuración:', err);
    return reply.code(500).send({ message: 'Error guardando configuración' });
  }
});

// Obtener configuraciones del juego
fastify.get('/auth/settings/config', { preHandler: verifyToken }, async (request, reply) => {
  try {
    const db = await openDb();
    const userId = (request as any).user.user_id;
    const config = await db.get(
      `SELECT 
        language, 
        notifications, 
        sound AS sound_effects, 
        difficulty AS game_difficulty
      FROM user_profiles 
      WHERE user_id = ?`,
      [userId]
    );
    await db.close();

    if (!config) {
      return reply.code(404).send({ message: 'Configuración no encontrada' });
    }

    return reply.send(config);
  } catch (err) {
    console.error('Error al obtener configuración:', err);
    return reply.code(500).send({ message: 'Error al obtener configuración' });
  }
});

// Endpoint para autenticación con Google (verifica token, crea usuario si no existe, devuelve JWT)
type GooglePayload = {
  email: string;
  name: string;
  picture?: string;
  [key: string]: any;
};
fastify.post('/auth/google', async (request, reply) => {
  const { token } = request.body as any;
  
  if (!token) {
    return reply.code(400).send({ message: 'Falta token de Google' });
  }

  try {
    const res = await fetch(`https://oauth2.googleapis.com/tokeninfo?id_token=${token}`);
    if (!res.ok) {
      return reply.code(401).send({ message: 'Token de Google inválido' });
    }
    
    const payload = (await res.json()) as GooglePayload;
    
    const db = await openDb();
    let user = await db.get('SELECT * FROM users WHERE email = ?', [payload.email]);
    
    if (!user) {
      // Crear nuevo usuario con Google
      const result = await db.run(
        'INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)',
        [payload.name, payload.email, ''] // Sin contraseña para usuarios de Google
      );
      
      user = await db.get('SELECT * FROM users WHERE email = ?', [payload.email]);
    }

    const jwtToken = jwt.sign({
      user_id: user.id,
      username: user.username,
      email: user.email,
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hora
    }, JWT_SECRET);

    // Registrar sesión en DB y Redis
    const expiresAt = new Date(Date.now() + 3600 * 1000); // 1 hora
    await db.run(
      `INSERT INTO sessions (user_id, session_token, expires_at) 
      VALUES (?, ?, ?)`,
      [user.id, jwtToken, expiresAt.toISOString()]
    );
    await redisClient.set(`user:${user.id}:online`, 'true');
    await redisClient.sAdd('online_users', user.id.toString());
    await redisClient.set(`user:${user.id}:last_seen`, Date.now().toString());
    await redisClient.set(`jwt:${jwtToken}`, user.id.toString(), { EX: 3600 });

    await db.close();
    
    return reply.send({ 
      token: jwtToken,
      user: {
        id: user.id,
        username: user.username,
        email: user.email
      }
    });
  } catch (err) {
    console.error('Error con Google Sign-In:', err);
    return reply.code(500).send({ message: 'Error con Google Sign-In' });
  }
});

// Endpoint para descargar historial
fastify.get('/auth/profile/download-historial', { preHandler: verifyToken }, async (request, reply) => {
  const userId = (request as any).user.user_id;
  const filePath = path.resolve('/app/data/historial_partidas.txt');

  if (!fs.existsSync(filePath)) {
    return reply.code(404).send({ message: 'Historial no encontrado' });
  }

  return reply
    .type('text/plain')
    .header('Content-Disposition', `attachment; filename=historial_${userId}.txt`)
    .send(fs.createReadStream(filePath));
});

// Inicializar base de datos y Redis
Promise.all([initializeDb(), connectRedis()])
  .then(() => {
    fastify.listen({ port: 8000, host: '0.0.0.0' }, (err, address) => {
      if (err) {
        fastify.log.error(err);
        process.exit(1);
      }
      console.log(`Servidor escuchando en ${address}`);
    });
  })
  .catch((err) => {
    console.error('Error al inicializar servicios:', err);
    process.exit(1);
  });

// Cerrar conexiones al apagar el servidor
process.on('SIGINT', async () => {
  await redisClient.quit();
  fastify.close();
  process.exit();
});[1;30m----------------------------------------[0m

[1;34m=== ./routes/friends.routes.ts ===[0m
// auth-service/routes/friends.routes.ts

import { FastifyInstance } from 'fastify';
import { getFriendsHandler, getPendingRequestsHandler, getAvailableUsersHandler, sendFriendRequestHandler } from '../controllers/friends.controller';
import { verifyToken } from '../utils/auth-middleware';

export default async function friendsRoutes(fastify: FastifyInstance) {
    console.log("✅ Friends routes registered");
    fastify.get('/', { preHandler: verifyToken }, getFriendsHandler);
    fastify.get('/requests', { preHandler: verifyToken }, getPendingRequestsHandler);
    fastify.get('/available', { preHandler: verifyToken }, getAvailableUsersHandler);
    fastify.post('/request/:targetId', { preHandler: verifyToken }, sendFriendRequestHandler);
}
[1;30m----------------------------------------[0m

[1;34m=== ./routes/games.routes.ts ===[0m
// auth-service/routes/games.routes.ts

import { FastifyInstance } from 'fastify';
import { startGameHandler } from '../controllers/games.controller';
import { getUserIdByUsername } from '../controllers/games.controller';

export default async function gamesRoutes(fastify: FastifyInstance) {
  fastify.post('/start', startGameHandler);
fastify.get('/user-id', getUserIdByUsername);
  
}
[1;30m----------------------------------------[0m

[1;34m=== ./redis-client.ts ===[0m
// auth-service/src/redis-client.ts
import { createClient } from 'redis';
import dotenv from 'dotenv';

dotenv.config();

const redisClient = createClient({
  url: process.env.REDIS_URL || `redis://:${process.env.REDIS_PASSWORD || ''}@${process.env.REDIS_HOST || 'redis'}:${process.env.REDIS_PORT || '6379'}`
});

redisClient.on('error', (err) => {
  console.error('Redis client error:', err);
});

export async function connectRedis() {
  try {
    if (redis.isOpen) {
        console.log('🔁 Redis ya estaba conectado');
        return;
    }

    await redis.connect();
    console.log('🔌 Redis conectado');
  } catch (err) {
    console.error('Error conectando a Redis:', err);
  }
}

export default redisClient;[1;30m----------------------------------------[0m
