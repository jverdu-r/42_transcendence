import Fastify from 'fastify';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { openDb, initializeDb } from './database';
import redis from './redis-client';

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';

const fastify = Fastify({ logger: true });

// Habilitar CORS
fastify.register(require('@fastify/cors'), {
  origin: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
});

// Middleware para verificar JWT
async function verifyToken(request: any, reply: any) {
  const token = request.headers.authorization?.replace('Bearer ', '');
  
  if (!token) {
    return reply.code(401).send({ message: 'Token requerido' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    request.user = decoded;
  } catch (err) {
    return reply.code(401).send({ message: 'Token inválido' });
  }
}

// Inicializar la base de datos al arrancar
async function initializeDatabase() {
  try {
    await initializeDb();
    console.log('Base de datos inicializada correctamente');
  } catch (error) {
    console.error('Error al inicializar la base de datos:', error);
  }
}

fastify.post('/auth/register', async (request, reply) => {
  const { username, email, password } = request.body as any;
  
  if (!username || !email || !password) {
    return reply.code(400).send({ message: 'Faltan campos requeridos' });
  }

  try {
    const db = await openDb();
    
    // Verificar si el usuario ya existe
    const existingUser = await db.get('SELECT * FROM users WHERE email = ? OR username = ?', [email, username]);
    if (existingUser) {
      await db.close();
      return reply.code(409).send({ message: 'Usuario o email ya existe' });
    }

    const hash = await bcrypt.hash(password, 10);
    
    // Insertar directamente en la base de datos
    const result = await db.run('INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)', [username, email, hash]);
    
    await db.close();
    
    return reply.code(201).send({ message: 'Usuario registrado exitosamente' });
  } catch (err: any) {
    console.error('Error en registro:', err);
    if (err.code === 'SQLITE_CONSTRAINT') {
      return reply.code(409).send({ message: 'Usuario o email ya existe' });
    }
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

fastify.post('/auth/login', async (request, reply) => {
  const { email, password } = request.body as any;
  
  if (!email || !password) {
    return reply.code(400).send({ message: 'Email y contraseña son requeridos' });
  }

  try {
    const db = await openDb();
    const user = await db.get('SELECT * FROM users WHERE email = ?', [email]);
    
    if (!user || !(await bcrypt.compare(password, user.password_hash))) {
      await db.close();
      return reply.code(401).send({ message: 'Credenciales inválidas' });
    }

    const token = jwt.sign({
      user_id: user.id,
      username: user.username,
      email: user.email,
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hora
    }, JWT_SECRET);

    await db.close();
    
    return reply.send({ 
      token,
      user: {
        id: user.id,
        username: user.username,
        email: user.email
      }
    });
  } catch (err) {
    console.error('Error en login:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Endpoint para obtener estadísticas del usuario
fastify.get('/auth/profile/stats', { preHandler: verifyToken }, async (request, reply) => {
  try {
    const db = await openDb();
    const userId = (request as any).user.user_id;
    
    // Obtener estadísticas del usuario
    const totalGamesResult = await db.get(
      'SELECT COUNT(*) as total FROM games WHERE player1_id = ? OR player2_id = ?',
      [userId, userId]
    );
    
    const winsResult = await db.get(`
      SELECT COUNT(*) as wins FROM games 
      WHERE status = 'completed' AND (
        (player1_id = ? AND score1 > score2) OR 
        (player2_id = ? AND score2 > score1)
      )
    `, [userId, userId]);
    
    const lossesResult = await db.get(`
      SELECT COUNT(*) as losses FROM games 
      WHERE status = 'completed' AND (
        (player1_id = ? AND score1 < score2) OR 
        (player2_id = ? AND score2 < score1)
      )
    `, [userId, userId]);
    
    // Obtener el historial de partidas recientes
    const recentGames = await db.all(`
      SELECT 
        g.id,
        g.score1,
        g.score2,
        g.start_time,
        g.end_time,
        g.status,
        u1.username as player1_username,
        u2.username as player2_username,
        g.player1_id,
        g.player2_id
      FROM games g
      LEFT JOIN users u1 ON g.player1_id = u1.id
      LEFT JOIN users u2 ON g.player2_id = u2.id
      WHERE (g.player1_id = ? OR g.player2_id = ?) AND g.status = 'completed'
      ORDER BY g.end_time DESC
      LIMIT 10
    `, [userId, userId]);
    
    // Obtener posición en el ranking (simplificado por número de victorias)
    const rankingResult = await db.get(`
      SELECT COUNT(*) + 1 as ranking FROM (
        SELECT 
          user_id,
          COUNT(*) as wins
        FROM (
          SELECT player1_id as user_id FROM games 
          WHERE status = 'completed' AND score1 > score2
          UNION ALL
          SELECT player2_id as user_id FROM games 
          WHERE status = 'completed' AND score2 > score1
        ) wins_subquery
        GROUP BY user_id
        HAVING wins > ?
      )
    `, [winsResult.wins]);
    
    await db.close();
    
    const totalGames = totalGamesResult.total;
    const wins = winsResult.wins;
    const losses = lossesResult.losses;
    const winRate = totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0;
    
    // Calcular ELO simplificado (base 1000 + 50 por victoria - 25 por derrota)
    const elo = 1000 + (wins * 50) - (losses * 25);
    
    // Procesar historial de partidas
    const matchHistory = recentGames.map(game => {
      const isPlayer1 = game.player1_id === userId;
      const isWin = isPlayer1 ? game.score1 > game.score2 : game.score2 > game.score1;
      const opponentName = isPlayer1 ? game.player2_username : game.player1_username;
      const userScore = isPlayer1 ? game.score1 : game.score2;
      const opponentScore = isPlayer1 ? game.score2 : game.score1;
      
      return {
        id: game.id,
        result: isWin ? 'win' : 'loss',
        opponent: opponentName,
        score: `${userScore}-${opponentScore}`,
        date: game.end_time
      };
    });
    
    return reply.send({
      totalGames,
      wins,
      losses,
      winRate,
      elo,
      ranking: rankingResult.ranking,
      matchHistory
    });
    
  } catch (err) {
    console.error('Error obteniendo estadísticas:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

// Nuevo endpoint para obtener el ranking global
fastify.get('/auth/ranking', async (request, reply) => {
  try {
    const db = await openDb();
    
    // Obtener el ranking de todos los usuarios
    const rankings = await db.all(`
      SELECT 
        u.id,
        u.username,
        COALESCE(user_stats.wins, 0) as wins,
        COALESCE(user_stats.losses, 0) as losses,
        COALESCE(user_stats.total_games, 0) as total_games,
        COALESCE(user_stats.elo, 1000) as elo,
        COALESCE(user_stats.win_rate, 0) as win_rate
      FROM users u
      LEFT JOIN (
        SELECT 
          user_id,
          SUM(wins) as wins,
          SUM(losses) as losses,
          SUM(total_games) as total_games,
          (1000 + (SUM(wins) * 50) - (SUM(losses) * 25)) as elo,
          CASE 
            WHEN SUM(total_games) > 0 THEN ROUND((SUM(wins) * 100.0) / SUM(total_games))
            ELSE 0 
          END as win_rate
        FROM (
          SELECT 
            player1_id as user_id,
            COUNT(*) as total_games,
            SUM(CASE WHEN score1 > score2 THEN 1 ELSE 0 END) as wins,
            SUM(CASE WHEN score1 < score2 THEN 1 ELSE 0 END) as losses
          FROM games 
          WHERE status = 'completed'
          GROUP BY player1_id
          
          UNION ALL
          
          SELECT 
            player2_id as user_id,
            COUNT(*) as total_games,
            SUM(CASE WHEN score2 > score1 THEN 1 ELSE 0 END) as wins,
            SUM(CASE WHEN score2 < score1 THEN 1 ELSE 0 END) as losses
          FROM games 
          WHERE status = 'completed'
          GROUP BY player2_id
        ) combined_stats
        GROUP BY user_id
      ) user_stats ON u.id = user_stats.user_id
      ORDER BY elo DESC, wins DESC, total_games DESC
      LIMIT 20
    `);
    
    await db.close();
    
    // Formatear los datos para el frontend
    const formattedRankings = rankings.map((user, index) => ({
      rank: index + 1,
      id: user.id,
      username: user.username,
      wins: user.wins,
      losses: user.losses,
      totalGames: user.total_games,
      elo: user.elo,
      winRate: user.win_rate,
      points: user.elo // Usar ELO como puntos
    }));
    
    return reply.send(formattedRankings);
    
  } catch (err) {
    console.error('Error obteniendo ranking:', err);
    return reply.code(500).send({ message: 'Error interno del servidor' });
  }
});

type GooglePayload = {
  email: string;
  name: string;
  picture?: string;
  [key: string]: any;
};

fastify.post('/auth/google', async (request, reply) => {
  const { token } = request.body as any;
  
  if (!token) {
    return reply.code(400).send({ message: 'Falta token de Google' });
  }

  try {
    const res = await fetch(`https://oauth2.googleapis.com/tokeninfo?id_token=${token}`);
    if (!res.ok) {
      return reply.code(401).send({ message: 'Token de Google inválido' });
    }
    
    const payload = (await res.json()) as GooglePayload;
    
    const db = await openDb();
    let user = await db.get('SELECT * FROM users WHERE email = ?', [payload.email]);
    
    if (!user) {
      // Crear nuevo usuario con Google
      const result = await db.run(
        'INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)',
        [payload.name, payload.email, ''] // Sin contraseña para usuarios de Google
      );
      
      user = await db.get('SELECT * FROM users WHERE email = ?', [payload.email]);
    }

    const jwtToken = jwt.sign({
      user_id: user.id,
      username: user.username,
      email: user.email,
      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hora
    }, JWT_SECRET);

    await db.close();
    
    return reply.send({ 
      token: jwtToken,
      user: {
        id: user.id,
        username: user.username,
        email: user.email
      }
    });
  } catch (err) {
    console.error('Error con Google Sign-In:', err);
    return reply.code(500).send({ message: 'Error con Google Sign-In' });
  }
});

// Inicializar base de datos antes de arrancar el servidor
initializeDatabase().then(() => {
  fastify.listen({ port: 8000, host: '0.0.0.0' }, err => {
    if (err) {
      fastify.log.error(err);
      process.exit(1);
    }
  });
});
