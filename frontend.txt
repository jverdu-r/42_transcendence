[1;32m=== ESTRUCTURA DE DIRECTORIOS ===[0m
.
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ UnifiedGameRenderer.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameEngine.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameRenderer.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ navbar.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ playerDisplay.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pages
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ chat.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ friends.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameLobby.css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameLobby.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameSpectator.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ home.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ login.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ play.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ profile.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ranking.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ register.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ settings.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ tournaments.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ unifiedGameAI.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ unifiedGameLocal.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ unifiedGameOnline.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ gameLobby.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ types
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ google.d.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ utils
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gameLogic.ts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ safariPolyfills.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google-config.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ i18n.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ input.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ router.ts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ safariPolyfills.ts
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ types.d.ts
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ frontend.txt
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ nginx.conf
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ print_tree.sh
‚îú‚îÄ‚îÄ tailwind.config.js
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ webpack.config.js

7 directories, 42 files

[1;32m=== CONTENIDO DE ARCHIVOS DE TEXTO ===[0m

[1;34m=== ./tailwind.config.js ===[0m
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
[1;30m----------------------------------------[0m

[1;34m=== ./tsconfig.json ===[0m
{
  "compilerOptions": {
    "target": "es2021",
    "module": "esnext",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "lib": ["dom", "dom.iterable", "esnext"],
    "typeRoots": ["./src/types", "./node_modules/@types"],
    "types": ["google.accounts"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
[1;30m----------------------------------------[0m

[1;34m=== ./print_tree.sh ===[0m
#!/bin/bash

# Funci√≥n para detectar si un archivo es de texto
is_text_file() {
  file -b --mime-encoding "$1" | grep -q -v 'binary'
}

# Mostrar estructura de directorios (excluyendo .git, node_modules, styles y pages)
echo -e "\033[1;32m=== ESTRUCTURA DE DIRECTORIOS ===\033[0m"
tree -a -I '.git|node_modules' --dirsfirst

# Mostrar contenido de archivos de texto, ignorando .git, node_modules, styles y pages
echo -e "\n\033[1;32m=== CONTENIDO DE ARCHIVOS DE TEXTO ===\033[0m"
find . -type f \
  ! -path '*/.git/*' \
  ! -path '*/print-tree.sh' \
  ! -path '*/README.md' \
  ! -path '*/node_modules/*' \
  | while read -r file; do
    if is_text_file "$file"; then
      echo -e "\n\033[1;34m=== $file ===\033[0m"
      cat "$file"
      echo -e "\033[1;30m----------------------------------------\033[0m"
    else
      echo -e "\n\033[1;31m=== $file (archivo binario, omitido) ===\033[0m"
    fi
done



  # ! -path '*/.api-gateway/src/*' \
  # ! -path '*/.api-gateway/package.json' \
  # ! -path '*/.api-gateway/tsconfig.json' \
  # ! -path '*/.chat-service/src/*' \
  # ! -path '*/.chat-service/package.json' \
  # ! -path '*/.chat-service/tsconfig.json' \
  # ! -path '*/frontend/src/*' \
  # ! -path '*/frontend/package.json' \
  # ! -path '*/frontend/tailwind.config.js' \
  # ! -path '*/frontend/tsconfig.json' \
  # ! -path '*/frontend/webpack.config.js' \
  # ! -path '*/game-service/tsconfig.json' \
  # ! -path '*/game-service/package.json' \
  # ! -path '*/game-service/src/*' \[1;30m----------------------------------------[0m

[1;34m=== ./src/safariPolyfills.ts ===[0m
// src/safariPolyfills.ts

// Safari specific polyfills and fixes
console.log('Safari polyfills loaded');
[1;30m----------------------------------------[0m

[1;34m=== ./src/auth.ts ===[0m
export interface User {
  id: number;
  username: string;
  email: string;
}

export interface UserSettings {
  language: string;
  notifications: string;
  doubleFactor: string;
  game_difficulty: string;
}

// Obtiene el JWT del localStorage
function getToken(): string | null {
  return localStorage.getItem('jwt');
}

// Decodifica el JWT manualmente (sin librer√≠as)
function parseJwt(token: string): any {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map(c => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`)
        .join('')
    );
    return JSON.parse(jsonPayload);
  } catch (err) {
    console.error(':x: Error al parsear JWT:', err);
    return null;
  }
}

// Funci√≥n para obtener configuraciones del usuario
export async function getUserSettings(): Promise<UserSettings | null> {
  const token = getToken();
  if (!token) return null;

  try {
    const response = await fetch('/api/auth/settings/config', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error('Error al obtener configuraciones:', response.status);
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error('Error en la petici√≥n de configuraciones:', error);
    return null;
  }
}

// Funci√≥n para obtener datos del usuario
export async function fetchUserProfile(): Promise<User | null> {
  const token = getToken();
  if (!token) return null;

  try {
    const response = await fetch('/api/auth/settings/user_data', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error('Error al obtener datos de usuario:', response.status);
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error('Error en la petici√≥n de datos de usuario:', error);
    return null;
  }
}

// Funci√≥n para aplicar configuraciones del usuario
export async function applyUserSettings(): Promise<void> {
  const settings = await getUserSettings();
  if (!settings) return;

  // Aplicar idioma
  if (settings.language) {
    localStorage.setItem('language', settings.language);
    // Disparar evento para actualizar el idioma en toda la app
    window.dispatchEvent(new CustomEvent('languageChanged', { detail: settings.language }));
  }

  // Guardar configuraciones
  localStorage.setItem('notifications', settings.notifications);
  localStorage.setItem('doubleFactor', settings.doubleFactor);
  localStorage.setItem('game_difficulty', settings.game_difficulty);
}

// Funci√≥n para obtener configuraci√≥n guardada
export function getSetting(key: string): string | null {
  return localStorage.getItem(key);
}

// Funci√≥n para guardar configuraci√≥n
export function setSetting(key: string, value: string): void {
  localStorage.setItem(key, value);
}

export function isAuthenticated(): boolean {
  const token = getToken();
  if (!token) return false;
  
  const payload = parseJwt(token);
  const now = Math.floor(Date.now() / 1000);
  return payload?.exp && payload.exp > now;
}

export function getCurrentUser(): User | null {
  const token = getToken();
  if (!token) return null;
  
  const payload = parseJwt(token);
  if (!payload?.user_id) return null;
  
  return {
    id: payload.user_id,
    username: payload.username || 'Usuario',
    email: payload.email || 'desconocido@example.com'
  };
}

// Funci√≥n para hacer login y aplicar configuraciones
export async function loginUser(token: string): Promise<void> {
  localStorage.setItem('jwt', token);
  console.log(':candado: Sesi√≥n iniciada');
  
  // Aplicar configuraciones del usuario
  await applyUserSettings();
}

export function logout(): void {
  localStorage.removeItem('jwt');
  
  // Limpiar configuraciones
  localStorage.removeItem('language');
  localStorage.removeItem('notifications');
  localStorage.removeItem('doubleFactor');
  localStorage.removeItem('game_difficulty');
  
  console.log(':candado: Sesi√≥n cerrada');
  window.location.href = '/login';
}[1;30m----------------------------------------[0m

[1;34m=== ./src/types.d.ts ===[0m
// src/types.d.ts
declare global {
  interface Window {
    google: {
      accounts: {
        id: {
          initialize: (config: { client_id: string }) => void;
          prompt: () => void;
          renderButton: (parent: HTMLElement, options: object) => void;
        };
      };
    };
  }
}

export {};[1;30m----------------------------------------[0m

[1;34m=== ./src/styles/gameLobby.css ===[0m
/* Game Lobby Styles */
.game-lobby {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-color: #1a1a1a;
    color: white;
    font-family: Arial, sans-serif;
}

.lobby-header {
    text-align: center;
    margin-bottom: 2rem;
}

.lobby-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: #4caf50;
}

.game-id {
    font-size: 1.2rem;
    color: #ccc;
    margin-bottom: 0.5rem;
}

.player-info {
    font-size: 1rem;
    color: #aaa;
}

.game-canvas {
    border: 2px solid #4caf50;
    background-color: #000;
    margin: 2rem 0;
}

.lobby-status {
    text-align: center;
    margin: 1rem 0;
}

.status-message {
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.waiting {
    color: #ffa500;
}

.countdown {
    color: #ff4444;
    font-weight: bold;
}

.ready {
    color: #4caf50;
}

.error {
    color: #ff4444;
}

.lobby-controls {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}

.lobby-button {
    padding: 0.8rem 1.5rem;
    font-size: 1.1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.lobby-button.primary {
    background-color: #4caf50;
    color: white;
}

.lobby-button.primary:hover {
    background-color: #45a049;
}

.lobby-button.secondary {
    background-color: #666;
    color: white;
}

.lobby-button.secondary:hover {
    background-color: #777;
}

.connection-status {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.5rem 1rem;
    border-radius: 3px;
    font-size: 0.9rem;
}

.connection-status.connected {
    background-color: #4caf50;
    color: white;
}

.connection-status.disconnected {
    background-color: #ff4444;
    color: white;
}

.connection-status.connecting {
    background-color: #ffa500;
    color: white;
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/components/UnifiedGameRenderer.ts ===[0m
/**
 * Unified Game Renderer - Handles all game modes (Local, Online, AI)
 * This is the single rendering system for all Pong game variations
 */

import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import { PlayerDisplay, PlayerInfo } from './playerDisplay';

export interface UnifiedGameState {
    ball: {
        x: number;
        y: number;
        vx: number;
        vy: number;
        radius: number;
    };
    paddles: {
        left: { x: number; y: number; width: number; height: number };
        right: { x: number; y: number; width: number; height: number };
    };
    score: { left: number; right: number };
    gameRunning: boolean;
    canvas: { width: number; height: number };
    maxScore: number;
    rallieCount?: number;
}

export interface GameCallbacks {
    onScoreUpdate?: (score: { left: number; right: number }) => void;
    onGameEnd?: (winner: string, score: { left: number; right: number }) => void;
    onStatusUpdate?: (status: string) => void;
    onGameStateUpdate?: (state: UnifiedGameState) => void;
}

export type GameMode = 'local' | 'online' | 'ai';

export class UnifiedGameRenderer {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private gameState: UnifiedGameState = {} as UnifiedGameState;
    private gameMode: GameMode;
    private animationId: number | null = null;
    
    // Player information
    private player1Info: PlayerInfo | null = null;
    private player2Info: PlayerInfo | null = null;
    
    // Game callbacks
    private callbacks: GameCallbacks = {};
    
    // Input handling
    private keys: { [key: string]: boolean } = {};
    private gameStartTime: Date | null = null;
    
    // Online game properties
    private gameId?: string;
    private websocket?: WebSocket;
    private playerNumber?: number;
    private playerId?: string;
    
    // AI properties
    private aiDifficulty: 'easy' | 'medium' | 'hard' = 'medium';
    private aiSpeed: number = 3;

    // Allow external (lobby) setup of WebSocket for online mode
    public setWebSocketConnection(ws: WebSocket, gameId: string) {
        this.websocket = ws;
        this.gameId = gameId;
    }
    
    constructor(canvas: HTMLCanvasElement, mode: GameMode) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d')!;
        this.gameMode = mode;
        
        // Set standard canvas dimensions
        this.canvas.width = 800;
        this.canvas.height = 600;
        
        this.initializeGameState();
        this.setupEventListeners();
        this.drawInitialState();
    }
    
    private initializeGameState(): void {
        this.gameState = {
            ball: {
                x: this.canvas.width / 2,
                y: this.canvas.height / 2,
                vx: 4, // Velocidad inicial m√°s controlada
                vy: 2, // Velocidad inicial m√°s controlada
                radius: 8 // Radio ligeramente m√°s peque√±o para mejor precisi√≥n
            },
            paddles: {
                left: {
                    x: 30,
                    y: (this.canvas.height - 100) / 2,
                    width: 15, // Palas m√°s delgadas como el original
                    height: 100
                },
                right: {
                    x: this.canvas.width - 45, // Ajustado para la nueva anchura
                    y: (this.canvas.height - 100) / 2,
                    width: 15, // Palas m√°s delgadas como el original
                    height: 100
                }
            },
            score: { left: 0, right: 0 },
            gameRunning: false,
            canvas: { width: this.canvas.width, height: this.canvas.height },
            maxScore: 5,
            rallieCount: 0
        };
    }
    
    private setupEventListeners(): void {
        console.log("[UnifiedGameRenderer] setupEventListeners called, mode:", this.gameMode);
        if (this.gameMode === 'local' || this.gameMode === 'ai' || this.gameMode === 'online') {
            document.addEventListener('keydown', this.handleKeyDown.bind(this));
            document.addEventListener('keyup', this.handleKeyUp.bind(this));
        }
    }
    
    private handleKeyDown(e: KeyboardEvent): void {
        console.log("[UnifiedGameRenderer] handleKeyDown", e.key, "mode:", this.gameMode);
        this.keys[e.key] = true;
        // Send only 'up'/'down' (classic backend protocol)
        if (this.gameMode === 'online' && this.websocket && this.gameId) {
            if (e.key === 'w' || e.key === 'W' || e.key === 'ArrowUp') {
                this.sendPlayerMove('up');
            } else if (e.key === 's' || e.key === 'S' || e.key === 'ArrowDown') {
                this.sendPlayerMove('down');
            }
        }
    }

    private handleKeyUp(e: KeyboardEvent): void {
        this.keys[e.key] = false;
        // Do NOT send anything on keyup for classic server
    }

    /**
     * For classic backend: send only up/down as soon as pressed. Never send 'stop'.
     */
    private sendPlayerMove(direction: 'up' | 'down'): void {
        if (!this.websocket) return;
        const msg = {
            type: 'playerMove',
            data: { direction }
        };
        console.log('[WebSocket] Sending playerMove:', msg);
        this.websocket.send(JSON.stringify(msg));
    }
    
    public setPlayerInfo(player1: PlayerInfo, player2: PlayerInfo): void {
        this.player1Info = player1;
        this.player2Info = player2;
    }
    
    public setCallbacks(callbacks: GameCallbacks): void {
        this.callbacks = callbacks;
    }
    
    public setAIDifficulty(difficulty: 'easy' | 'medium' | 'hard'): void {
        this.aiDifficulty = difficulty;
        this.aiSpeed = difficulty === 'easy' ? 2 : difficulty === 'medium' ? 3 : 4;
    }
    
    /**
     * Connect to online game. Save both playerNumber and playerId assigned by backend.
     */
    public connectToOnlineGame(gameId: string, playerNumber: number): Promise<boolean> {
        return new Promise((resolve, reject) => {
            if (this.gameMode !== 'online') {
                reject(new Error('Not in online mode'));
                return;
            }

            // Prompt for LAN host/IP
            let serverHost = window.prompt('Introduce la IP o hostname del host (LAN):', window.location.hostname);
            if (!serverHost) serverHost = window.location.hostname;
            
            this.gameId = gameId;
            this.playerNumber = playerNumber;
            
            // Connect to WebSocket
            const currentUser = getCurrentUser();
            const username = currentUser?.username || 'Usuario';
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${serverHost}:8002/pong/${gameId}?username=${encodeURIComponent(username)}`;
            this.websocket = new WebSocket(wsUrl);
            
            this.websocket.onopen = () => {
                console.log(`üîó Connected to game ${gameId} at ${wsUrl}`);
                resolve(true);
            };
            
            this.websocket.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    // On gameJoined/gameCreated, record playerId
                    if (message.type === 'gameJoined' && message.data) {
                        this.playerId = message.data.playerId;
                    }
                    if (message.type === 'gameCreated' && message.data) {
                        this.playerId = message.data.playerId;
                    }
                    this.handleWebSocketMessage(message);
                } catch (error) {
                    console.error('Error parsing WebSocket message:', error);
                }
            };
            
            this.websocket.onerror = (error) => {
                console.error('WebSocket error:', error);
                reject(error);
            };
            
            this.websocket.onclose = () => {
                console.log('üîå WebSocket connection closed');
                this.callbacks.onStatusUpdate?.('üîå Conexi√≥n perdida');
            };
        });
    }
    
    public handleWebSocketMessage(message: any): void {
        const { type, data } = message;
        console.log('[WebSocket] Message received:', message); // Log everything
        switch (type) {
            case 'gameState':
                if (data.gameState) {
                    this.updateGameState(data.gameState);
                }
                break;
            case 'gameStarted':
                this.startGame();
                break;
            case 'gameEnded':
                this.endGame(data.winner, data.score);
                break;
            case 'playerJoined':
                this.callbacks.onStatusUpdate?.(`üéÆ ${data.playerName} se ha unido al juego`);
                break;
            case 'playerLeft':
                this.callbacks.onStatusUpdate?.(`üëã Un jugador ha abandonado el juego`);
                break;
            case 'error':
                this.callbacks.onStatusUpdate?.(`‚ùå Error: ${data.message}`);
                break;
            default:
                console.warn('[WebSocket] Unknown message type:', type, message);
        }
    }
    
    public startGame(): void {
        if (!this.gameStartTime) {
            this.gameStartTime = new Date();
        }
        
        this.gameState.gameRunning = true;
        this.callbacks.onStatusUpdate?.('üéÆ ¬°Juego iniciado!');
        
        // Draw the initial game state
        this.draw();
        
        // Start game loop based on mode
        if (this.gameMode === 'local' || this.gameMode === 'ai') {
            this.gameLoop();
        }
        // For online mode, the server handles the game loop and sends us state updates
    }
    
    public pauseGame(): void {
        this.gameState.gameRunning = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        this.callbacks.onStatusUpdate?.('‚è∏Ô∏è Juego pausado');
    }
    
    public resetGame(): void {
        this.pauseGame();
        this.initializeGameState();
        this.gameStartTime = null;
        this.draw();
        this.callbacks.onScoreUpdate?.(this.gameState.score);
        this.callbacks.onStatusUpdate?.('üîÑ Preparando la partida...');
    }
    
    public updateGameState(newState: Partial<UnifiedGameState>): void {
        // Update game state (used for online mode)
        if (newState.ball) this.gameState.ball = newState.ball;
        if (newState.paddles) this.gameState.paddles = newState.paddles;
        if (newState.score) {
            this.gameState.score = newState.score;
            this.callbacks.onScoreUpdate?.(this.gameState.score);
        }
        if (newState.gameRunning !== undefined) this.gameState.gameRunning = newState.gameRunning;
        
        this.draw();
        this.callbacks.onGameStateUpdate?.(this.gameState);
    }
    
    private gameLoop(): void {
        if (!this.gameState.gameRunning) return;
        
        this.updatePaddles();
        this.updateBall();
        this.draw();
        
        this.animationId = requestAnimationFrame(() => this.gameLoop());
    }
    
    private updatePaddles(): void {
        const speed = 6;
        
        // Left paddle (Player 1)
        if ((this.keys['w'] || this.keys['W']) && this.gameState.paddles.left.y > 0) {
            this.gameState.paddles.left.y -= speed;
        }
        if ((this.keys['s'] || this.keys['S']) && 
            this.gameState.paddles.left.y < this.canvas.height - this.gameState.paddles.left.height) {
            this.gameState.paddles.left.y += speed;
        }
        
        // Right paddle
        if (this.gameMode === 'local') {
            // Player 2 controls, now 'o' (up) and 'l' (down)
            if ((this.keys['o'] || this.keys['O']) && this.gameState.paddles.right.y > 0) {
                this.gameState.paddles.right.y -= speed;
            }
            if ((this.keys['l'] || this.keys['L']) && 
                this.gameState.paddles.right.y < this.canvas.height - this.gameState.paddles.right.height) {
                this.gameState.paddles.right.y += speed;
            }
        } else if (this.gameMode === 'ai') {
            // AI control
            this.updateAI();
        }
    }
    
    private updateAI(): void {
        const aiPaddle = this.gameState.paddles.right;
        const ball = this.gameState.ball;
        const paddleCenter = aiPaddle.y + aiPaddle.height / 2;
        const ballCenter = ball.y;
        
        // AI movement based on difficulty
        const difference = ballCenter - paddleCenter;
        const threshold = this.aiDifficulty === 'easy' ? 50 : this.aiDifficulty === 'medium' ? 30 : 10;
        
        if (Math.abs(difference) > threshold) {
            if (difference > 0 && aiPaddle.y < this.canvas.height - aiPaddle.height) {
                aiPaddle.y += this.aiSpeed;
            } else if (difference < 0 && aiPaddle.y > 0) {
                aiPaddle.y -= this.aiSpeed;
            }
        }
    }
    
    private updateBall(): void {
        this.gameState.ball.x += this.gameState.ball.vx;
        this.gameState.ball.y += this.gameState.ball.vy;
        
        // Rebotes en paredes superior e inferior (f√≠sica original del Pong)
        if (this.gameState.ball.y <= this.gameState.ball.radius) {
            this.gameState.ball.y = this.gameState.ball.radius;
            this.gameState.ball.vy = Math.abs(this.gameState.ball.vy); // Asegurar rebote hacia abajo
        } else if (this.gameState.ball.y >= this.canvas.height - this.gameState.ball.radius) {
            this.gameState.ball.y = this.canvas.height - this.gameState.ball.radius;
            this.gameState.ball.vy = -Math.abs(this.gameState.ball.vy); // Asegurar rebote hacia arriba
        }
        
        // Paddle collisions
        const leftPaddle = this.gameState.paddles.left;
        const rightPaddle = this.gameState.paddles.right;
        
        // Colisi√≥n con pala izquierda (mejorada)
        if (this.gameState.ball.vx < 0 && // Solo si se mueve hacia la izquierda
            this.gameState.ball.x - this.gameState.ball.radius <= leftPaddle.x + leftPaddle.width &&
            this.gameState.ball.x - this.gameState.ball.radius >= leftPaddle.x &&
            this.gameState.ball.y >= leftPaddle.y - this.gameState.ball.radius &&
            this.gameState.ball.y <= leftPaddle.y + leftPaddle.height + this.gameState.ball.radius) {
            
            this.handlePaddleCollision(leftPaddle, 'left');
        }
        
        // Colisi√≥n con pala derecha (mejorada)
        if (this.gameState.ball.vx > 0 && // Solo si se mueve hacia la derecha
            this.gameState.ball.x + this.gameState.ball.radius >= rightPaddle.x &&
            this.gameState.ball.x + this.gameState.ball.radius <= rightPaddle.x + rightPaddle.width &&
            this.gameState.ball.y >= rightPaddle.y - this.gameState.ball.radius &&
            this.gameState.ball.y <= rightPaddle.y + rightPaddle.height + this.gameState.ball.radius) {
            
            this.handlePaddleCollision(rightPaddle, 'right');
        }
        
        // Scoring
        if (this.gameState.ball.x < 0) {
            this.gameState.score.right++;
            this.resetBall();
            this.callbacks.onScoreUpdate?.(this.gameState.score);
            this.checkGameEnd();
        } else if (this.gameState.ball.x > this.canvas.width) {
            this.gameState.score.left++;
            this.resetBall();
            this.callbacks.onScoreUpdate?.(this.gameState.score);
            this.checkGameEnd();
        }
    }
    
    private resetBall(): void {
        this.gameState.ball.x = this.canvas.width / 2;
        this.gameState.ball.y = this.canvas.height / 2;
        this.gameState.ball.vx = Math.random() > 0.5 ? 5 : -5;
        this.gameState.ball.vy = (Math.random() - 0.5) * 6;
        this.gameState.rallieCount = 0;
    }
    
    private checkGameEnd(): void {
        if (this.gameState.score.left >= this.gameState.maxScore || 
            this.gameState.score.right >= this.gameState.maxScore) {
            
            const winner = this.gameState.score.left >= this.gameState.maxScore ? 
                (this.player1Info?.displayName || 'Jugador 1') : 
                (this.player2Info?.displayName || 'Jugador 2');
            
            this.endGame(winner, this.gameState.score);
        }
    }
    
    private endGame(winner: string, score: { left: number; right: number }): void {
        this.gameState.gameRunning = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        
        this.callbacks.onGameEnd?.(winner, score);
    }

    public draw(): void {
        // Clear canvas
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Draw center line
        this.ctx.strokeStyle = '#FFFFFF';
        this.ctx.setLineDash([10, 10]);
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width / 2, 0);
        this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);
        this.ctx.stroke();
        this.ctx.setLineDash([]);
        
        // Draw paddles
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.fillRect(
            this.gameState.paddles.left.x,
            this.gameState.paddles.left.y,
            this.gameState.paddles.left.width,
            this.gameState.paddles.left.height
        );
        
        this.ctx.fillRect(
            this.gameState.paddles.right.x,
            this.gameState.paddles.right.y,
            this.gameState.paddles.right.width,
            this.gameState.paddles.right.height
        );
        
        // Draw ball
        this.ctx.beginPath();
        this.ctx.arc(
            this.gameState.ball.x,
            this.gameState.ball.y,
            this.gameState.ball.radius,
            0,
            2 * Math.PI
        );
        this.ctx.fill();
    }
    
    private drawInitialState(): void {
        this.draw();
        
        // Draw waiting message
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        this.ctx.font = 'bold 24px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('Preparando la partida...', this.canvas.width / 2, this.canvas.height / 2);
        
        this.ctx.font = '16px Arial';
        if (this.gameMode === 'local') {
            this.ctx.fillText('Jugador 1: W/S - Jugador 2: O/L', this.canvas.width / 2, this.canvas.height / 2 + 40);
        } else if (this.gameMode === 'ai') {
            this.ctx.fillText('Jugador: W/S - IA controlada autom√°ticamente', this.canvas.width / 2, this.canvas.height / 2 + 40);
        } else if (this.gameMode === 'online') {
            this.ctx.fillText('Conectando al juego online...', this.canvas.width / 2, this.canvas.height / 2 + 40);
        }
    }
    
    public getGameState(): UnifiedGameState {
        return { ...this.gameState };
    }
    
    public getGameStartTime(): Date | null {
        return this.gameStartTime;
    }
    

    /**
     * Maneja las colisiones con las palas de manera realista como el Pong original
     */
    private handlePaddleCollision(paddle: any, side: 'left' | 'right'): void {
        // Calcular el punto de contacto relativo en la pala (0 = arriba, 1 = abajo)
        const contactPoint = (this.gameState.ball.y - paddle.y) / paddle.height;
        const normalizedContact = Math.max(0, Math.min(1, contactPoint)); // Clamp entre 0 y 1
        
        // Calcular el √°ngulo de rebote basado en el punto de contacto
        // En el centro (0.5) = √°ngulo 0, en los extremos = √°ngulo m√°ximo
        const maxAngle = Math.PI / 3; // 60 grados m√°ximo
        const angle = (normalizedContact - 0.5) * maxAngle;
        
        // Calcular la velocidad actual de la pelota
        const currentSpeed = Math.sqrt(this.gameState.ball.vx * this.gameState.ball.vx + 
                                     this.gameState.ball.vy * this.gameState.ball.vy);
        
        // Incrementar ligeramente la velocidad con cada rebote (como en el Pong original)
        const speedIncrease = 1.05;
        const newSpeed = Math.min(currentSpeed * speedIncrease, 12); // L√≠mite m√°ximo de velocidad
        
        // Calcular nuevas velocidades basadas en el √°ngulo
        if (side === 'left') {
            this.gameState.ball.vx = newSpeed * Math.cos(angle);
            this.gameState.ball.vy = newSpeed * Math.sin(angle);
            // Asegurar que la pelota se mueva hacia la derecha
            this.gameState.ball.vx = Math.abs(this.gameState.ball.vx);
            // Posicionar la pelota justo fuera de la pala para evitar colisiones m√∫ltiples
            this.gameState.ball.x = paddle.x + paddle.width + this.gameState.ball.radius;
        } else {
            this.gameState.ball.vx = -newSpeed * Math.cos(angle);
            this.gameState.ball.vy = newSpeed * Math.sin(angle);
            // Asegurar que la pelota se mueva hacia la izquierda
            this.gameState.ball.vx = -Math.abs(this.gameState.ball.vx);
            // Posicionar la pelota justo fuera de la pala para evitar colisiones m√∫ltiples
            this.gameState.ball.x = paddle.x - this.gameState.ball.radius;
        }
        
        // Incrementar contador de rallies
        this.gameState.rallieCount = (this.gameState.rallieCount || 0) + 1;
    }

    /**
     * Inicia una cuenta atr√°s visual antes de comenzar el juego
     */
    public startCountdown(callback?: () => void): void {
        let countdown = 3;
        
        const countdownLoop = () => {
            if (countdown > 0) {
                this.drawCountdown(countdown);
                countdown--;
                setTimeout(countdownLoop, 1000);
            } else {
                this.drawCountdown(0); // Mostrar "¬°GO!"
                setTimeout(() => {
                    this.callbacks.onStatusUpdate?.('üéÆ ¬°Partida iniciada!');
                    this.startGame();
                    if (callback) callback();
                }, 800);
            }
        };
        
        this.callbacks.onStatusUpdate?.('‚è∞ Iniciando cuenta atr√°s...');
        countdownLoop();
    }
    
    /**
     * Dibuja la cuenta atr√°s en el canvas
     */
    private drawCountdown(count: number): void {
        // Limpiar canvas
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Dibujar el campo de juego base
        this.drawGameField();
        
        // Dibujar el n√∫mero de cuenta atr√°s o "GO"
        this.ctx.fillStyle = count > 0 ? '#FFD700' : '#00FF00'; // Amarillo para n√∫meros, verde para GO
        this.ctx.font = 'bold 120px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        
        const text = count > 0 ? count.toString() : '¬°GO!';
        this.ctx.fillText(text, this.canvas.width / 2, this.canvas.height / 2);
        
        // A√±adir un efecto de sombra
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
        this.ctx.fillText(text, this.canvas.width / 2 + 3, this.canvas.height / 2 + 3);
    }
    
    /**
     * Dibuja los elementos b√°sicos del campo (l√≠neas, palas)
     */
    private drawGameField(): void {
        // Dibujar l√≠nea central
        this.ctx.strokeStyle = '#FFFFFF';
        this.ctx.setLineDash([10, 10]);
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width / 2, 0);
        this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);
        this.ctx.stroke();
        this.ctx.setLineDash([]);
        
        // Dibujar palas
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.fillRect(
            this.gameState.paddles.left.x,
            this.gameState.paddles.left.y,
            this.gameState.paddles.left.width,
            this.gameState.paddles.left.height
        );
        
        this.ctx.fillRect(
            this.gameState.paddles.right.x,
            this.gameState.paddles.right.y,
            this.gameState.paddles.right.width,
            this.gameState.paddles.right.height
        );
    }

        public cleanup(): void {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        if (this.websocket) {
            this.websocket.close();
        }
        
        // Remove event listeners
        document.removeEventListener('keydown', this.handleKeyDown.bind(this));
        document.removeEventListener('keyup', this.handleKeyUp.bind(this));
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/components/gameRenderer.ts ===[0m
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import { PlayerDisplay, PlayerInfo } from '../components/playerDisplay';

export interface GameState {
    pelota: { x: number, y: number, vx: number, vy: number, radio: number };
    palas: {
        jugador1: { x: number, y: number },
        jugador2: { x: number, y: number }
    };
    puntuacion: { jugador1: number, jugador2: number };
    palaAncho: number;
    palaAlto: number;
    ancho: number;
    alto: number;
    enJuego: boolean;
    rallyCount?: number;
}

export class GameRenderer {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private gameMode: 'local' | 'online' | 'ai';
    private gameState: GameState;
    public player1Info: PlayerInfo | null = null;
    public player2Info: PlayerInfo | null = null;
    private animationId?: number;
    public gameStartTime?: Date;
    private maxScore = 8;
    private keys: { [key: string]: boolean } = {};
    private isGameRunning = false;
    
    constructor(canvas: HTMLCanvasElement, gameMode: 'local' | 'online' | 'ai') {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d')!;
        this.gameMode = gameMode;
        
        // Configurar dimensiones del canvas
        this.canvas.width = 800;
        this.canvas.height = 600;
        
        // Inicializar estado del juego
        this.gameState = {
            pelota: { x: 400, y: 300, vx: 5, vy: 3, radio: 10 },
            palas: {
                jugador1: { x: 50, y: 250 },
                jugador2: { x: 730, y: 250 }
            },
            puntuacion: { jugador1: 0, jugador2: 0 },
            palaAncho: 20,
            palaAlto: 100,
            ancho: 800,
            alto: 600,
            enJuego: false
        };
        
        this.setupEventListeners();
        this.drawInitialState();
    }
    
    private setupEventListeners(): void {
        if (this.gameMode === 'local') {
            document.addEventListener('keydown', this.handleKeyDown.bind(this));
            document.addEventListener('keyup', this.handleKeyUp.bind(this));
        }
    }
    
    private handleKeyDown(e: KeyboardEvent): void {
        this.keys[e.key] = true;
    }
    
    private handleKeyUp(e: KeyboardEvent): void {
        this.keys[e.key] = false;
    }
    
    public updateGameState(newState: Partial<GameState>): void {
        this.gameState = { ...this.gameState, ...newState };
        this.draw();
    }
    
    public draw(): void {
        // Limpiar canvas
        this.ctx.fillStyle = 'black';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Dibujar l√≠nea central
        this.ctx.strokeStyle = 'white';
        this.ctx.setLineDash([5, 5]);
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width / 2, 0);
        this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);
        this.ctx.stroke();
        
        // Dibujar palas
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(
            this.gameState.palas.jugador1.x,
            this.gameState.palas.jugador1.y,
            this.gameState.palaAncho,
            this.gameState.palaAlto
        );
        
        this.ctx.fillRect(
            this.gameState.palas.jugador2.x,
            this.gameState.palas.jugador2.y,
            this.gameState.palaAncho,
            this.gameState.palaAlto
        );
        
        // Dibujar pelota
        this.ctx.beginPath();
        this.ctx.arc(
            this.gameState.pelota.x,
            this.gameState.pelota.y,
            this.gameState.pelota.radio,
            0,
            2 * Math.PI
        );
        this.ctx.fill();
    }
    
    public drawInitialState(): void {
        this.ctx.fillStyle = 'black';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Dibujar l√≠nea central
        this.ctx.strokeStyle = 'white';
        this.ctx.setLineDash([5, 5]);
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width / 2, 0);
        this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);
        this.ctx.stroke();
        
        // Texto de espera
        this.ctx.fillStyle = 'white';
        this.ctx.font = '24px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('Esperando...', this.canvas.width / 2, this.canvas.height / 2);
    }
    
    public startLocalGame(): void {
        if (this.gameMode !== 'local') return;
        
        this.isGameRunning = true;
        this.gameStartTime = new Date();
        this.gameState.enJuego = true;
        this.gameLoop();
    }
    
    public pauseGame(): void {
        this.isGameRunning = false;
        this.gameState.enJuego = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }
    
    public resetGame(): void {
        this.pauseGame();
        this.gameState.puntuacion = { jugador1: 0, jugador2: 0 };
        this.gameState.pelota = { x: 400, y: 300, vx: 5, vy: 3, radio: 10 };
        this.gameState.palas = {
            jugador1: { x: 50, y: 250 },
            jugador2: { x: 730, y: 250 }
        };
        this.gameStartTime = undefined;
        this.draw();
        this.updateScore();
    }
    
    private gameLoop(): void {
        if (!this.isGameRunning || this.gameMode !== 'local') return;
        
        this.updatePaddles();
        this.updateBall();
        this.draw();
        this.updateScore();
        
        this.animationId = requestAnimationFrame(() => this.gameLoop());
    }
    
    private updatePaddles(): void {
        const speed = 8;
        
        // Jugador 1 (W/S)
        if (this.keys['w'] || this.keys['W']) {
            this.gameState.palas.jugador1.y = Math.max(0, this.gameState.palas.jugador1.y - speed);
        }
        if (this.keys['s'] || this.keys['S']) {
            this.gameState.palas.jugador1.y = Math.min(
                this.canvas.height - this.gameState.palaAlto,
                this.gameState.palas.jugador1.y + speed
            );
        }
        
        // Jugador 2 (Flechas)
        if (this.keys['ArrowUp']) {
            this.gameState.palas.jugador2.y = Math.max(0, this.gameState.palas.jugador2.y - speed);
        }
        if (this.keys['ArrowDown']) {
            this.gameState.palas.jugador2.y = Math.min(
                this.canvas.height - this.gameState.palaAlto,
                this.gameState.palas.jugador2.y + speed
            );
        }
    }
    
    private updateBall(): void {
        this.gameState.pelota.x += this.gameState.pelota.vx;
        this.gameState.pelota.y += this.gameState.pelota.vy;
        
        // Rebote en paredes superior e inferior
        if (this.gameState.pelota.y <= this.gameState.pelota.radio || 
            this.gameState.pelota.y >= this.canvas.height - this.gameState.pelota.radio) {
            this.gameState.pelota.vy *= -1;
        }
        
        // Colisi√≥n con palas
        if (this.checkCollision(this.gameState.palas.jugador1) && this.gameState.pelota.vx < 0) {
            this.gameState.pelota.vx *= -1;
        }
        
        if (this.checkCollision(this.gameState.palas.jugador2) && this.gameState.pelota.vx > 0) {
            this.gameState.pelota.vx *= -1;
        }
        
        // Puntuaci√≥n
        if (this.gameState.pelota.x < 0) {
            this.gameState.puntuacion.jugador2++;
            this.resetBall();
            this.checkGameEnd();
        } else if (this.gameState.pelota.x > this.canvas.width) {
            this.gameState.puntuacion.jugador1++;
            this.resetBall();
            this.checkGameEnd();
        }
    }
    
    private checkCollision(pala: { x: number, y: number }): boolean {
        return (
            this.gameState.pelota.x - this.gameState.pelota.radio < pala.x + this.gameState.palaAncho &&
            this.gameState.pelota.x + this.gameState.pelota.radio > pala.x &&
            this.gameState.pelota.y - this.gameState.pelota.radio < pala.y + this.gameState.palaAlto &&
            this.gameState.pelota.y + this.gameState.pelota.radio > pala.y
        );
    }
    
    private resetBall(): void {
        this.gameState.pelota.x = this.canvas.width / 2;
        this.gameState.pelota.y = this.canvas.height / 2;
        this.gameState.pelota.vx = Math.random() > 0.5 ? 5 : -5;
        this.gameState.pelota.vy = (Math.random() - 0.5) * 6;
    }
    
    private checkGameEnd(): void {
        if (this.gameState.puntuacion.jugador1 >= this.maxScore || 
            this.gameState.puntuacion.jugador2 >= this.maxScore) {
            this.pauseGame();
            this.showGameResult();
        }
    }
    
    private showGameResult(): void {
        const winner = this.gameState.puntuacion.jugador1 > this.gameState.puntuacion.jugador2 ? 
            this.player1Info?.displayName || 'Jugador 1' : 
            this.player2Info?.displayName || 'Jugador 2';
        
        const isPlayer1Winner = this.gameState.puntuacion.jugador1 > this.gameState.puntuacion.jugador2;
        
        // Crear evento personalizado para mostrar el resultado
        const event = new CustomEvent('gameEnd', {
            detail: {
                winner,
                isPlayer1Winner,
                score: this.gameState.puntuacion,
                gameData: this.gameState
            }
        });
        
        document.dispatchEvent(event);
    }
    
    public updateScore(): void {
        const score1Element = document.getElementById('score1');
        const score2Element = document.getElementById('score2');
        
        if (score1Element) {
            score1Element.textContent = this.gameState.puntuacion.jugador1.toString();
        }
        if (score2Element) {
            score2Element.textContent = this.gameState.puntuacion.jugador2.toString();
        }
    }
    
    public setPlayerInfo(player1: PlayerInfo, player2: PlayerInfo): void {
        this.player1Info = player1;
        this.player2Info = player2;
    }
    
    public cleanup(): void {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        document.removeEventListener('keydown', this.handleKeyDown.bind(this));
        document.removeEventListener('keyup', this.handleKeyUp.bind(this));
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/components/navbar.ts ===[0m
// src/components/navbar.ts

import { navigateTo } from '../router';
import { getTranslation, setLanguage, getCurrentLanguage } from '../i18n';
import { logout } from '../auth';

export function renderNavbar(currentPath: string): void {
    const navbarHtml = `
        <header class="w-full p-6 bg-[#000814] border-b border-[#003566] shadow-xl flex justify-between items-center fixed top-0 z-20 transition-all duration-300 ease-in-out">
            <h1 class="text-2xl sm:text-3xl font-display font-extrabold text-[#ffc300] drop-shadow-md tracking-tight">PONG</h1>

            <nav class="hidden md:flex items-center space-x-8">
                <ul class="flex space-x-8">
                    <li>
                        <a class="${currentPath === '/home' || currentPath === '/' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}" href="/home">${getTranslation('navbar', 'home')}</a>
                    </li>
                    <li>
                        <a href="/profile" class="${currentPath === '/profile' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'profile')}</a>
                    </li>
                    <li>
                        <a href="/play" class="${currentPath === '/play' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'play')}</a>
                    </li>
                    <li>
                        <a href="/ranking" class="${currentPath === '/ranking' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'ranking')}</a>
                    </li>
                    <li>
                        <a href="/tournaments" class="${currentPath === '/tournaments' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'tournaments')}</a>
                    </li>
                    <li>
                        <a href="/chat" class="${currentPath === '/chat' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'chat')}</a>
                    </li>
                    <li>
                        <a href="/friends" class="${currentPath === '/friends' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'friends')}</a>
                    </li>
                    <li>
                        <a href="/settings" class="${currentPath === '/settings' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'settings')}</a>
                    </li>
                    <li>
                        <button id="logout-btn-desktop" class="text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200 bg-transparent border-none cursor-pointer">${getTranslation('navbar', 'logout')}</button>
                    </li>
                </ul>
                <div class="relative z-50">
                    <button
                        type="button"
                        id="language-dropdown-button-desktop"
                        class="inline-flex justify-center items-center gap-x-1.5 rounded-full bg-[#001d3d] px-4 py-2 text-sm font-semibold text-gray-100 shadow-sm ring-1 ring-inset ring-[#003566] hover:bg-[#003566] transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-[#ffc300]"
                        aria-expanded="false"
                        aria-haspopup="true"
                    >
                        <span id="current-language-name-desktop">${getTranslation('common', 'language')}</span>
                        <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                        </svg>
                    </button>

                    <div
                        id="language-dropdown-menu-desktop"
                        class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-[#001d3d] shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
                        role="menu"
                        aria-orientation="vertical"
                        aria-labelledby="language-dropdown-button-desktop"
                        tabindex="-1"
                    >
                        <div class="py-1" role="none">
                            <a href="#" class="flex items-center gap-x-3 px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" role="menuitem" tabindex="-1" data-lang="es">
                                ${getTranslation('common', 'castellano')}
                            </a>
                            <a href="#" class="flex items-center gap-x-3 px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" role="menuitem" tabindex="-1" data-lang="en">
                                ${getTranslation('common', 'english')}
                            </a>
                            <a href="#" class="flex items-center gap-x-3 px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" role="menuitem" tabindex="-1" data-lang="gl">
                                ${getTranslation('common', 'galician')}
                            </a>
                            <a href="#" class="flex items-center gap-x-3 px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" role="menuitem" tabindex="-1" data-lang="zh">
                                ${getTranslation('common', 'chinese')}
                            </a>
                        </div>
                    </div>
                </div>
            </nav>

            <div class="md:hidden flex items-center">
                <input type="checkbox" id="menu-toggle" class="peer hidden" />
                <label for="menu-toggle" class="block cursor-pointer text-[#ffc300] hover:text-[#ffd60a] focus:outline-none">
                    <svg class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                    </svg>
                </label>

                <div class="fixed top-[80px] left-0 w-full bg-[#000814] border-b border-[#003566] shadow-xl z-10
                            max-h-0 overflow-hidden transition-all duration-300 ease-in-out
                            peer-checked:max-h-screen">
                    <ul class="flex flex-col items-center py-4 space-y-4">
                        <li>
                            <a class="${currentPath === '/home' || currentPath === '/' ? 'block text-[#ffc300] font-bold text-xl transition-colors duration-200 border-b-2 border-[#ffc300] px-4 py-2 hover:text-[#ffd60a]' : 'block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2'}" href="/home">${getTranslation('navbar', 'home')}</a>
                        </li>
                        <li>
                            <a href="/profile" class="${currentPath === '/profile' ? 'block text-[#ffc300] font-bold text-xl transition-colors duration-200 border-b-2 border-[#ffc300] px-4 py-2 hover:text-[#ffd60a]' : 'block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2'}">${getTranslation('navbar', 'profile')}</a>
                        </li>
                        <li>
                            <a href="/play" class="${currentPath === '/play' ? 'block text-[#ffc300] font-bold text-xl transition-colors duration-200 border-b-2 border-[#ffc300] px-4 py-2 hover:text-[#ffd60a]' : 'block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2'}">${getTranslation('navbar', 'play')}</a>
                        </li>
                        <li>
                            <a href="/ranking" class="${currentPath === '/ranking' ? 'block text-[#ffc300] font-bold text-xl transition-colors duration-200 border-b-2 border-[#ffc300] px-4 py-2 hover:text-[#ffd60a]' : 'block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2'}">${getTranslation('navbar', 'ranking')}</a>
                            </li>
                        <li>
                            <a href="/tournaments" class="${currentPath === '/tournaments' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'tournaments')}</a>
                        </li>
                        <li>
                            <a href="/chat" class="${currentPath === '/chat' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'chat')}</a>
                        </li>
                        <li>
                            <a href="/friends" class="${currentPath === '/friends' ? 'text-[#ffc300] font-bold text-lg transition-colors duration-200 border-b-2 border-[#ffc300] pb-1 hover:text-[#ffd60a]' : 'text-gray-200 hover:text-[#ffc300] font-medium text-lg transition-colors duration-200'}">${getTranslation('navbar', 'friends')}</a>
                        </li>
                        <li>
                            <a href="/settings" class="${currentPath === '/settings' ? 'block text-[#ffc300] font-bold text-xl transition-colors duration-200 border-b-2 border-[#ffc300] px-4 py-2 hover:text-[#ffd60a]' : 'block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2'}">${getTranslation('navbar', 'settings')}</a>
                        </li>
                        <li>
                            <button id="logout-btn-mobile" class="block text-gray-200 hover:text-[#ffc300] font-medium text-xl transition-colors duration-200 px-4 py-2 bg-transparent border-none cursor-pointer w-full text-center">${getTranslation('navbar', 'logout')}</button>
                        </li>
                        <li class="mt-4 pt-4 border-t border-[#003566] w-full text-center">
                            <div class="inline-block">
                                <button
                                    type="button"
                                    id="language-accordion-button-mobile"
                                    class="inline-flex justify-center items-center gap-x-1.5 rounded-full bg-[#001d3d] px-4 py-2 text-sm font-semibold text-gray-100 shadow-sm ring-1 ring-inset ring-[#003566] hover:bg-[#003566] transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-[#ffc300]"
                                >
                                    <span id="current-language-name-mobile-inner">${getTranslation('common', 'language')}</span>
                                    <svg id="language-accordion-arrow-mobile" class="-mr-1 h-5 w-5 text-gray-400 transform transition-transform duration-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                            <div
                                id="language-accordion-content-mobile"
                                class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out mt-2 w-full"
                            >
                                <ul class="py-1 text-center space-y-2">
                                    <li><a href="#" class="block px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" data-lang="es">${getTranslation('common', 'castellano')}</a></li>
                                    <li><a href="#" class="block px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" data-lang="en">${getTranslation('common', 'english')}</a></li>
                                    <li><a href="#" class="block px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" data-lang="gl">${getTranslation('common', 'galician')}</a></li>
                                    <li><a href="#" class="block px-4 py-2 text-sm text-gray-100 hover:bg-[#003566]" data-lang="zh">${getTranslation('common', 'chinese')}</a></li>
                                </ul>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </header>
    `;

    const navbarContainer = document.getElementById('navbar-container');
    if (navbarContainer) {
        navbarContainer.innerHTML = navbarHtml;

        // Function to update the language dropdown button's UI
        const updateLanguageButtonUI = (nameSpanId: string) => {
            const nameSpan = document.getElementById(nameSpanId);
            const currentLang = getCurrentLanguage();

            let languageDisplayName = '';
            switch (currentLang) {
                case 'es':
                    languageDisplayName = getTranslation('common', 'castellano');
                    break;
                case 'en':
                    languageDisplayName = getTranslation('common', 'english');
                    break;
                case 'gl':
                    languageDisplayName = getTranslation('common', 'galician');
                    break;
                case 'zh':
                    languageDisplayName = getTranslation('common', 'chinese');
                    break;
                default:
                    languageDisplayName = getTranslation('common', 'language'); // Fallback
            }

            if (nameSpan) {
                nameSpan.textContent = languageDisplayName;
            }
        };

        // Initialize desktop button UI
        updateLanguageButtonUI('current-language-name-desktop');
        // Initialize mobile inner button UI
        updateLanguageButtonUI('current-language-name-mobile-inner');


        // Desktop Language Dropdown Logic
        const languageDropdownButtonDesktop = document.getElementById('language-dropdown-button-desktop');
        const languageDropdownMenuDesktop = document.getElementById('language-dropdown-menu-desktop');

        if (languageDropdownButtonDesktop && languageDropdownMenuDesktop) {
            languageDropdownButtonDesktop.addEventListener('click', (event) => {
                event.stopPropagation();
                languageDropdownMenuDesktop.classList.toggle('hidden');
                languageDropdownButtonDesktop.setAttribute('aria-expanded', languageDropdownMenuDesktop.classList.contains('hidden') ? 'false' : 'true');
            });

            languageDropdownMenuDesktop.querySelectorAll('a').forEach(item => {
                item.addEventListener('click', (event) => {
                    event.preventDefault();
                    const langId = item.dataset.lang;
                    if (langId) {
                        setLanguage(langId);
                        languageDropdownMenuDesktop.classList.add('hidden');
                        languageDropdownButtonDesktop.setAttribute('aria-expanded', 'false');
                    }
                });
            });
        }

        // Mobile Language Accordion Logic
        const languageAccordionButtonMobile = document.getElementById('language-accordion-button-mobile');
        const languageAccordionContentMobile = document.getElementById('language-accordion-content-mobile');
        const languageAccordionArrowMobile = document.getElementById('language-accordion-arrow-mobile');

        if (languageAccordionButtonMobile && languageAccordionContentMobile && languageAccordionArrowMobile) {
            languageAccordionButtonMobile.addEventListener('click', (event) => {
                event.stopPropagation();
                languageAccordionContentMobile.classList.toggle('max-h-0');
                languageAccordionContentMobile.classList.toggle('max-h-screen'); // Para que se expanda
                languageAccordionArrowMobile.classList.toggle('rotate-180'); // Gira la flecha
            });

            languageAccordionContentMobile.querySelectorAll('a').forEach(item => {
                item.addEventListener('click', (event) => {
                    event.preventDefault();
                    const langId = item.dataset.lang;
                    if (langId) {
                        setLanguage(langId);
                        // Cierra el acorde√≥n de idioma
                        languageAccordionContentMobile.classList.add('max-h-0');
                        languageAccordionContentMobile.classList.remove('max-h-screen');
                        languageAccordionArrowMobile.classList.remove('rotate-180');
                        // Cierra el men√∫ m√≥vil principal (si est√° abierto)
                        const menuToggle = document.getElementById('menu-toggle') as HTMLInputElement;
                        if (menuToggle) menuToggle.checked = false;
                    }
                });
            });
        }

        // Common click-outside listener for desktop dropdown only (mobile accordion doesn't need it)
        document.addEventListener('click', (event) => {
            if (languageDropdownMenuDesktop && languageDropdownButtonDesktop && !languageDropdownButtonDesktop.contains(event.target as Node) && !languageDropdownMenuDesktop.contains(event.target as Node)) {
                languageDropdownMenuDesktop.classList.add('hidden');
                languageDropdownButtonDesktop.setAttribute('aria-expanded', 'false');
            }
        });

        // Mobile menu toggle logic
        const menuToggle = document.getElementById('menu-toggle') as HTMLInputElement;
        const mobileMenuDropdown = document.querySelector('header .md\\:hidden .peer:checked~div');

        if (menuToggle && mobileMenuDropdown) {
            mobileMenuDropdown.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', (event) => {
                    // Cierra el men√∫ principal al hacer clic en un enlace de navegaci√≥n
                    menuToggle.checked = false;
                });
            });
        }

        // Logout button event listeners
        const logoutBtnDesktop = document.getElementById('logout-btn-desktop');
        const logoutBtnMobile = document.getElementById('logout-btn-mobile');

        if (logoutBtnDesktop) {
            logoutBtnDesktop.addEventListener('click', (event) => {
                event.preventDefault();
                logout();
            });
        }

        if (logoutBtnMobile) {
            logoutBtnMobile.addEventListener('click', (event) => {
                event.preventDefault();
                // Close mobile menu first
                if (menuToggle) menuToggle.checked = false;
                logout();
            });
        }
    } else {
        console.error('Navbar container element not found.');
    }
}

document.addEventListener('languageChanged', () => {
  const currentPath = window.location.pathname;
  renderNavbar(currentPath);
  navigateTo(currentPath);
});[1;30m----------------------------------------[0m

[1;34m=== ./src/components/playerDisplay.ts ===[0m
// Componente reutilizable para mostrar informaci√≥n de jugadores
export interface PlayerInfo {
  numero: number;
  username: string;
  displayName: string;
  esIA?: boolean;
  isCurrentUser?: boolean;
  controls?: string;
}

export class PlayerDisplay {
  
  /**
   * Genera las tarjetas de informaci√≥n de jugadores
   */
  static generatePlayerCards(
    player1: PlayerInfo, 
    player2: PlayerInfo, 
    gameMode: 'online' | 'local' = 'online'
  ): string {
    const player1Card = this.generatePlayerCard(player1, 1, gameMode);
    const player2Card = this.generatePlayerCard(player2, 2, gameMode);
    
    return `
      <div class="grid grid-cols-2 gap-4 mb-4">
        ${player1Card}
        ${player2Card}
      </div>
    `;
  }

  /**
   * Genera una tarjeta individual para un jugador
   */
  private static generatePlayerCard(player: PlayerInfo, position: 1 | 2, gameMode: 'online' | 'local'): string {
    const isPlayer1 = position === 1;
    const baseColor = isPlayer1 ? 'yellow' : 'blue';
    const bgColor = isPlayer1 ? 'bg-yellow-600' : 'bg-blue-600';
    const textColor = isPlayer1 ? 'text-yellow-200' : 'text-blue-200';
    
    // √çconos seg√∫n el tipo de jugador
    let playerIcon = 'üë§';
    let playerType = 'Jugador';
    let playerDescription = 'Jugador humano';
    
    if (player.esIA) {
      playerIcon = 'ü§ñ';
      playerType = 'IA';
      playerDescription = 'Inteligencia Artificial';
    } else if (player.isCurrentUser) {
      playerIcon = 'üì±';
      playerType = 'T√∫';
      playerDescription = gameMode === 'local' ? 'Jugador local' : 'Jugador actual';
    } else if (gameMode === 'local') {
      playerIcon = 'üéÆ';
      playerType = 'Jugador 2';
      playerDescription = 'Jugador local';
    }
    
    // Controles seg√∫n el modo de juego
    const controls = gameMode === 'local' 
      ? (isPlayer1 ? 'W (arriba) / S (abajo)' : '‚Üë (arriba) / ‚Üì (abajo)')
      : (player.isCurrentUser ? 'W (arriba) / S (abajo)' : 'Controlado remotamente');
    
    const sideText = isPlayer1 ? 'Izquierda' : 'Derecha';
    const colorText = isPlayer1 ? 'Amarilla' : 'Azul';
    
    return `
      <div class="${bgColor} rounded-lg p-3">
        <h3 class="text-lg font-bold text-white">
          ${playerIcon} ${player.displayName}
        </h3>
        <p class="text-sm ${textColor}">
          ${playerType} - Pala ${colorText}
        </p>
        <p class="text-sm ${textColor} font-semibold">
          Lado ${sideText}
        </p>
        <p class="text-xs ${textColor}">
          ${controls}
        </p>
        <p class="text-xs ${textColor} italic">
          ${playerDescription}
        </p>
      </div>
    `;
  }

  /**
   * Genera la informaci√≥n de rol del jugador
   */
  static generatePlayerRoleInfo(
    currentPlayer: PlayerInfo,
    opponent: PlayerInfo,
    gameMode: 'online' | 'local' = 'online'
  ): string {
    const opponentType = opponent.esIA ? 'IA' : 
                        (gameMode === 'local' ? 'Jugador Local' : 'Jugador Online');
    
    const playerSide = currentPlayer.numero === 1 ? 'Izquierda' : 'Derecha';
    const playerColor = currentPlayer.numero === 1 ? 'Amarilla' : 'Azul';
    
    return `
      <div class="text-green-400 font-bold text-center">
        ‚úÖ Juegas como ${currentPlayer.displayName} vs ${opponent.displayName}
        <br>
        <span class="text-sm">Pala ${playerColor} - Lado ${playerSide}</span>
      </div>
    `;
  }

  /**
   * Genera los t√≠tulos del marcador
   */
  static generateScoreTitles(
    player1: PlayerInfo, 
    player2: PlayerInfo, 
    currentPlayerNumber?: number
  ): { player1Title: string; player2Title: string } {
    const player1IsCurrentUser = currentPlayerNumber === 1;
    const player2IsCurrentUser = currentPlayerNumber === 2;
    
    const player1Title = `üü° ${player1.displayName}${player1IsCurrentUser ? ' (T√∫)' : ''}`;
    const player2Title = `üîµ ${player2.displayName}${player2IsCurrentUser ? ' (T√∫)' : ''}`;
    
    return {
      player1Title,
      player2Title
    };
  }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/components/gameEngine.ts ===[0m
import { PlayerInfo } from './playerDisplay';

export interface GameState {
    ball: { x: number, y: number, vx: number, vy: number, radius: number };
    paddles: {
        left: { x: number, y: number, width: number, height: number },
        right: { x: number, y: number, width: number, height: number }
    };
    score: { left: number, right: number };
    keys: { [key: string]: boolean };
    gameRunning: boolean;
    gameStartTime: Date | null;
    maxScore: number;
    canvas: {
        width: number;
        height: number;
    };
}

export class GameEngine {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private gameState: GameState;
    private animationId: number | null = null;
    private player1Info: PlayerInfo | null = null;
    private player2Info: PlayerInfo | null = null;
    private mode: 'local' | 'online';
    private onScoreUpdate?: (score: { left: number, right: number }) => void;
    private onGameEnd?: (winner: string, score: { left: number, right: number }) => void;
    private onStatusUpdate?: (status: string) => void;

    constructor(canvas: HTMLCanvasElement, mode: 'local' | 'online' = 'local') {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d')!;
        this.mode = mode;
        
        // Configurar dimensiones del canvas - EXACTAS como en el backup
        this.canvas.width = 600;
        this.canvas.height = 400;
        
        this.gameState = {
            ball: { x: 300, y: 200, vx: 5, vy: 3, radius: 10 },
            paddles: {
                left: { x: 20, y: 160, width: 15, height: 80 },
                right: { x: 565, y: 160, width: 15, height: 80 }
            },
            score: { left: 0, right: 0 },
            keys: {
                w: false, s: false,
                ArrowUp: false, ArrowDown: false
            },
            gameRunning: false,
            gameStartTime: null,
            maxScore: 5, // Exactamente como en el backup
            canvas: {
                width: 600,
                height: 400
            }
        };

        this.setupEventListeners();
        this.draw();
    }

    private setupEventListeners(): void {
        if (this.mode === 'local') {
            document.addEventListener('keydown', (e) => {
                if (e.key in this.gameState.keys) {
                    this.gameState.keys[e.key as keyof typeof this.gameState.keys] = true;
                }
            });

            document.addEventListener('keyup', (e) => {
                if (e.key in this.gameState.keys) {
                    this.gameState.keys[e.key as keyof typeof this.gameState.keys] = false;
                }
            });
        }
    }

    public setPlayerInfo(player1: PlayerInfo, player2: PlayerInfo): void {
        this.player1Info = player1;
        this.player2Info = player2;
    }

    public setCallbacks(callbacks: {
        onScoreUpdate?: (score: { left: number, right: number }) => void;
        onGameEnd?: (winner: string, score: { left: number, right: number }) => void;
        onStatusUpdate?: (status: string) => void;
    }): void {
        this.onScoreUpdate = callbacks.onScoreUpdate;
        this.onGameEnd = callbacks.onGameEnd;
        this.onStatusUpdate = callbacks.onStatusUpdate;
    }

    public startGame(): void {
        if (!this.gameState.gameStartTime) {
            this.gameState.gameStartTime = new Date();
        }
        this.gameState.gameRunning = true;
        this.onStatusUpdate?.('üéÆ ¬°Juego iniciado! Usa las teclas asignadas para mover');
        this.gameLoop();
    }

    public pauseGame(): void {
        this.gameState.gameRunning = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        this.onStatusUpdate?.('‚è∏Ô∏è Juego pausado');
    }

    public resetGame(): void {
        this.pauseGame();
        this.gameState.score = { left: 0, right: 0 };
        this.gameState.gameStartTime = null;
        this.resetBall();
        this.onScoreUpdate?.(this.gameState.score);
        this.draw();
        this.onStatusUpdate?.('üîÑ Presiona \'Iniciar Juego\' para comenzar');
    }

    public updateGameState(newState: Partial<GameState>): void {
        // Para modo online - actualizar desde el servidor
        if (newState.ball) this.gameState.ball = newState.ball;
        if (newState.paddles) this.gameState.paddles = newState.paddles;
        if (newState.score) {
            this.gameState.score = newState.score;
            this.onScoreUpdate?.(this.gameState.score);
        }
        this.draw();
    }

    private gameLoop(): void {
        if (!this.gameState.gameRunning) return;
        
        if (this.mode === 'local') {
            this.updatePaddles();
            this.updateBall();
        }
        
        this.draw();
        this.animationId = requestAnimationFrame(() => this.gameLoop());
    }

    private updatePaddles(): void {
        const speed = 5; // Velocidad exacta del backup
        
        // Jugador 1 (izquierda)
        if (this.gameState.keys.w && this.gameState.paddles.left.y > 0) {
            this.gameState.paddles.left.y -= speed;
        }
        if (this.gameState.keys.s && this.gameState.paddles.left.y < this.canvas.height - this.gameState.paddles.left.height) {
            this.gameState.paddles.left.y += speed;
        }
        
        // Jugador 2 (derecha)
        if (this.gameState.keys.ArrowUp && this.gameState.paddles.right.y > 0) {
            this.gameState.paddles.right.y -= speed;
        }
        if (this.gameState.keys.ArrowDown && this.gameState.paddles.right.y < this.canvas.height - this.gameState.paddles.right.height) {
            this.gameState.paddles.right.y += speed;
        }
    }

    private updateBall(): void {
        this.gameState.ball.x += this.gameState.ball.vx;
        this.gameState.ball.y += this.gameState.ball.vy;
        
        // Rebote en paredes superior e inferior
        if (this.gameState.ball.y <= this.gameState.ball.radius || 
            this.gameState.ball.y >= this.canvas.height - this.gameState.ball.radius) {
            this.gameState.ball.vy *= -1;
        }
        
        // Colisi√≥n con palas - EXACTA del backup
        const leftPaddle = this.gameState.paddles.left;
        const rightPaddle = this.gameState.paddles.right;
        
        if (this.gameState.ball.x <= leftPaddle.x + leftPaddle.width &&
            this.gameState.ball.y >= leftPaddle.y &&
            this.gameState.ball.y <= leftPaddle.y + leftPaddle.height &&
            this.gameState.ball.vx < 0) {
            this.gameState.ball.vx *= -1;
        }
        
        if (this.gameState.ball.x >= rightPaddle.x &&
            this.gameState.ball.y >= rightPaddle.y &&
            this.gameState.ball.y <= rightPaddle.y + rightPaddle.height &&
            this.gameState.ball.vx > 0) {
            this.gameState.ball.vx *= -1;
        }
        
        // Puntuaci√≥n
        if (this.gameState.ball.x < 0) {
            this.gameState.score.right++;
            this.resetBall();
            this.onScoreUpdate?.(this.gameState.score);
            this.checkGameEnd();
        } else if (this.gameState.ball.x > this.canvas.width) {
            this.gameState.score.left++;
            this.resetBall();
            this.onScoreUpdate?.(this.gameState.score);
            this.checkGameEnd();
        }
    }

    private resetBall(): void {
        this.gameState.ball.x = this.canvas.width / 2;
        this.gameState.ball.y = this.canvas.height / 2;
        this.gameState.ball.vx = Math.random() > 0.5 ? 5 : -5;
        this.gameState.ball.vy = (Math.random() - 0.5) * 6;
    }

    private checkGameEnd(): void {
        if (this.gameState.score.left >= this.gameState.maxScore || 
            this.gameState.score.right >= this.gameState.maxScore) {
            this.gameState.gameRunning = false;
            if (this.animationId) {
                cancelAnimationFrame(this.animationId);
                this.animationId = null;
            }
            
            const winner = this.gameState.score.left > this.gameState.score.right ? 
                (this.player1Info?.displayName || 'Jugador 1') : 
                (this.player2Info?.displayName || 'Jugador 2');
            
            this.onGameEnd?.(winner, this.gameState.score);
        }
    }

    private draw(): void {
        // Limpiar canvas
        this.ctx.fillStyle = 'black';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Dibujar l√≠nea central
        this.ctx.strokeStyle = 'white';
        this.ctx.setLineDash([5, 5]);
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width / 2, 0);
        this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);
        this.ctx.stroke();
        
        // Dibujar palas
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(
            this.gameState.paddles.left.x, 
            this.gameState.paddles.left.y, 
            this.gameState.paddles.left.width, 
            this.gameState.paddles.left.height
        );
        this.ctx.fillRect(
            this.gameState.paddles.right.x, 
            this.gameState.paddles.right.y, 
            this.gameState.paddles.right.width, 
            this.gameState.paddles.right.height
        );
        
        // Dibujar pelota
        this.ctx.beginPath();
        this.ctx.arc(this.gameState.ball.x, this.gameState.ball.y, this.gameState.ball.radius, 0, Math.PI * 2);
        this.ctx.fill();
    }

    public getGameStartTime(): Date | null {
        return this.gameState.gameStartTime;
    }

    public cleanup(): void {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        // Remover event listeners si es necesario
        if (this.mode === 'local') {
            // Los event listeners se remueven autom√°ticamente al cambiar de p√°gina
        }
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/google-config.ts ===[0m
// Configuraci√≥n de Google OAuth para desarrollo
export const GOOGLE_CLIENT_ID = 'your-client-id-here.apps.googleusercontent.com';

// Para desarrollo local, podemos usar un mock o configurar correctamente
export const GOOGLE_CONFIG = {
    client_id: GOOGLE_CLIENT_ID,
    redirect_uri: 'http://localhost:9001',
    scope: 'email profile'
};
[1;30m----------------------------------------[0m

[1;34m=== ./src/router.ts ===[0m
// src/router.ts

import { renderHomePage } from './pages/home';
import { renderPlay } from './pages/play';
import { renderProfilePage } from './pages/profile';
import { renderRankingPage } from './pages/ranking';
import { renderFriendsPage } from './pages/friends';
import { renderChatPage } from './pages/chat';
import { renderSettingsPage } from './pages/settings';
import { renderLoginPage } from './pages/login';
import { renderRegister } from './pages/register';
import { renderNavbar } from './components/navbar';
import { isAuthenticated } from './auth';

// New unified game pages (p√°ginas que usamos)
import { renderUnifiedGameLocal } from './pages/unifiedGameLocal';
import { renderUnifiedGameAI } from './pages/unifiedGameAI';
import { renderUnifiedGameOnline } from './pages/unifiedGameOnline';
import { renderGameLobby } from './pages/gameLobby';

// Spectator page
import { renderGameSpectator, startSpectatorAutoRefresh, stopSpectatorAutoRefresh, cleanupSpectator } from './pages/gameSpectator';

//tournaments page under construction
import { renderTournamentsPage } from './pages/tournaments';
// Define las rutas que realmente usamos
const routes: { [key: string]: () => void } = {
  '/home': renderHomePage,
  '/': () => {
    // Redirigir al login si no est√° autenticado, al home si lo est√°
    if (isAuthenticated()) {
      navigateTo('/home');
    } else {
      navigateTo('/login');
    }
  },
  '/profile': renderProfilePage,
  '/play': renderPlay,
  '/ranking': renderRankingPage,
  '/friends': renderFriendsPage,
  '/chat': renderChatPage,
  '/settings': renderSettingsPage,
  '/login': renderLoginPage,
  '/register': renderRegister,
  
  // Rutas de juego unificadas (las que usamos)
  '/unified-game-local': renderUnifiedGameLocal,
  '/unified-game-ai': renderUnifiedGameAI,
  '/unified-game-online': renderUnifiedGameOnline,
  '/game-lobby': renderGameLobby,

  // Tournaments route
  '/tournaments': renderTournamentsPage,

  // Spectator route
  '/spectator': () => {
    cleanupCurrentPage();
    renderGameSpectator();
    startSpectatorAutoRefresh();
  }
};

/**
 * Funci√≥n auxiliar para establecer la estructura principal de la aplicaci√≥n (navbar + contenido de p√°gina).
 * Solo la recrea si no existe.
 */
function setupMainAppLayout(): void {
  const appRoot = document.getElementById('app-root');
  if (!appRoot) {
    console.error('Elemento con id "app-root" no encontrado para configurar el layout principal.');
    return;
  }

  // Si no existen los contenedores principales (navbar-container o page-content), los crea
  if (!document.getElementById('navbar-container') || !document.getElementById('page-content')) {
    appRoot.innerHTML = `
      <div id="navbar-container"></div>
      <main id="page-content" class="flex-grow flex flex-col justify-center items-center p-4 sm:p-8 mt-24 sm:mt-32 w-full text-gray-100"></main>
    `;
  }
}

/**
 * Navega a una nueva ruta, renderiza la p√°gina correspondiente y actualiza el historial del navegador.
 * Tambi√©n asegura que el navbar se vuelva a renderizar para reflejar el enlace activo, si aplica.
 * @param path La ruta a la que navegar.
 */
export async function navigateTo(path: string): Promise<void> {
  const appRoot = document.getElementById('app-root') as HTMLElement;
  if (!appRoot) {
    console.error('Elemento con id "app-root" no encontrado. No se puede navegar.');
    return;
  }
  
  // Cleanup previous page
  cleanupCurrentPage();
  
  // Separar la ruta de los par√°metros de consulta
  const [routePath, queryString] = path.split('?');
  const fullPath = path; // Mantener el path completo para el historial
  
  const isAuthPage = routePath === '/login' || routePath === '/register';
  const currentPagePath = window.location.pathname;
  const wasAuthPage = currentPagePath === '/login' || currentPagePath === '/register';
  
  // Verifica si el usuario est√° autenticado
  const userIsAuthenticated = isAuthenticated();

  // Protecci√≥n de rutas
  if (isAuthPage && userIsAuthenticated) {
    // Si el usuario est√° autenticado y trata de acceder a login/register, redirigir a home
    console.log('Usuario autenticado intentando acceder a p√°gina de auth, redirigiendo a home');
    navigateTo('/home');
    return;
  }

  if (!isAuthPage && !userIsAuthenticated) {
    // Si el usuario no est√° autenticado y trata de acceder a p√°ginas protegidas, redirigir a login
    console.log('Usuario no autenticado intentando acceder a p√°gina protegida, redirigiendo a login');
    navigateTo('/login');
    return;
  }

  if (isAuthPage) {
    // Si vamos a una p√°gina de autenticaci√≥n, limpiamos todo el appRoot
    // y dejamos que renderLoginPage/renderRegister sobrescriba appRoot.innerHTML
    if (!wasAuthPage) { // Solo si venimos de una p√°gina que no era de autenticaci√≥n
        appRoot.innerHTML = ''; // Limpia la estructura principal (navbar + main)
    }
    const renderFunction = routes[routePath];
    if (renderFunction) {
      renderFunction(); // Llama a la funci√≥n de renderizado de login/register
    } else {
        console.warn(`Ruta no encontrada para p√°gina de autenticaci√≥n: ${routePath}`);
    }
  } else {
    // Si vamos a una p√°gina de la aplicaci√≥n principal, nos aseguramos de que la estructura exista
    if (wasAuthPage) { // Si venimos de una p√°gina de autenticaci√≥n
        setupMainAppLayout(); // Reestablece la estructura principal (navbar + main)
    } else if (!document.getElementById('navbar-container') || !document.getElementById('page-content')) {
        // Si no es una p√°gina de autenticaci√≥n, pero la estructura no est√° (ej. primera carga de /home)
        setupMainAppLayout();
    }

    const pageContentContainer = document.getElementById('page-content');
    if (!pageContentContainer) {
      console.error('Contenedor de contenido de p√°gina (#page-content) no encontrado despu√©s de configurar el layout.');
      return;
    }

    // Limpia solo el contenido de la p√°gina para las rutas no de autenticaci√≥n
    pageContentContainer.innerHTML = '';

    const renderFunction = routes[routePath]; // Usar routePath sin par√°metros
    if (renderFunction) {
      renderFunction(); // Renderiza el contenido de la p√°gina dentro de #page-content
    } else {
      // Manejar 404 o redirigir a una p√°gina predeterminada
      pageContentContainer.innerHTML = '<h1>404 - P√°gina No Encontrada</h1><p>Lo sentimos, la p√°gina que buscas no existe.</p>';
      console.warn(`Ruta no encontrada para la ruta: ${routePath}`);
    }

    // Siempre vuelve a renderizar el navbar para actualizar el enlace activo en las p√°ginas de la aplicaci√≥n
    renderNavbar(routePath);
  }

  // Actualiza el historial del navegador (a menos que sea la carga inicial y la ruta sea la misma)
  if (window.location.pathname !== fullPath) {
    window.history.pushState({}, fullPath, fullPath);
  }
}

function cleanupCurrentPage(): void {
  // Stop spectator auto-refresh if leaving spectator page
  stopSpectatorAutoRefresh();
  cleanupSpectator();
}

// Event listeners for cleanup
window.addEventListener('beforeunload', cleanupCurrentPage);
window.addEventListener('popstate', (event) => {
  cleanupCurrentPage();
  navigateTo(window.location.pathname + window.location.search);
});

// Handle browser back/forward buttons
window.addEventListener('popstate', () => {
  navigateTo(window.location.pathname + window.location.search);
});[1;30m----------------------------------------[0m

[1;34m=== ./src/i18n.ts ===[0m
// src/i18n.ts

interface Translations {
    [key: string]: {
        [component: string]: {
            [textKey: string]: string;
        };
    };
}

const translations: Translations = {
    es: {
        common: {
            language: 'Castellano',
            english: 'English',
            galician: 'Galego',
            chinese: '‰∏≠Êñá (Chino)',
            castellano: 'Castellano',
            infoTitle: "Informaci√≥n",
            okButton: "Entendido",
            backToHome: "Volver al Inicio"
        },
        navbar: {
            home: 'Inicio',
            profile: 'Perfil',
            play: 'Jugar',
            ranking: 'Ranking',
            tournaments: 'Torneos',
            chat: 'Chat',
            friends: 'Amigos',
            settings: 'Ajustes',
            logout: 'Cerrar Sesi√≥n'
        },
        login: {
            welcomeBack: 'Bienvenido de nuevo',
            title: 'PONG',
            subtitle: 'Con√©ctate para jugar al m√°ximo nivel.',
            usernameLabel: 'Nombre de usuario',
            passwordLabel: 'Contrase√±a',
            loginButton: 'Iniciar sesi√≥n',
            createAccountButton: 'Crear una cuenta',
            or: 'O',
            noAccountYet: '¬øA√∫n no tienes una cuenta?'
        },
        register: {
            joinExperience: '√önete a la experiencia',
            title: 'Reg√≠strate',
            subtitle: 'Crea tu cuenta para empezar a jugar.',
            usernameLabel: 'Nombre de usuario',
            emailLabel: 'Correo electr√≥nico',
            passwordLabel: 'Contrase√±a',
            confirmPasswordLabel: 'Confirmar contrase√±a',
            registerButton: 'Registrarse',
            alreadyHaveAccount: '¬øYa tienes una cuenta?',
            loginHere: 'Iniciar sesi√≥n aqu√≠',
            registerWithGoogle: 'Registrarse con Google',
            or: 'O'
        },
        home: {
            noLiveMatches: 'No hay partidos en curso',
            errorLoadingMatches: 'Error al cargar los partidos en vivo',
            inProgressRound: 'Ronda en curso',
            welcomeTitle: "Bienvenido a",
            welcomeSubtitle: "La plataforma definitiva para el Pong moderno. ¬°Compite, con√©ctate y trasciende!",
            playNowButton: "Jugar Ahora",
            viewTournamentsButton: "Ver Torneos",
            liveMatchesTitle: "Partidos en Vivo",
            liveMatchesSubtitle: "Sigue la acci√≥n en tiempo real.",
            playerA: "Jugador A",
            playerB: "Jugador B",
            teamX: "Equipo X",
            teamY: "Equipo Y",
            vs: "vs",
            tournamentSemifinal: "Semifinal del Torneo",
            quickMatch: "Partida R√°pida",
            preparingToStart: "Prepar√°ndose para empezar",
            assassin: "Asesino",
            master: "Maestro",
            matchPoint: "Punto de partido",
            yourProfileTitle: "Tu Perfil",
            yourProfileSubtitle: "Accede a tus estad√≠sticas, historial y personaliza tu experiencia.",
            globalRankingTitle: "Ranking Global",
            globalRankingSubtitle: "Descubre a los mejores jugadores de Transcendence."
        },
        profile: {
            profileTitle: "Perfil de Usuario",
            settingsTitle: "Ajustes",
            editProfileButton: "Editar Perfil",
            uploadAvatarButton: "Subir Avatar",
            changePasswordButton: "Cambiar Contrase√±a",
            matchHistoryTitle: "Historial de Partidas",
            matchHistorySubtitle: "Tus √∫ltimas partidas",
            matchWin: "Victoria",
            matchLoss: "Derrota",
            matchDraw: "Empate",
            score: "Puntuaci√≥n",
            date: "Fecha",
            time: "Hora",
            opponent: "Oponente",
            gameMode: "Modo de Juego",
            noMatches: "No hay partidas en el historial.",
            statsTitle: "Estad√≠sticas",
            totalWins: "Victorias Totales",
            totalLosses: "Derrotas Totales",
            winRate: "Tasa de Victorias",
            totalGames: "Partidas Totales",
            eloRating: "Puntuaci√≥n ELO",
            accuracy: "Precisi√≥n",
            mostPlayedMode: "Modo m√°s jugado",
            languageSetting: "Idioma",
            notificationsSetting: "Notificaciones",
            twoFactorAuthSetting: "Autenticaci√≥n de Dos Factores",
            darkModeSetting: "Modo Oscuro",
            enable: "Activar",
            disable: "Desactivar",
            change: "Cambiar",
            logoutButton: "Cerrar Sesi√≥n",
            saveChangesButton: "Guardar Cambios",
            cancelButton: "Cancelar",
            confirmLogoutTitle: "¬øCerrar Sesi√≥n?",
            confirmLogoutMessage: "¬øEst√°s seguro de que quieres cerrar tu sesi√≥n?",
            yesLogout: "S√≠, Cerrar Sesi√≥n",
            noCancel: "No, Cancelar",
            customMessageTitle: "Informaci√≥n",
            okButton: "Entendido",
            download: "Descargar historial",
            ranking: "Ranking",
            ELO: "ELO",
            games: "Partidas"
        },
        play: {
            selectGameMode: "Selecciona un Modo de Juego",
            oneVsOne: "1 vs 1 Cl√°sico",
            oneVsOneDescription: "Partida r√°pida contra otro jugador.",
            tournament: "Torneo",
            tournamentDescription: "Competici√≥n con m√∫ltiples jugadores. ¬°Pr√≥ximamente!",
            comingSoon: "¬°Pr√≥ximamente!",
            customGame: "Partida Personalizada",
            customGameDescription: "Crea o √∫nete a una partida con reglas espec√≠ficas.",
            vsAIButton: "Vs IA",
            chooseModeTitle: "Elige un modo de juego",
            chooseModeDescription: "Selecciona un modo de juego para empezar a jugar.",
            backToGame: "Volver al juego",
            vsAIDescription: "Juega contra la inteligencia artificial.",
            selectDifficulty: "Selecciona la dificultad"
        },
        ranking: {
            globalRankingTitle: "Ranking Global",
            bestPlayers: "Los mejores jugadores de Transcendence",
            wins: "Victorias:",
            losses: "Derrotas:",
            pointsAbbreviation: "pts",
            yourCurrentPosition: "Tu posici√≥n actual:",
            viewMyPositionButton: "Ver mi posici√≥n"
        },
        friends: {
            friends: "Amigos",
            friendsManagement: "Gestiona tus amistades en Transcendence",
            yourFriends: "Tus Amigos",
            sendRequests: "A√±ade Amigos",
            incomingRequests: "Solicitudes",
            noUsersAvailable: "No existen usuarios",
            noRequests: "No hay solicitudes",
            noFriends: "No tienes amigos",
            challengeButton: "Desaf√≠o",
            sendRequestButton: "Solicitar",
            requestSent: "Enviado",
            sentError: "Error al enviar solicitud",
            requestAccepted: "‚úÖ Solicitud aceptada",
            requestRejected: "‚ùå Solicitud rechazada",
            confirmSendRequest: "¬øEnviar solicitud de amistad a",
            requestSentSuccessfully: "Petici√≥n de amistad enviada correctamente",
            requestFailed: "Error al enviar solicitud",
            confirmDelete: '¬øEst√°s seguro de que quieres eliminar a este amigo?',
            friendDeleted: 'Amigo eliminado correctamente',
            deletingError: "Error eliminando amigo"
        },
        chat: {
            underConstruction: "¬°En construcci√≥n!",
            comingSoon: "Pronto podr√°s chatear en Transcendence"
        },
        tournaments: {
            underConstruction: "¬°En construcci√≥n!",
            comingSoon: "¬°¬°Pr√≥ximamente!!"
        },
        settings: {
            title: "Configuraci√≥n",
            subtitle: "Personaliza tu experiencia de juego y gestiona tu cuenta",
            userAccountSectionTitle: "Cuenta de Usuario",
            userAccountSectionSubtitle: "Gestiona tu informaci√≥n personal",
            usernameLabel: "Nombre de Usuario",
            usernameLabelPlaceholder: "Tu nombre de usuario",
            emailLabel: "Correo Electr√≥nico",
            emailLabelPlaceholder: "Correo Electr√≥nico",
            changePassword: "Cambiar Contrase√±a",
            currentPasswordLabel: "Contrase√±a Actual",
            currentPasswordPlaceholder: "Ingresa tu contrase√±a actual",
            saveChanges: "Guardar Cambios",
            gameConfigSectionTitle: "Configuraci√≥n del juego",
            gameConfigSectionSubtitle: "Personaliza tu experiencia de juego",
            newPasswordLabel: "Nueva Contrase√±a",
            newPasswordPlaceholder: "Ingresa tu nueva contrase√±a",
            confirmNewPasswordLabel: "Confirmar Nueva Contrase√±a",
            confirmNewPasswordPlaceholder: "Confirma tu nueva contrase√±a",
            language: "Idioma de la Interfaz",
            languageText: "Selecciona tu idioma preferido",
            notifications: "Notificaciones",
            notificationsText: "Recibir notificaciones de partidas",
            doubleFactor: "Autenticaci√≥n de foble facto",
            doubleFactorText: "2FA por autenticador con c√≥digo QR",
            difficulty: "Dificultad por Defecto",
            difficultyText: "Nivel predeterminado contra IA",
            dif1: "F√°cil",
            dif2: "Normal",
            dif3: "Dif√≠cil",
            saveConfig: "Guardar Configuraci√≥n del Juego",
            moreInfo: "Informaci√≥n Adicional",
            playedGames: "Partidas Jugadas",
            playedGamesText: "Visualiza tus estad√≠sticas en tu perfil",
            globalRanking: "Ranking Global",
            globalRankingText: "Compite por el primer lugar",
            security: "Seguridad",
            securityText: "Tus datos est√°n protegidos",
            saving: "‚è≥ Guardando...",
            scanQRThenEnterCode: "Escanea este c√≥digo QR con Google Authenticator o Authy, luego ingresa el c√≥digo generado.",
            enterCodeFromApp: "Ingresa el c√≥digo de 6 d√≠gitos de la app",
            enterCurrentPassword: "Ingresa tu contrase√±a actual para desactivar 2FA",
            enterCurrent2FACode: "Ingresa un c√≥digo actual del autenticador"
        },
        alerts: {
            failGoogleLogin: "Error al iniciar sesi√≥n con Google",
            enter2FACode: "Ingresa el c√≥digo del autenticador",
            twoFAEnabled: "‚úÖ 2FA activado correctamente",
            twoFADisabled: "üîí 2FA desactivado",
            invalid2FACode: "‚ùå C√≥digo inv√°lido o expirado",
            error2FAShared: "‚ùå Error al procesar 2FA",
            failRequest: "‚ùå Error rechazando solicitud:",
            network: "‚ùå Error de red",
            noAccept: "‚ùå No se pudo aceptar",
            google: "‚ùå Error en autenticaci√≥n con Google",
            connection: "‚ùå Error de conexi√≥n",
            failLogin: "‚ùå Login fallido",
            emptyFields: "‚ùå Por favor, completa todos los campos",
            avatarOk: "‚úÖ Avatar subido correctamente",
            avatarFail: "‚ùå Error al subir avatar",
            history: "‚ùå Debes iniciar sesi√≥n para descargar el historial",
            historyError: "‚ùå Error al descargar el historial",
            passError: "‚ùå Las contrase√±as no coinciden",
            successLogin: "‚úÖ Registro exitoso! Ahora puedes iniciar sesi√≥n",
            errorLogin: "‚ùå Error: ",
            registerError: "‚ùå Error en registro",
            serverError: "‚ùå Error de conexi√≥n con el servidor",
            successProfile: "‚úÖ P√©rfil actualizado con √©xito",
            successChanges: "‚úÖ Configuraciones del juego guardadas exitosamente",
            errorChanges: "‚ùå Error al guardar las configuraciones del juego",
            challenging: "Desafiar",
            requestSentSuccessfully: "‚úÖ Petici√≥n de amistad enviada correctamente",
            requestFailed: "‚ùå Error al enviar solicitud"
        }
    },
    en: {
        common: {
            language: 'English',
            english: 'English',
            galician: 'Galician',
            chinese: '‰∏≠Êñá (Chinese)',
            castellano: 'Spanish',
            infoTitle: "Information",
            okButton: "Understood",
            backToHome: "Back to Home"
        },
        navbar: {
            home: 'Home',
            profile: 'Profile',
            play: 'Play',
            ranking: 'Ranking',
            tournaments: 'Tournaments',
            chat: 'Chat',
            friends: 'Friends',
            settings: 'Settings',
            logout: 'Logout'
        },
        login: {
            welcomeBack: 'Welcome Back',
            title: 'PONG',
            subtitle: 'Connect to play at the highest level.',
            usernameLabel: 'Username',
            passwordLabel: 'Password',
            loginButton: 'Login',
            createAccountButton: 'Create an Account',
            or: 'Or',
            noAccountYet: 'Don\'t have an account yet?'
        },
        register: {
            joinExperience: 'Join the Experience',
            title: 'Register',
            subtitle: 'Create your account to start playing.',
            usernameLabel: 'Username',
            emailLabel: 'Email',
            passwordLabel: 'Password',
            confirmPasswordLabel: 'Confirm Password',
            registerButton: 'Register',
            alreadyHaveAccount: 'Already have an account?',
            loginHere: 'Login here',
            registerWithGoogle: 'Register with Google',
            or: 'Or'
        },
        home: {
            noLiveMatches: 'No live matches right now',
            errorLoadingMatches: 'Error loading live matches',
            inProgressRound: 'Round in progress',
            welcomeTitle: "Welcome to",
            welcomeSubtitle: "The ultimate platform for modern Pong. Compete, connect, and transcend!",
            playNowButton: "Play Now",
            viewTournamentsButton: "View Tournaments",
            liveMatchesTitle: "Live Matches",
            liveMatchesSubtitle: "Follow the action in real-time.",
            playerA: "Player A",
            playerB: "Player B",
            teamX: "Team X",
            teamY: "Team Y",
            vs: "vs",
            tournamentSemifinal: "Tournament Semifinal",
            quickMatch: "Quick Match",
            preparingToStart: "Preparing to start",
            assassin: "Assassin",
            master: "Master",
            matchPoint: "Match Point",
            yourProfileTitle: "Your Profile",
            yourProfileSubtitle: "Access your stats, history, and customize your experience.",
            globalRankingTitle: "Global Ranking",
            globalRankingSubtitle: "Discover the best players in Transcendence."
        },
        profile: {
            profileTitle: "User Profile",
            settingsTitle: "Settings",
            editProfileButton: "Edit Profile",
            uploadAvatarButton: "Upload Avatar",
            changePasswordButton: "Change Password",
            matchHistoryTitle: "Match History",
            matchHistorySubtitle: "Your recent games",
            matchWin: "Win",
            matchLoss: "Loss",
            matchDraw: "Draw",
            score: "Score",
            date: "Date",
            time: "Time",
            opponent: "Opponent",
            gameMode: "Game Mode",
            noMatches: "No matches in history.",
            statsTitle: "Statistics",
            totalWins: "Total Wins",
            totalLosses: "Total Losses",
            winRate: "Win Rate",
            totalGames: "Total Games",
            eloRating: "ELO Rating",
            accuracy: "Accuracy",
            mostPlayedMode: "Most Played Mode",
            languageSetting: "Language",
            notificationsSetting: "Notifications",
            twoFactorAuthSetting: "Two-Factor Authentication",
            darkModeSetting: "Dark Mode",
            enable: "Enable",
            disable: "Disable",
            change: "Change",
            logoutButton: "Logout",
            saveChangesButton: "Save Changes",
            cancelButton: "Cancel",
            confirmLogoutTitle: "Logout?",
            confirmLogoutMessage: "Are you sure you want to log out?",
            yesLogout: "Yes, Logout",
            noCancel: "No, Cancel",
            customMessageTitle: "Information",
            okButton: "Understood",
            download: "Download history",
            ranking: "Ranking",
            ELO: "ELO",
            games: "Games"
        },
        play: {
            selectGameMode: "Select Game Mode",
            oneVsOne: "1 vs 1 Classic",
            oneVsOneDescription: "Quick match against another player.",
            tournament: "Tournament",
            tournamentDescription: "Competition with multiple players. Coming soon!",
            comingSoon: "Coming Soon!",
            customGame: "Custom Game",
            customGameDescription: "Create or join a game with specific rules.",
            vsAIButton: "Vs AI",
            chooseModeTitle: "Choose a Game Mode",
            chooseModeDescription: "Select a game mode to start playing.",
            backToGame: "Back to Game",
            vsAIDescription: "Play against AI.",
            selectDifficulty: "Select Difficulty"
        },
        ranking: {
            globalRankingTitle: "Global Ranking",
            bestPlayers: "The best palyers of Transcendence",
            wins: "Wins:",
            losses: "Losses:",
            pointsAbbreviation: "pts",
            yourCurrentPosition: "Your current position:",
            viewMyPositionButton: "View my position"
        },
        friends: {
            friends: "Friends",
            friendsManagement: "Manage your friends on Transcendence",
            yourFriends: "Your Friends",
            sendRequests: "Add Friends",
            incomingRequests: "Requests",
            noUsersAvailable: "No users available",
            noRequests: "No requests",
            noFriends: "You have no friends",
            challengeButton: "Challenge",
            sendRequestButton: "Request",
            requestSent: "Sent",
            sentError: "Error sending request",
            requestAccepted: "‚úÖ Request accepted",
            requestRejected: "‚ùå Request rejected",
            confirmSendRequest: "Send friend request to",
            requestSentSuccessfully: "Friend request sent successfully",
            requestFailed: "Error sending request",
            confirmDelete: 'Are you sure you want to delete this friend?',
            friendDeleted: 'Friend successfully deleted',
            deletingError: 'Error deleting friend'
        },
        chat: {
            underConstruction: "Under construction!",
            comingSoon: "Soon you‚Äôll be able to chat in Transcendence"
        },
        tournaments: {
            underConstruction: "Under construction!",
            comingSoon: "Coming soon!!"
        },
        settings: {
            title: "Settings",
            subtitle: "Customize your gameplay and manage your account",
            userAccountSectionTitle: "User Account",
            userAccountSectionSubtitle: "Manage your personal information",
            usernameLabel: "Username",
            usernameLabelPlaceholder: "Your username",
            emailLabel: "Email",
            emailLabelPlaceholder: "Email",
            changePassword: "Change Password",
            currentPasswordLabel: "Current Password",
            currentPasswordPlaceholder: "Enter your current password",
            saveChanges: "Save Changes",
            gameConfigSectionTitle: "Game Settings",
            gameConfigSectionSubtitle: "Customize your gaming experience",
            newPasswordLabel: "New Password",
            newPasswordPlaceholder: "Enter your new password",
            confirmNewPasswordLabel: "Confirm New Password",
            confirmNewPasswordPlaceholder: "Confirm your new password",
            language: "Interface Language",
            languageText: "Select your preferred language",
            notifications: "Notifications",
            notificationsText: "Receive match notifications",
            doubleFactor: "Two-Factor Authentication",
            doubleFactorText: "2FA via authenticator with QR code",
            difficulty: "Default Difficulty",
            difficultyText: "Default level against AI",
            dif1: "Easy",
            dif2: "Normal",
            dif3: "Hard",
            saveConfig: "Save Game Settings",
            moreInfo: "More Information",
            playedGames: "Games Played",
            playedGamesText: "View your stats in your profile",
            globalRanking: "Global Ranking",
            globalRankingText: "Compete for the top spot",
            security: "Security",
            securityText: "Your data is protected",
            saving: "‚è≥ Saving...",
            scanQRThenEnterCode: "Scan this QR code with Google Authenticator or Authy, then enter the generated code.",
            enterCodeFromApp: "Enter the 6-digit code from the app",
            enterCurrentPassword: "Enter your current password to disable 2FA",
            enterCurrent2FACode: "Enter a current code from the authenticator"
        },
        alerts: {
            failGoogleLogin: "Error logging in with Google",
            enter2FACode: "Enter the authenticator code",
            twoFAEnabled: "‚úÖ 2FA successfully enabled",
            twoFADisabled: "üîí 2FA disabled",
            invalid2FACode: "‚ùå Invalid or expired code",
            error2FAShared: "‚ùå Error processing 2FA",
            failRequest: "‚ùå Error rejecting request:",
            network: "‚ùå Network error",
            noAccept: "‚ùå Could not accept",
            google: "‚ùå Google authentication error",
            connection: "‚ùå Connection error",
            failLogin: "‚ùå Login failed",
            emptyFields: "‚ùå Please fill in all fields",
            avatarOk: "‚úÖ Avatar uploaded successfully",
            avatarFail: "‚ùå Error uploading avatar",
            history: "‚ùå You must be logged in to download the history",
            historyError: "‚ùå Error downloading history",
            passError: "‚ùå Passwords do not match",
            successLogin: "‚úÖ Registration successful! You can now log in",
            errorLogin: "‚ùå Error: ",
            registerError: "‚ùå Registration error",
            serverError: "‚ùå Server connection error",
            successProfile: "‚úÖ Profile updated successfully",
            successChanges: "‚úÖ Game settings saved successfully",
            errorChanges: "‚ùå Error saving game settings",
            challenging: "Challenging",
            requestSentSuccessfully: "‚úÖ Friend request sent successfully",
            requestFailed: "‚ùå Error sending request"
        }
    },
    gl: {
        common: {
            language: 'Galego',
            english: 'Ingl√©s',
            galician: 'Galego',
            chinese: '‰∏≠Êñá (Chin√©s)',
            castellano: 'Castel√°n',
            infoTitle: "Informaci√≥n",
            okButton: "Entendido",
            backToHome: "Volver ao Inicio"
        },
        navbar: {
            home: 'Inicio',
            profile: 'Perfil',
            play: 'Xogar',
            ranking: 'Clasificaci√≥n',
            tournaments: 'Campionatos',
            chat: 'Chat',
            friends: 'Amigos',
            settings: 'Configuraci√≥n',
            logout: 'Pechar Sesi√≥n'
        },
        login: {
            welcomeBack: 'Benvido de volta',
            title: 'PONG',
            subtitle: 'Con√©ctate para xogar ao m√°ximo nivel.',
            usernameLabel: 'Nome de usuario',
            passwordLabel: 'Contrasinal',
            loginButton: 'Iniciar sesi√≥n',
            createAccountButton: 'Crear unha conta',
            or: 'Ou',
            noAccountYet: 'A√≠nda non tes unha conta?'
        },
        register: {
            joinExperience: '√önete √° experiencia',
            title: 'Rexistrar',
            subtitle: 'Crea a t√∫a conta para comezar a xogar.',
            usernameLabel: 'Nome de usuario',
            emailLabel: 'Correo electr√≥nico',
            passwordLabel: 'Contrasinal',
            confirmPasswordLabel: 'Confirmar contrasinal',
            registerButton: 'Rexistrarse',
            alreadyHaveAccount: 'Xa tes unha conta?',
            loginHere: 'Iniciar sesi√≥n aqu√≠',
            registerWithGoogle: 'Rexistrarse con Google',
            or: 'Ou'
        },
        home: {
            noLiveMatches: 'Non hai partidos agora mesmo',
            errorLoadingMatches: 'Error cargando os partidos en vivo',
            inProgressRound: 'Ronda en curso',
            welcomeTitle: "Benvido a",
            welcomeSubtitle: "A plataforma definitiva para o Pong moderno. Compite, con√©ctate e trasciende!",
            playNowButton: "Xogar Agora",
            viewTournamentsButton: "Ver Torneos",
            liveMatchesTitle: "Partidos en Vivo",
            liveMatchesSubtitle: "Segue a acci√≥n en tempo real.",
            playerA: "Xogador A",
            playerB: "Xogador B",
            teamX: "Equipo X",
            teamY: "Equipo Y",
            vs: "vs",
            tournamentSemifinal: "Semifinal do Torneo",
            quickMatch: "Partida R√°pida",
            preparingToStart: "Prepar√°ndose para empezar",
            assassin: "Asasino",
            master: "Mestre",
            matchPoint: "Punto de partido",
            yourProfileTitle: "O teu Perfil",
            yourProfileSubtitle: "Accede √°s t√∫as estad√≠sticas, historial e personaliza a t√∫a experiencia.",
            globalRankingTitle: "Clasificaci√≥n Global",
            globalRankingSubtitle: "Descobre os mellores xogadores de Transcendence."
        },
        profile: {
            profileTitle: "Perfil de Usuario",
            settingsTitle: "Configuraci√≥n",
            editProfileButton: "Editar Perfil",
            uploadAvatarButton: "Subir Avatar",
            changePasswordButton: "Cambiar Contrasinal",
            matchHistoryTitle: "Historial de Partidas",
            matchHistorySubtitle: "As t√∫as √∫ltimas partidas",
            matchWin: "Victoria",
            matchLoss: "Derrota",
            matchDraw: "Empate",
            score: "Puntuaci√≥n",
            date: "Data",
            time: "Hora",
            opponent: "Opo√±ente",
            gameMode: "Modo de Xogo",
            noMatches: "Non hai partidas no historial.",
            statsTitle: "Estad√≠sticas",
            totalWins: "Victorias Totais",
            totalLosses: "Derrotas Totais",
            winRate: "Taxa de Victorias",
            totalGames: "Partidas Totais",
            eloRating: "Puntuaci√≥n ELO",
            accuracy: "Precisi√≥n",
            mostPlayedMode: "Modo m√°is xogado",
            languageSetting: "Idioma",
            notificationsSetting: "Notificaci√≥ns",
            twoFactorAuthSetting: "Autenticaci√≥n de Dous Factores",
            darkModeSetting: "Modo Escuro",
            enable: "Activar",
            disable: "Desactivar",
            change: "Cambiar",
            logoutButton: "Pechar Sesi√≥n",
            saveChangesButton: "Gardar Cambios",
            cancelButton: "Cancelar",
            confirmLogoutTitle: "Pechar Sesi√≥n?",
            confirmLogoutMessage: "Est√°s seguro de que queres pechar a t√∫a sesi√≥n?",
            yesLogout: "Si, Pechar Sesi√≥n",
            noCancel: "Non, Cancelar",
            customMessageTitle: "Informaci√≥n",
            okButton: "Entendido",
            download: "Descargar historial",
            ranking: "Ranking",
            ELO: "ELO",
            games: "Partidas"
        },
        play: {
            selectGameMode: "Selecciona un Modo de Xogo",
            oneVsOne: "1 vs 1 Cl√°sico",
            oneVsOneDescription: "Partida r√°pida contra outro xogador.",
            tournament: "Torneo",
            tournamentDescription: "Competici√≥n con m√∫ltiples xogadores. Proximamente!",
            comingSoon: "Proximamente!",
            customGame: "Partida Personalizada",
            customGameDescription: "Crea ou √∫nete a unha partida con regras espec√≠ficas.",
            vsAIButton: "Vs IA",
            chooseModeTitle: "Elixe un modo de xogo",
            chooseModeDescription: "Selecciona un modo de xogo para empezar a xogar.",
            backToGame: "Volver ao xogo",
            vsAIDescription: "Xoga contra a intelixencia artificial.",
            selectDifficulty: "Selecciona a dificultade"
        },
        ranking: {
            globalRankingTitle: "Clasificaci√≥n Global",
            bestPlayers: "Os mellores xogadores de Transcendence ",
            wins: "Victorias:",
            losses: "Derrotas:",
            pointsAbbreviation: "pts",
            yourCurrentPosition: "A t√∫a posici√≥n actual:",
            viewMyPositionButton: "Ver a mi√±a posici√≥n"
        },
        friends: {
            friends: "Amigos",
            friendsManagement: "Xestiona as t√∫as amizades en Transcendence",
            yourFriends: "Os teus Amigos",
            sendRequests: "Fai Amigos",
            incomingRequests: "Solicitudes",
            noUsersAvailable: "Non hai usuarios",
            noRequests: "Non tes solicitudes",
            noFriends: "Non tes amigos",
            challengeButton: "Desaf√≠o",
            sendRequestButton: "Solicitude",
            requestSent: "Enviado",
            sentError: "Erro √≥ enviar solicitude",
            requestAccepted: "‚úÖ Solicitude aceptada",
            requestRejected: "‚ùå Solicitude rexeitada",
            confirmSendRequest: "¬øEnviar solicitude de amizade a ",
            requestSentSuccessfully: "Solicitude de amizade enviada correctamente",
            requestFailed: "Erro ao enviar solicitude",
            confirmDelete: 'Est√°s seguro de que queres eliminar ista amistade?',
            friendDeleted: 'Amistade √≥ carallo',
            deletingError: 'Erro √≥ borralo amigo'
        },
        chat: {
            underConstruction: "En construci√≥n!",
            comingSoon: "Pronto poder√°s chatear en Transcendence"
        },
        tournaments: {
            underConstruction: "En construci√≥n!",
            comingSoon: "Axi√±a poder√°s xogar campionatos!!"
        },
        settings: {
            title: "Configuraci√≥n",
            subtitle: "Personaliza a t√∫a experiencia de xogo e xestiona a t√∫a conta",
            userAccountSectionTitle: "Conta de Usuario",
            userAccountSectionSubtitle: "Xestiona a t√∫a informaci√≥n persoal",
            usernameLabel: "Nome de Usuario",
            usernameLabelPlaceholder: "O teu nome de usuario",
            emailLabel: "Correo Electr√≥nico",
            emailLabelPlaceholder: "O teu correo electr√≥nico",
            changePassword: "Cambiar Contrasinal",
            currentPasswordLabel: "Contrasinal Actual",
            currentPasswordPlaceholder: "Introduce o teu contrasinal actual",
            saveChanges: "Gardar Cambios",
            gameConfigSectionTitle: "Configuraci√≥n do Xogo",
            gameConfigSectionSubtitle: "Personaliza a t√∫a experiencia de xogo",
            newPasswordLabel: "Novo Contrasinal",
            newPasswordPlaceholder: "Introduce o teu novo contrasinal",
            confirmNewPasswordLabel: "Confirmar Novo Contrasinal",
            confirmNewPasswordPlaceholder: "Confirma o teu novo contrasinal",
            language: "Idioma da Interface",
            languageText: "Selecciona o teu idioma preferido",
            notifications: "Notificaci√≥ns",
            notificationsText: "Recibir notificaci√≥ns das partidas",
            doubleFactor: "Autenticaci√≥n de dobre factor",
            doubleFactorText: "2FA v√≠a autenticador con c√≥digo QR",
            difficulty: "Dificultade por Defecto",
            difficultyText: "Nivel predeterminado contra a IA",
            dif1: "Doado",
            dif2: "Normal",
            dif3: "Dif√≠cil",
            saveConfig: "Gardar Configuraci√≥n do Xogo",
            moreInfo: "M√°is Informaci√≥n",
            playedGames: "Partidas Xogadas",
            playedGamesText: "Consulta as t√∫as estat√≠sticas no perfil",
            globalRanking: "Clasificaci√≥n Global",
            globalRankingText: "Compite polo primeiro posto",
            security: "Seguridade",
            securityText: "Os teus datos est√°n protexidos",
            saving: "‚è≥ Gardando...",
            scanQRThenEnterCode: "Escanea iste c√≥digo QR con Google Authenticator ou Authy, logo introduce o c√≥digo xerado.",
            enterCodeFromApp: "Introduce o c√≥digo de 6 d√≠xitos da aplicaci√≥n",
            enterCurrentPassword: "Introduce o teu contrasinal actual para desactivar o 2FA",
            enterCurrent2FACode: "Introduce un c√≥digo actual do autenticador"
        },
        alerts: {
            failGoogleLogin: "Erro √≥ iniciar sesi√≥n con Google",
            enter2FACode: "Introduce o c√≥digo do autenticador",
            twoFAEnabled: "‚úÖ 2FA activado correctamente",
            twoFADisabled: "üîí 2FA desactivado",
            invalid2FACode: "‚ùå C√≥digo non v√°lido ou caducado",
            error2FAShared: "‚ùå Erro √≥ procesar o 2FA",
            failRequest: "‚ùå Erro √≥ rexeitar a solicitude:",
            network: "‚ùå Erro de rede",
            noAccept: "‚ùå Non se puido aceptar",
            google: "‚ùå Erro na autenticaci√≥n con Google",
            connection: "‚ùå Erro de conexi√≥n",
            failLogin: "‚ùå Inicio de sesi√≥n fallido",
            emptyFields: "‚ùå Por favor, completa todos os campos",
            avatarOk: "‚úÖ Avatar subido correctamente",
            avatarFail: "‚ùå Erro √≥ subir o avatar",
            history: "‚ùå Debes iniciar sesi√≥n para descargalo historial",
            historyError: "‚ùå Erro ao descargar o historial",
            passError: "‚ùå Os contrasinais non coinciden",
            successLogin: "‚úÖ Rexistro exitoso! Agora podes iniciar sesi√≥n",
            errorLogin: "‚ùå Erro: ",
            registerError: "‚ùå Erro no rexistro",
            serverError: "‚ùå Erro de conexi√≥n co servidor",
            successProfile: "‚úÖ Perfil actualizado con √©xito",
            successChanges: "‚úÖ Configuraci√≥n do xogo gardada con √©xito",
            errorChanges: "‚ùå Erro ao gardar a configuraci√≥n do xogo",
            challenging: "Desafiando",
            requestSentSuccessfully: "‚úÖ Solicitude de amizade enviada correctamente",
            requestFailed: "‚ùå Erro ao enviar a solicitude"
        }
    },
    zh: {
        common: {
            language: '‰∏≠Êñá',
            english: 'English (Ëã±ËØ≠)',
            galician: 'Galician (Âä†Âà©Ë•ø‰∫öËØ≠)',
            chinese: '‰∏≠Êñá',
            castellano: 'Spanish (Ë•øÁè≠ÁâôËØ≠)',
            infoTitle: "‰ø°ÊÅØ",
            okButton: "ÊòéÁôΩ‰∫Ü",
            backToHome: "ËøîÂõû‰∏ªÈ°µ"
        },
        navbar: {
            home: '‰∏ªÈ°µ',
            profile: '‰∏™‰∫∫ËµÑÊñô',
            play: 'Ê∏∏Êàè',
            ranking: 'ÊéíË°åÊ¶ú',
            tournaments: 'Èî¶Ê†áËµõ',
            chat: 'ËÅä',
            friends: 'ÊúãÂèã',
            settings: 'ËÆæÁΩÆ',
            logout: 'ÁôªÂá∫'
        },
        login: {
            welcomeBack: 'Ê¨¢ËøéÂõûÊù•',
            title: 'PONG',
            subtitle: 'ËøûÊé•‰ª•Âú®ÊúÄÈ´òÊ∞¥Âπ≥‰∏äÊ∏∏Êàè„ÄÇ',
            usernameLabel: 'Áî®Êà∑Âêç',
            passwordLabel: 'ÂØÜÁ†Å',
            loginButton: 'ÁôªÂΩï',
            createAccountButton: 'ÂàõÂª∫Ë¥¶Êà∑',
            or: 'Êàñ',
            noAccountYet: 'ËøòÊ≤°ÊúâË¥¶Êà∑Ôºü'
        },
        register: {
            joinExperience: 'Âä†ÂÖ•‰ΩìÈ™å',
            title: 'Ê≥®ÂÜå',
            subtitle: 'ÂàõÂª∫ÊÇ®ÁöÑË¥¶Êà∑ÂºÄÂßãÊ∏∏Êàè„ÄÇ',
            usernameLabel: 'Áî®Êà∑Âêç',
            emailLabel: 'ÈÇÆÁÆ±',
            passwordLabel: 'ÂØÜÁ†Å',
            confirmPasswordLabel: 'Á°ÆËÆ§ÂØÜÁ†Å',
            registerButton: 'Ê≥®ÂÜå',
            alreadyHaveAccount: 'Â∑≤ÁªèÊúâË¥¶Êà∑‰∫ÜÔºü',
            loginHere: 'Âú®ËøôÈáåÁôªÂΩï',
            registerWithGoogle: '‰ΩøÁî®GoogleÊ≥®ÂÜå',
            or: 'Êàñ'
        },
        home: {
            noLiveMatches: 'ÂΩìÂâçÊ≤°ÊúâÊ≠£Âú®ËøõË°åÁöÑÊØîËµõ',
            errorLoadingMatches: 'Âä†ËΩΩÂÆûÊó∂ÊØîËµõÊó∂Âá∫Èîô',
            inProgressRound: 'ËøõË°å‰∏≠ÁöÑÂõûÂêà',
            welcomeTitle: "Ê¨¢ËøéÊù•Âà∞",
            welcomeSubtitle: "Áé∞‰ª£‰πí‰πìÁêÉÁöÑÁªàÊûÅÂπ≥Âè∞„ÄÇÁ´û‰∫â„ÄÅËøûÊé•„ÄÅË∂ÖË∂äÔºÅ",
            playNowButton: "Á´ãÂç≥Ê∏∏Êàè",
            viewTournamentsButton: "Êü•ÁúãÈî¶Ê†áËµõ",
            liveMatchesTitle: "ÂÆûÊó∂ÊØîËµõ",
            liveMatchesSubtitle: "ÂÆûÊó∂ÂÖ≥Ê≥®ÊØîËµõÂä®ÊÄÅ„ÄÇ",
            playerA: "Áé©ÂÆ∂ A",
            playerB: "Áé©ÂÆ∂ B",
            teamX: "Èòü‰ºç X",
            teamY: "Èòü‰ºç Y",
            vs: "ÂØπÊàò",
            tournamentSemifinal: "Èî¶Ê†áËµõÂçäÂÜ≥Ëµõ",
            quickMatch: "Âø´ÈÄüÊØîËµõ",
            preparingToStart: "ÂáÜÂ§áÂºÄÂßã",
            assassin: "Âà∫ÂÆ¢",
            master: "Â§ßÂ∏à",
            matchPoint: "ËµõÁÇπ",
            yourProfileTitle: "‰Ω†ÁöÑ‰∏™‰∫∫ËµÑÊñô",
            yourProfileSubtitle: "ËÆøÈóÆÊÇ®ÁöÑÁªüËÆ°Êï∞ÊçÆ„ÄÅÂéÜÂè≤ËÆ∞ÂΩïÂπ∂Ëá™ÂÆö‰πâÊÇ®ÁöÑ‰ΩìÈ™å„ÄÇ",
            globalRankingTitle: "ÂÖ®ÁêÉÊéíË°åÊ¶ú",
            globalRankingSubtitle: "ÂèëÁé∞Transcendence‰∏≠ÊúÄÂ•ΩÁöÑÁé©ÂÆ∂„ÄÇ"
        },
        profile: {
            profileTitle: "Áî®Êà∑ËµÑÊñô",
            settingsTitle: "ËÆæÁΩÆ",
            editProfileButton: "ÁºñËæëËµÑÊñô",
            uploadAvatarButton: "‰∏ä‰º†Â§¥ÂÉè",
            changePasswordButton: "Êõ¥ÊîπÂØÜÁ†Å",
            matchHistoryTitle: "ÊØîËµõÂéÜÂè≤",
            matchHistorySubtitle: "‰Ω†ÊúÄËøëÁöÑÊ∏∏Êàè",
            matchWin: "ËÉúÂà©",
            matchLoss: "Â§±Ë¥•",
            matchDraw: "Âπ≥Â±Ä",
            score: "ÂàÜÊï∞",
            date: "Êó•Êúü",
            time: "Êó∂Èó¥",
            opponent: "ÂØπÊâã",
            gameMode: "Ê∏∏ÊàèÊ®°Âºè",
            noMatches: "ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠Ê≤°ÊúâÊØîËµõ„ÄÇ",
            statsTitle: "ÁªüËÆ°Êï∞ÊçÆ",
            totalWins: "ÊÄªËÉúÂà©",
            totalLosses: "ÊÄªÂ§±Ë¥•",
            winRate: "ËÉúÁéá",
            totalGames: "ÊÄªÊ∏∏ÊàèÊï∞",
            eloRating: "ELOËØÑÁ∫ß",
            accuracy: "ÂáÜÁ°ÆÊÄß",
            mostPlayedMode: "ÊúÄÂ∏∏Áé©ÁöÑÊ®°Âºè",
            languageSetting: "ËØ≠Ë®Ä",
            notificationsSetting: "ÈÄöÁü•",
            twoFactorAuthSetting: "ÂèåÂõ†Á¥†ËÆ§ËØÅ",
            darkModeSetting: "Ê∑±Ëâ≤Ê®°Âºè",
            enable: "ÂêØÁî®",
            disable: "Á¶ÅÁî®",
            change: "Êõ¥Êîπ",
            logoutButton: "ÁôªÂá∫",
            saveChangesButton: "‰øùÂ≠òÊõ¥Êîπ",
            cancelButton: "ÂèñÊ∂à",
            confirmLogoutTitle: "ÁôªÂá∫Ôºü",
            confirmLogoutMessage: "ÊÇ®Á°ÆÂÆöË¶ÅÁôªÂá∫ÂêóÔºü",
            yesLogout: "ÊòØÔºåÁôªÂá∫",
            noCancel: "Âê¶ÔºåÂèñÊ∂à",
            customMessageTitle: "‰ø°ÊÅØ",
            okButton: "ÊòéÁôΩ‰∫Ü",
            download: "‰∏ãËΩΩÂéÜÂè≤ËÆ∞ÂΩï",
            ranking: "ÊéíÂêç",
            ELO: "ELO",
            games: "ÂØπÂ±Ä"
        },
        play: {
            selectGameMode: "ÈÄâÊã©Ê∏∏ÊàèÊ®°Âºè",
            oneVsOne: "1ÂØπ1ÁªèÂÖ∏",
            oneVsOneDescription: "‰∏éÂè¶‰∏Ä‰∏™Áé©ÂÆ∂ÁöÑÂø´ÈÄüÊØîËµõ„ÄÇ",
            tournament: "Èî¶Ê†áËµõ",
            tournamentDescription: "Â§öÁé©ÂÆ∂Á´ûËµõ„ÄÇÂç≥Â∞ÜÊé®Âá∫ÔºÅ",
            comingSoon: "Âç≥Â∞ÜÊé®Âá∫ÔºÅ",
            customGame: "Ëá™ÂÆö‰πâÊ∏∏Êàè",
            customGameDescription: "ÂàõÂª∫ÊàñÂä†ÂÖ•ÂÖ∑ÊúâÁâπÂÆöËßÑÂàôÁöÑÊ∏∏Êàè„ÄÇ",
            vsAIButton: "ÂØπÊàòAI",
            chooseModeTitle: "ÈÄâÊã©Ê∏∏ÊàèÊ®°Âºè",
            chooseModeDescription: "ÈÄâÊã©Ê∏∏ÊàèÊ®°ÂºèÂºÄÂßãÊ∏∏Êàè„ÄÇ",
            backToGame: "ËøîÂõûÊ∏∏Êàè",
            vsAIDescription: "‰∏é‰∫∫Â∑•Êô∫ËÉΩÂØπÊàò„ÄÇ",
            selectDifficulty: "ÈÄâÊã©ÈöæÂ∫¶"
        },
        ranking: {
            globalRankingTitle: "ÂÖ®ÁêÉÊéíË°åÊ¶ú",
            bestPlayers: "Ë∂ÖË∂äËÄÖ‰∏≠ÊúÄ‰ºòÁßÄÁöÑÁé©ÂÆ∂ ",
            wins: "ËÉúÂà©Ôºö",
            losses: "Â§±Ë¥•Ôºö",
            pointsAbbreviation: "ÂàÜ",
            yourCurrentPosition: "ÊÇ®ÂΩìÂâçÁöÑ‰ΩçÁΩÆÔºö",
            viewMyPositionButton: "Êü•ÁúãÊàëÁöÑ‰ΩçÁΩÆ"
        },
        friends: {
            friends: "ÊúãÂèã",
            friendsManagement: "Âú®Transcendence‰∏≠ÁÆ°ÁêÜ‰Ω†ÁöÑÊúãÂèã",
            yourFriends: "‰Ω†ÁöÑÊúãÂèã",
            sendRequests: "Ê∑ªÂä†ÊúãÂèã",
            incomingRequests: "ËØ∑Ê±Ç",
            noUsersAvailable: "Ê≤°ÊúâÁî®Êà∑",
            noRequests: "Ê≤°ÊúâËØ∑Ê±Ç",
            noFriends: "‰Ω†Ê≤°ÊúâÊúãÂèã",
            challengeButton: "ÊåëÊàò",
            sendRequestButton: "ËØ∑Ê±Ç",
            requestSent: "Â∑≤ÂèëÈÄÅ",
            sentError: "ÂèëÈÄÅËØ∑Ê±ÇÊó∂Âá∫Èîô",
            requestAccepted: "‚úÖ ËØ∑Ê±ÇÂ∑≤Êé•Âèó",
            requestRejected: "‚ùå ËØ∑Ê±ÇÂ∑≤ÊãíÁªù",
            confirmSendRequest: "Âêë",
            requestSentSuccessfully: "Â•ΩÂèãËØ∑Ê±ÇÂèëÈÄÅÊàêÂäü",
            requestFailed: "ÂèëÈÄÅËØ∑Ê±ÇÂ§±Ë¥•",
            confirmDelete: 'ÊÇ®Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™Â•ΩÂèãÂêóÔºü',
            friendDeleted: 'Â•ΩÂèãÂ∑≤ÊàêÂäüÂà†Èô§',
            deletingError: 'Âà†Èô§Â•ΩÂèãÊó∂Âá∫Èîô'
        },
        chat: {
            underConstruction: "Âª∫ËÆæ‰∏≠ÔºÅ",
            comingSoon: "ÂæàÂø´‰Ω†Â∞±ËÉΩÂú® Transcendence ‰∏≠ËÅäÂ§©‰∫Ü"
        },
        tournaments: {
            underConstruction: "Âª∫ËÆæ‰∏≠ÔºÅ",
            comingSoon: "ÂæàÂø´‰Ω†Â∞±ËÉΩÂú® Transcendence ‰∏≠ËÅäÂ§©‰∫Ü"
        },
        settings: {
            title: "ËÆæÁΩÆ",
            subtitle: "Ëá™ÂÆö‰πâÊ∏∏Êàè‰ΩìÈ™åÂπ∂ÁÆ°ÁêÜ‰Ω†ÁöÑË¥¶Êà∑",
            userAccountSectionTitle: "Áî®Êà∑Ë¥¶Êà∑",
            userAccountSectionSubtitle: "ÁÆ°ÁêÜ‰Ω†ÁöÑ‰∏™‰∫∫‰ø°ÊÅØ",
            usernameLabel: "Áî®Êà∑Âêç",
            usernameLabelPlaceholder: "‰Ω†ÁöÑÁî®Êà∑Âêç",
            emailLabel: "ÁîµÂ≠êÈÇÆÁÆ±",
            emailLabelPlaceholder: "ÁîµÂ≠êÈÇÆÁÆ±",
            changePassword: "Êõ¥ÊîπÂØÜÁ†Å",
            currentPasswordLabel: "ÂΩìÂâçÂØÜÁ†Å",
            currentPasswordPlaceholder: "ËæìÂÖ•ÂΩìÂâçÂØÜÁ†Å",
            saveChanges: "‰øùÂ≠òÊõ¥Êîπ",
            gameConfigSectionTitle: "Ê∏∏ÊàèËÆæÁΩÆ",
            gameConfigSectionSubtitle: "Ëá™ÂÆö‰πâ‰Ω†ÁöÑÊ∏∏Êàè‰ΩìÈ™å",
            newPasswordLabel: "Êñ∞ÂØÜÁ†Å",
            newPasswordPlaceholder: "ËæìÂÖ•Êñ∞ÂØÜÁ†Å",
            confirmNewPasswordLabel: "Á°ÆËÆ§Êñ∞ÂØÜÁ†Å",
            confirmNewPasswordPlaceholder: "Á°ÆËÆ§Êñ∞ÂØÜÁ†Å",
            language: "ÁïåÈù¢ËØ≠Ë®Ä",
            languageText: "ÈÄâÊã©‰Ω†ÂÅèÂ•ΩÁöÑËØ≠Ë®Ä",
            notifications: "ÈÄöÁü•",
            notificationsText: "Êé•Êî∂ÊØîËµõÈÄöÁü•",
            doubleFactor: "ÂèåÈáçË∫´‰ªΩÈ™åËØÅ",
            doubleFactorText: "ÈÄöËøáË∫´‰ªΩÈ™åËØÅÂô®Âíå‰∫åÁª¥Á†ÅËøõË°å2FA",
            difficulty: "ÈªòËÆ§ÈöæÂ∫¶",
            difficultyText: "ÂØπÊàòAIÁöÑÈªòËÆ§ÈöæÂ∫¶Á∫ßÂà´",
            dif1: "ÁÆÄÂçï",
            dif2: "ÊôÆÈÄö",
            dif3: "Âõ∞Èöæ",
            saveConfig: "‰øùÂ≠òÊ∏∏ÊàèËÆæÁΩÆ",
            moreInfo: "Êõ¥Â§ö‰ø°ÊÅØ",
            playedGames: "Â∑≤Áé©Ê∏∏Êàè",
            playedGamesText: "Âú®‰∏™‰∫∫ËµÑÊñô‰∏≠Êü•Áúã‰Ω†ÁöÑÁªüËÆ°Êï∞ÊçÆ",
            globalRanking: "ÂÖ®ÁêÉÊéíÂêç",
            globalRankingText: "‰∫âÂ§∫ÊéíË°åÊ¶úÈ¶ñ‰Ωç",
            security: "ÂÆâÂÖ®",
            securityText: "‰Ω†ÁöÑÊï∞ÊçÆÂ∑≤Ë¢´‰øùÊä§",
            saving: "‚è≥ Ê≠£Âú®‰øùÂ≠ò...",
            scanQRThenEnterCode: "‰ΩøÁî® Google Authenticator Êàñ Authy Êâ´ÊèèÊ≠§‰∫åÁª¥Á†ÅÔºåÁÑ∂ÂêéËæìÂÖ•ÁîüÊàêÁöÑÈ™åËØÅÁ†Å„ÄÇ",
            enterCodeFromApp: "ËØ∑ËæìÂÖ•Â∫îÁî®‰∏≠ÁöÑ6‰ΩçÊï∞È™åËØÅÁ†Å",
            enterCurrentPassword: "ËØ∑ËæìÂÖ•ÂΩìÂâçÂØÜÁ†Å‰ª•ÂÅúÁî®2FA",
            enterCurrent2FACode: "ËØ∑ËæìÂÖ•Ë∫´‰ªΩÈ™åËØÅÂô®ÂΩìÂâçÁîüÊàêÁöÑÈ™åËØÅÁ†Å"
        },
        alerts: {
            failGoogleLogin: "‰ΩøÁî® Google ÁôªÂΩïÊó∂Âá∫Èîô",
            enter2FACode: "ËØ∑ËæìÂÖ•È™åËØÅÂô®‰ª£Á†Å",
            twoFAEnabled: "‚úÖ ÊàêÂäüÂêØÁî®2FA",
            twoFADisabled: "üîí 2FAÂ∑≤ÂÅúÁî®",
            invalid2FACode: "‚ùå È™åËØÅÁ†ÅÊó†ÊïàÊàñÂ∑≤ËøáÊúü",
            error2FAShared: "‚ùå Â§ÑÁêÜ2FAÊó∂Âá∫Èîô",
            failRequest: "‚ùå ÊãíÁªùËØ∑Ê±ÇÊó∂Âá∫ÈîôÔºö",
            network: "‚ùå ÁΩëÁªúÈîôËØØ",
            noAccept: "‚ùå Êó†Ê≥ïÊé•Âèó",
            google: "‚ùå Google ËÆ§ËØÅÈîôËØØ",
            connection: "‚ùå ËøûÊé•ÈîôËØØ",
            failLogin: "‚ùå ÁôªÂΩïÂ§±Ë¥•",
            emptyFields: "‚ùå ËØ∑Â°´ÂÜôÊâÄÊúâÂ≠óÊÆµ",
            avatarOk: "‚úÖ Â§¥ÂÉè‰∏ä‰º†ÊàêÂäü",
            avatarFail: "‚ùå ‰∏ä‰º†Â§¥ÂÉèÂ§±Ë¥•",
            history: "‚ùå ÊÇ®ÂøÖÈ°ªÁôªÂΩïÊâçËÉΩ‰∏ãËΩΩÂéÜÂè≤ËÆ∞ÂΩï",
            historyError: "‚ùå ‰∏ãËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•",
            passError: "‚ùå ÂØÜÁ†Å‰∏çÂåπÈÖç",
            successLogin: "‚úÖ Ê≥®ÂÜåÊàêÂäüÔºÅÁé∞Âú®ÂèØ‰ª•ÁôªÂΩï",
            errorLogin: "‚ùå ÈîôËØØÔºö",
            registerError: "‚ùå Ê≥®ÂÜåÈîôËØØ",
            serverError: "‚ùå ‰∏éÊúçÂä°Âô®ËøûÊé•Âá∫Èîô",
            successProfile: "‚úÖ ‰∏™‰∫∫ËµÑÊñôÊõ¥Êñ∞ÊàêÂäü",
            successChanges: "‚úÖ Ê∏∏ÊàèËÆæÁΩÆÂ∑≤ÊàêÂäü‰øùÂ≠ò",
            errorChanges: "‚ùå ‰øùÂ≠òÊ∏∏ÊàèËÆæÁΩÆÊó∂Âá∫Èîô",
            challenging: "Ê≠£Âú®ÊåëÊàò",
            requestSentSuccessfully: "‚úÖ Â•ΩÂèãËØ∑Ê±ÇÂèëÈÄÅÊàêÂäü",
            requestFailed: "‚ùå ÂèëÈÄÅËØ∑Ê±ÇÂ§±Ë¥•"
        }
    }
};

// Variable para almacenar el idioma actual, inicializada desde localStorage o 'es' por defecto
let currentLang = localStorage.getItem('lang') || 'es';

export function getTranslation(component: string, key: string): string {
    return translations[currentLang]?.[component]?.[key] || key;
}

export function setLanguage(lang: string): void {
    if (translations[lang]) {
        currentLang = lang;
        localStorage.setItem('lang', lang);
        document.dispatchEvent(new Event('languageChanged'));
    } else {
        console.warn(`Language ${lang} not found in translations.`);
    }
}

export function getCurrentLanguage(): string {
    return currentLang;
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/utils/safariPolyfills.ts ===[0m
// src/utils/safariPolyfills.ts

/**
 * Detecta si el navegador es Safari
 */
export function isSafari(): boolean {
    return /constructor/i.test(window.HTMLElement.toString()) || 
           (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!((window as any).safari) || (typeof (window as any).safari !== 'undefined' && (window as any).safari.pushNotification));
}

/**
 * Detecta si es Safari en iOS
 */
export function isIOSSafari(): boolean {
    const ua = window.navigator.userAgent;
    const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    const webkit = !!ua.match(/WebKit/i);
    const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
    return iOSSafari;
}

/**
 * Inicializa correcciones de compatibilidad para Safari
 */
export function initSafariCompatibility(): void {
    if (isSafari() || isIOSSafari()) {
        // Evitar zoom en inputs en iOS Safari
        const inputs = document.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
            input.addEventListener('focus', () => {
                // Temporal para evitar el zoom
                const viewport = document.querySelector('meta[name=viewport]') as HTMLMetaElement;
                if (viewport) {
                    viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
                }
            });
            
            input.addEventListener('blur', () => {
                // Restaurar zoom despu√©s del focus
                const viewport = document.querySelector('meta[name=viewport]') as HTMLMetaElement;
                if (viewport) {
                    viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';
                }
            });
        });

        // Fix para la altura del viewport en Safari m√≥vil
        const setVH = () => {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        };

        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', () => {
            setTimeout(setVH, 100);
        });

        console.log('üçé Safari compatibility fixes applied');
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/utils/gameLogic.ts ===[0m
// frontend/src/utils/gameLogic.ts

export interface GameState {
  ball: { x: number; y: number; vx: number; vy: number; radius: number };
  paddles: {
    left: { x: number; y: number; width: number; height: number };
    right: { x: number; y: number; width: number; height: number };
  };
  score: { left: number; right: number };
  keys: {
    w: boolean; s: boolean;
    ArrowUp: boolean; ArrowDown: boolean
  };
  canvasWidth: number;
  canvasHeight: number;
  palaAncho: number;
  palaAlto: number;
}

export function updateGameState(gameState: GameState): GameState {
  // Update ball position
  gameState.ball.x += gameState.ball.vx;
  gameState.ball.y += gameState.ball.vy;

  // Bounce off top and bottom walls
  if (gameState.ball.y <= gameState.ball.radius || gameState.ball.y >= gameState.canvasHeight - gameState.ball.radius) {
    gameState.ball.vy *= -1;
  }

  // Collision with paddles
  const leftPaddle = gameState.paddles.left;
  const rightPaddle = gameState.paddles.right;

  if (
    gameState.ball.x <= leftPaddle.x + leftPaddle.width &&
    gameState.ball.y >= leftPaddle.y &&
    gameState.ball.y <= leftPaddle.y + leftPaddle.height &&
    gameState.ball.vx < 0
  ) {
    gameState.ball.vx *= -1;
  }

  if (
    gameState.ball.x >= rightPaddle.x &&
    gameState.ball.y >= rightPaddle.y &&
    gameState.ball.y <= rightPaddle.y + rightPaddle.height &&
    gameState.ball.vx > 0
  ) {
    gameState.ball.vx *= -1;
  }

  // Scoring
  if (gameState.ball.x < 0) {
    gameState.score.right++;
    resetBall(gameState);
  } else if (gameState.ball.x > gameState.canvasWidth) {
    gameState.score.left++;
    resetBall(gameState);
  }

  return gameState;
}

export function resetBall(gameState: GameState): void {
  gameState.ball.x = gameState.canvasWidth / 2;
  gameState.ball.y = gameState.canvasHeight / 2;
  gameState.ball.vx = Math.random() > 0.5 ? 5 : -5;
  gameState.ball.vy = (Math.random() - 0.5) * 6;
}

export function updatePaddlePosition(gameState: GameState, player: number, direction: number, speed: number): void {
  if (player === 1) {
    gameState.paddles.left.y += direction * speed;
    if (gameState.paddles.left.y < 0) {
      gameState.paddles.left.y = 0;
    }
    if (gameState.paddles.left.y > gameState.canvasHeight - gameState.paddles.left.height) {
      gameState.paddles.left.y = gameState.canvasHeight - gameState.paddles.left.height;
    }
  } else if (player === 2) {
    gameState.paddles.right.y += direction * speed;
    if (gameState.paddles.right.y < 0) {
      gameState.paddles.right.y = 0;
    }
    if (gameState.paddles.right.y > gameState.canvasHeight - gameState.paddles.right.height) {
      gameState.paddles.right.y = gameState.canvasHeight - gameState.paddles.right.height;
    }
  }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/ranking.ts ===[0m
// src/pages/ranking.ts

import { navigateTo } from '../router';
import { getTranslation } from '../i18n';
import { getCurrentUser } from '../auth';

interface RankingPlayer {
    rank: number;
    id: number;
    username: string;
    wins: number;
    losses: number;
    totalGames: number;
    elo: number;
    winRate: number;
    points: number;
}

interface UserStats {
    totalGames: number;
    wins: number;
    losses: number;
    winRate: number;
    elo: number;
    ranking: number;
}

// Funci√≥n para obtener el ranking global
async function getRankingData(): Promise<RankingPlayer[]> {
    try {
        const response = await fetch('/api/auth/ranking', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error('Error al obtener ranking:', response.status);
            return [];
        }

        return await response.json();
    } catch (error) {
        console.error('Error en la petici√≥n del ranking:', error);
        return [];
    }
}

// Funci√≥n para obtener estad√≠sticas del usuario actual
async function getUserStats(): Promise<UserStats | null> {
    const token = localStorage.getItem('jwt');
    if (!token) return null;

    try {
        const response = await fetch('/api/auth/profile/stats', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error('Error al obtener estad√≠sticas del usuario:', response.status);
            return null;
        }

        return await response.json();
    } catch (error) {
        console.error('Error en la petici√≥n de estad√≠sticas del usuario:', error);
        return null;
    }
}

export async function renderRankingPage(): Promise<void> {
    const currentUser = getCurrentUser();
    
    // Mostrar loading inicial
    const pageContent = document.getElementById('page-content') as HTMLElement;
    if (pageContent) {
        pageContent.innerHTML = `
            <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
                <div class="max-w-4xl w-full">
                    <div class="text-center mb-12">
                        <h1 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-6 text-[#ffc300] drop-shadow-md leading-tight">
                            ${getTranslation('ranking', 'globalRankingTitle')}
                        </h1>
                        <p class="text-base sm:text-lg md:text-xl text-gray-300 mb-8">
                            Cargando ranking...
                        </p>
                    </div>
                </div>
            </main>
        `;
    }

    // Obtener datos del ranking y estad√≠sticas del usuario
    const [rankingData, userStats] = await Promise.all([
        getRankingData(),
        getUserStats()
    ]);

    // Funci√≥n para obtener el color del badge seg√∫n el ranking
    function getRankBadgeColor(rank: number): string {
        switch (rank) {
            case 1: return 'bg-gradient-to-r from-yellow-400 to-yellow-600';
            case 2: return 'bg-gradient-to-r from-gray-300 to-gray-500';
            case 3: return 'bg-gradient-to-r from-orange-400 to-orange-600';
            default: return 'bg-[#003566]';
        }
    }

    // Funci√≥n para obtener el icono seg√∫n el ranking
    function getRankIcon(rank: number): string {
        switch (rank) {
            case 1: return 'üëë';
            case 2: return 'ü•à';
            case 3: return 'ü•â';
            default: return `#${rank}`;
        }
    }

    // Encontrar al usuario actual en el ranking
    const currentUserInRanking = rankingData.find(player => 
        currentUser && player.username === currentUser.username
    );

    const rankingHtml = `
        <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
            <div class="max-w-4xl w-full">
                <div class="text-center mb-12">
                    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-6 text-[#ffc300] drop-shadow-md leading-tight">
                        ${getTranslation('ranking', 'globalRankingTitle')}
                    </h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-300 mb-8">
                        ${getTranslation('ranking', 'bestPlayers')}
                    </p>
                </div>

                ${currentUser && userStats ? `
                <!-- User's Position Highlight -->
                <div class="bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-3xl p-1 mb-8">
                    <div class="bg-[#000814] rounded-3xl p-6">
                        <h2 class="text-xl font-bold text-[#ffc300] mb-4 text-center">
                            ${getTranslation('ranking', 'yourCurrentPosition')}
                        </h2>
                        <div class="flex items-center justify-between bg-[#001d3d] rounded-xl p-4 border border-[#003566]">
                            <div class="flex items-center gap-4">
                                <div class="w-12 h-12 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-full flex items-center justify-center text-[#000814] font-bold text-lg">
                                    #${userStats.ranking}
                                </div>
                                <div>
                                    <div class="font-bold text-lg">${currentUser.username}</div>
                                    <div class="text-sm text-gray-300">${getTranslation('ranking', 'wins')} ${userStats.wins} | ${getTranslation('ranking', 'losses')} ${userStats.losses}</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold text-[#ffc300]">${userStats.elo.toLocaleString()}</div>
                                <div class="text-sm text-gray-300">${getTranslation('ranking', 'pointsAbbreviation')}</div>
                            </div>
                        </div>
                    </div>
                </div>
                ` : ''}

                <!-- Global Ranking Table -->
                <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl">
                    <div class="space-y-3">
                        ${rankingData.length > 0 ? rankingData.map(player => {
                            const isCurrentUser = currentUser && player.username === currentUser.username;
                            const bgColor = isCurrentUser ? 'bg-gradient-to-r from-[#ffc300]/20 to-[#ffd60a]/20 border-[#ffc300]' : 'bg-[#001d3d] border-[#003566]';
                            const textColor = isCurrentUser ? 'text-[#ffc300]' : 'text-gray-100';
                            
                            return `
                                <div class="flex items-center justify-between p-4 ${bgColor} rounded-xl border hover:bg-opacity-70 transition-all duration-200">
                                    <div class="flex items-center gap-4">
                                        <div class="w-10 h-10 ${player.rank <= 3 ? getRankBadgeColor(player.rank) : 'bg-[#003566]'} rounded-full flex items-center justify-center font-bold text-sm">
                                            ${player.rank <= 3 ? getRankIcon(player.rank) : `#${player.rank}`}
                                        </div>
                                        <div>
                                            <div class="font-bold ${textColor}">${player.username}</div>
                                            <div class="text-sm text-gray-300">${getTranslation('ranking', 'wins')} ${player.wins} | ${getTranslation('ranking', 'losses')} ${player.losses}</div>
                                        </div>
                                    </div>
                                    <div class="text-right">
                                        <div class="text-xl font-bold ${isCurrentUser ? 'text-[#ffc300]' : 'text-[#ffd60a]'}">${player.points.toLocaleString()}</div>
                                        <div class="text-sm text-gray-300">${getTranslation('ranking', 'pointsAbbreviation')}</div>
                                    </div>
                                </div>
                            `;
                        }).join('') : `
                            <div class="text-center p-8 text-gray-400">
                                <div class="text-xl mb-2">üèÜ</div>
                                <div class="text-lg">No hay datos de ranking disponibles</div>
                                <div class="text-sm mt-2">¬°Todav√≠a nadie ha jugado partidas, an√≠mate y se el primero!</div>
                            </div>
                        `}
                    </div>
                </div>
            </div>
        </main>
        <style>
            .hover\\:bg-opacity-70:hover {
                background-opacity: 0.7;
            }
        </style>
    `;

    if (pageContent) {
        pageContent.innerHTML = rankingHtml;
    } else {
        console.error('Elemento con id "page-content" no encontrado para renderizar la p√°gina de ranking.');
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/unifiedGameAI.ts ===[0m
import { UnifiedGameRenderer, GameMode } from '../components/UnifiedGameRenderer';
import { getCurrentUser } from '../auth';
import { navigateTo } from '../router';

export function renderUnifiedGameAI(): void {
  const pageContent = document.getElementById('page-content');

  if (!pageContent) {
    console.error('No se encontr√≥ el contenedor de contenido de la p√°gina para "/unified-game-ai".');
    return;
  }

  // Interfaz inicial para seleccionar la dificultad de la IA
  pageContent.innerHTML = `
    <div class="w-full max-w-4xl mx-auto text-center">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-white mb-4">ü§ñ Juego vs Inteligencia Artificial</h1>
        <p class="text-lg text-gray-300 mb-6">Selecciona el nivel de desaf√≠o que prefieras</p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <!-- Dificultad F√°cil -->
        <div class="bg-green-800 rounded-lg p-6 hover:bg-green-700 transition-colors cursor-pointer transform hover:scale-105" 
             id="easy-card">
          <div class="text-6xl mb-4">üòä</div>
          <h2 class="text-2xl font-bold text-green-400 mb-3">F√°cil</h2>
          <p class="text-gray-300 mb-4">
            Perfecto para principiantes. La IA reacciona lentamente y tiene margen de error.
          </p>
          <div class="text-sm text-gray-400 mb-4">
            <div>üêå IA con velocidad reducida</div>
            <div>üéØ Gran margen de error (40px)</div>
            <div>üìö Ideal para aprender</div>
          </div>
          <button class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded transition-colors">
            Jugar F√°cil
          </button>
        </div>

        <!-- Dificultad Media -->
        <div class="bg-yellow-800 rounded-lg p-6 hover:bg-yellow-700 transition-colors cursor-pointer transform hover:scale-105" 
             id="medium-card">
          <div class="text-6xl mb-4">üòê</div>
          <h2 class="text-2xl font-bold text-yellow-400 mb-3">Medio</h2>
          <p class="text-gray-300 mb-4">
            Un desaf√≠o equilibrado. La IA es m√°s inteligente pero a√∫n tiene errores ocasionales.
          </p>
          <div class="text-sm text-gray-400 mb-4">
            <div>‚öñÔ∏è IA equilibrada</div>
            <div>üéØ Margen medio de error (20px)</div>
            <div>üèÜ Desaf√≠o justo</div>
          </div>
          <button class="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-4 rounded transition-colors">
            Jugar Medio
          </button>
        </div>

        <!-- Dificultad Dif√≠cil -->
        <div class="bg-red-800 rounded-lg p-6 hover:bg-red-700 transition-colors cursor-pointer transform hover:scale-105" 
             id="hard-card">
          <div class="text-6xl mb-4">üò§</div>
          <h2 class="text-2xl font-bold text-red-400 mb-3">Dif√≠cil</h2>
          <p class="text-gray-300 mb-4">
            Solo para expertos. La IA es casi perfecta y reacciona muy r√°pidamente.
          </p>
          <div class="text-sm text-gray-400 mb-4">
            <div>üöÄ IA muy r√°pida</div>
            <div>üéØ Margen m√≠nimo de error (5px)</div>
            <div>üíÄ M√°ximo desaf√≠o</div>
          </div>
          <button class="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-4 rounded transition-colors">
            Jugar Dif√≠cil
          </button>
        </div>
      </div>

      <!-- Bot√≥n de regreso -->
      <div class="text-center">
        <button id="back-button" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded transition-colors">
          ‚Üê Volver al Men√∫ Principal
        </button>
      </div>
    </div>
  `;

  // Event listeners para las tarjetas de dificultad
  document.getElementById('easy-card')?.addEventListener('click', () => startGameWithDifficulty('easy'));
  document.getElementById('medium-card')?.addEventListener('click', () => startGameWithDifficulty('medium'));
  document.getElementById('hard-card')?.addEventListener('click', () => startGameWithDifficulty('hard'));

  // Event listener para el bot√≥n de regreso
  document.getElementById('back-button')?.addEventListener('click', () => {
    navigateTo('/play');
  });
}

function startGameWithDifficulty(difficulty: 'easy' | 'medium' | 'hard'): void {
  const pageContent = document.getElementById('page-content');

  if (!pageContent) {
    console.error('No se encontr√≥ el contenedor de contenido de la p√°gina para iniciar el juego.');
    return;
  }

  // Configurar la interfaz de juego
  pageContent.innerHTML = `
    <div class="w-full max-w-6xl mx-auto">
      <!-- Header del juego -->
      <div class="text-center mb-6">
        <h1 class="text-3xl font-bold text-white mb-2">ü§ñ vs IA - Dificultad ${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}</h1>
        <p class="text-gray-300">¬°Enfr√©ntate a la inteligencia artificial!</p>
      </div>

      <!-- Informaci√≥n de controles -->
      <div class="bg-gray-800 rounded-lg p-4 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="text-center">
            <h3 class="text-lg font-bold text-green-400 mb-2">üéÆ Jugador (Izquierda)</h3>
            <div class="bg-green-600 text-white rounded-lg p-3">
              <div class="text-xl font-bold mb-2">Controles:</div>
              <div>‚¨ÜÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">W</kbd> - Subir</div>
              <div>‚¨áÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">S</kbd> - Bajar</div>
            </div>
          </div>
          <div class="text-center">
            <h3 class="text-lg font-bold text-purple-400 mb-2">ü§ñ IA (Derecha)</h3>
            <div class="bg-purple-600 text-white rounded-lg p-3">
              <div class="text-xl font-bold mb-2">Caracter√≠sticas:</div>
              <div id="ai-info">
                ${getAIDescription(difficulty)}
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- √Årea de juego -->
      <div class="bg-black rounded-lg p-4 flex justify-center">
        <canvas id="game-canvas" width="800" height="600" class="border-2 border-white rounded"></canvas>
      </div>

      <!-- Informaci√≥n del juego -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
        <div id="player-info" class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-lg font-bold text-green-400 mb-2">üìä Informaci√≥n del Juego</h3>
          <div class="space-y-2 text-sm">
            <div>üèÜ Primer jugador en llegar a <span class="font-bold text-yellow-400">5 puntos</span> gana</div>
            <div>‚ö° Las f√≠sicas se aceleran con cada rebote</div>
            <div>üéØ √Ångulo de rebote basado en el punto de contacto</div>
          </div>
        </div>
        <div id="score-display" class="bg-gray-800 rounded-lg p-4 text-center">
          <h3 class="text-lg font-bold text-purple-400 mb-4">‚öΩ Marcador</h3>
          <div class="flex justify-between items-center">
            <div class="text-center">
              <div class="text-3xl font-bold text-green-400" id="score-left">0</div>
              <div class="text-sm text-gray-400">Jugador</div>
            </div>
            <div class="text-2xl font-bold text-white">-</div>
            <div class="text-center">
              <div class="text-3xl font-bold text-purple-400" id="score-right">0</div>
              <div class="text-sm text-gray-400">IA</div>
            </div>
          </div>
        </div>
        <div id="game-status" class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-lg font-bold text-blue-400 mb-2">üéÆ Estado del Juego</h3>
          <div id="status-message" class="text-sm text-gray-300">Preparando juego...</div>
          <div id="rally-counter" class="text-xs text-gray-500 mt-2">Rebotes: 0</div>
        </div>
      </div>

      <!-- Bot√≥n de regreso -->
      <div class="text-center mt-6">
        <button id="back-button" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded transition-colors">
          ‚Üê Volver al Selector de Dificultad
        </button>
      </div>
    </div>
  `;

  // Configurar el juego
  setupAIGame(difficulty);
}

function setupAIGame(difficulty: 'easy' | 'medium' | 'hard'): void {
  const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;
  const currentUser = getCurrentUser();
  
  if (!canvas) {
    console.error('No se encontr√≥ el canvas del juego');
    return;
  }

  // Crear instancia del juego
  const game = new UnifiedGameRenderer(canvas, 'ai');
  
  // Configurar dificultad de la IA
  game.setAIDifficulty(difficulty);
  
  // Set up player info
  const playerName = currentUser?.username || 'Jugador';
  const difficultyNames = {
    'easy': 'IA F√°cil',
    'medium': 'IA Media', 
    'hard': 'IA Dif√≠cil'
  };

  const player1Info = {
    numero: 1,
    displayName: playerName,
    username: currentUser?.username || 'player',
    controls: 'W/S'
  };

  const player2Info = {
    numero: 2,
    displayName: difficultyNames[difficulty],
    username: 'ai',
    controls: 'Autom√°tico'
  };

  game.setPlayerInfo(player1Info, player2Info);
  
  // Configurar callbacks del juego
  game.setCallbacks({
    onScoreUpdate: (score) => {
      const leftScore = document.getElementById('score-left');
      const rightScore = document.getElementById('score-right');
      if (leftScore) leftScore.textContent = score.left.toString();
      if (rightScore) rightScore.textContent = score.right.toString();
    },
    onGameEnd: (winner, finalScore) => {
      const statusMsg = document.getElementById('status-message');
      if (statusMsg) {
        const isPlayerWinner = winner === playerName;
        statusMsg.innerHTML = `
          <div class="${isPlayerWinner ? 'text-green-400' : 'text-red-400'} font-bold">
            ${isPlayerWinner ? 'üéâ' : 'üò¢'} ${winner} ha ganado!
          </div>
          <div class="text-sm text-gray-400 mt-1">Resultado final: ${finalScore.left} - ${finalScore.right}</div>
          <button onclick="location.reload()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mt-2 text-sm">
            üîÑ Jugar de Nuevo
          </button>
        `;
      }
    },
    onStatusUpdate: (status) => {
      const statusMsg = document.getElementById('status-message');
      if (statusMsg) statusMsg.textContent = status;
    },
    onGameStateUpdate: (gameState) => {
      const rallyCounter = document.getElementById('rally-counter');
      if (rallyCounter) {
        rallyCounter.textContent = `Rebotes: ${gameState.rallieCount || 0}`;
      }
    }
  });

  // Iniciar cuenta atr√°s autom√°ticamente
  game.startCountdown();
  
  // Setup back button
  const backButton = document.getElementById('back-button');
  backButton?.addEventListener('click', () => {
    game.cleanup();
    renderUnifiedGameAI(); // Volver al selector de dificultad
  });
  
  // Cleanup al salir de la p√°gina
  window.addEventListener('beforeunload', () => {
    game.cleanup();
  });
}

function getAIDescription(difficulty: 'easy' | 'medium' | 'hard'): string {
  const descriptions = {
    'easy': 'üêå Velocidad: Lenta<br>üéØ Precisi√≥n: Baja<br>üìö Ideal para aprender',
    'medium': '‚öñÔ∏è Velocidad: Media<br>üéØ Precisi√≥n: Media<br>üèÜ Desaf√≠o equilibrado',
    'hard': 'üöÄ Velocidad: Muy alta<br>üéØ Precisi√≥n: Muy alta<br>üíÄ M√°ximo desaf√≠o'
  };
  
  return descriptions[difficulty];
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/settings.ts ===[0m
// src/pages/settings.ts

import { navigateTo } from '../router';
import { getTranslation } from '../i18n';
import { getCurrentUser, getSetting, setSetting, applyUserSettings, fetchUserProfile } from '../auth';

interface UserSettings {
    language: string;
    notifications: string;
    doubleFactor: string;
    game_difficulty: string;
}

document.addEventListener('DOMContentLoaded', async () => {
  await applyUserSettings();

  // Obtiene datos del usuario (username, email)
  const user = await fetchUserProfile();
  if (user) {
    const usernameInput = document.querySelector<HTMLInputElement>('#username');
    const emailInput = document.querySelector<HTMLInputElement>('#email');
    if (usernameInput) usernameInput.value = user.username;
    if (emailInput) emailInput.value = user.email;
  }

  // Cargar configuraci√≥n del juego desde localStorage
  const language = getSetting('language') || 'es';
  const notifications = getSetting('notifications') || 'true';
  const doubleFactor = getSetting('doubleFactor') || 'true';
  const game_difficulty = getSetting('game_difficulty') || 'normal';
});

// Funci√≥n para obtener configuraciones del usuario
async function getUserSettings(): Promise<UserSettings | null> {
    const token = localStorage.getItem('jwt');
    if (!token) return null;

    try {
        const response = await fetch('/api/auth/settings/config', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error('Error al obtener configuraciones:', response.status);
            return null;
        }

        return await response.json();
    } catch (error) {
        console.error('Error en la petici√≥n de configuraciones:', error);
        return null;
    }
}

// Funci√≥n para actualizar configuraciones del usuario
async function updateUserSettings(settings: UserSettings): Promise<boolean> {
    const token = localStorage.getItem('jwt');
    if (!token) return false;

    try {
        const response = await fetch('/api/auth/settings/config', {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
        });

        if (!response.ok) {
            console.error('Error al actualizar configuraciones:', response.status);
            return false;
        }

        return true;
    } catch (error) {
        console.error('Error en la petici√≥n de actualizaci√≥n:', error);
        return false;
    }
}

// Funci√≥n para actualizar perfil del usuario
async function updateUserProfile(profileData: any): Promise<{ success: boolean; message: string; user?: any }> {
    const token = localStorage.getItem('jwt');
    if (!token) return { success: false, message: 'No autenticado' };

    try {
        const response = await fetch('/api/auth/settings/user_data', {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(profileData)
        });

        const result = await response.json();
        
        if (!response.ok) {
            return { success: false, message: result.message || 'Error al actualizar perfil' };
        }

        return { success: true, message: result.message, user: result.user };
    } catch (error) {
        console.error('Error en la petici√≥n de actualizaci√≥n de perfil:', error);
        return { success: false, message: 'Error de conexi√≥n' };
    }
}

export async function renderSettingsPage(): Promise<void> {
    const user = getCurrentUser();
    
    if (!user) {
        navigateTo('/login');
        return;
    }

    // Mostrar loading inicial
    const pageContent = document.getElementById('page-content') as HTMLElement;
    if (pageContent) {
        pageContent.innerHTML = `
            <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
                <div class="max-w-6xl w-full">
                    <div class="text-center mb-12">
                        <h1 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-6 text-[#ffc300] drop-shadow-md leading-tight">
                            ‚öôÔ∏è Configuraci√≥n
                        </h1>
                        <p class="text-base sm:text-lg md:text-xl text-gray-300 mb-8">
                            Cargando configuraciones...
                        </p>
                    </div>
                </div>
            </main>
        `;
    }

    // Obtener configuraciones del usuario
    const userSettings = await getUserSettings();
    const defaultSettings: UserSettings = {
        language: 'es',
        notifications: 'true',
        doubleFactor: 'false',
        game_difficulty: 'normal'
    };

    const settings = userSettings || defaultSettings;
    
    const settingsHtml = `
        <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
            <div class="max-w-6xl w-full">
                <!-- Header -->
                <div class="text-center mb-12">
                    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-6 text-[#ffc300] drop-shadow-md leading-tight">
                        ‚öôÔ∏è ${getTranslation('settings', 'title')}
                    </h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-300 mb-8">
                        ${getTranslation('settings', 'subtitle')}
                    </p>
                </div>

                <!-- Settings Grid -->
                <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
                    <!-- Account Settings -->
                    <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-8 border border-[#003566] shadow-2xl">
                        <div class="flex items-center gap-4 mb-8">
                            <div class="w-16 h-16 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-full flex items-center justify-center">
                                <span class="text-2xl">üë§</span>
                            </div>
                            <div>
                                <h2 class="text-2xl font-display font-bold text-[#ffc300]">
                                    ${getTranslation('settings', 'userAccountSectionTitle')}
                                </h2>
                                <p class="text-gray-300">${getTranslation('settings', 'userAccountSectionSubtitle')}</p>
                            </div>
                        </div>
                        
                        <form id="profile-form" class="space-y-6">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-300">
                                    üìù ${getTranslation('settings', 'usernameLabel')}
                                </label>
                                <input type="text" id="username" value="${user.username}" 
                                       class="w-full px-4 py-3 bg-[#001d3d] border border-[#003566] rounded-xl text-gray-100 focus:outline-none focus:border-[#ffc300] focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200 placeholder-gray-400"
                                       placeholder="${getTranslation('settings', 'usernameLabelPlaceholder')}">
                            </div>
                            
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-300">
                                    üìß ${getTranslation('settings', 'emailLabel')}
                                </label>
                                <input type="email" id="email" value="${user.email}" 
                                       class="w-full px-4 py-3 bg-[#001d3d] border border-[#003566] rounded-xl text-gray-100 focus:outline-none focus:border-[#ffc300] focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200 placeholder-gray-400"
                                       placeholder="${getTranslation('settings', 'emailLabelPlaceholder')}">
                            </div>
                            
                            <div class="border-t border-[#003566] pt-6">
                                <h3 class="text-lg font-semibold text-[#ffc300] mb-4">üîí ${getTranslation('settings', 'changePassword')}</h3>
                                
                                <div class="space-y-4">
                                    <div class="space-y-2">
                                        <label class="block text-sm font-medium text-gray-300">
                                            ${getTranslation('settings', 'currentPasswordLabel')}
                                        </label>
                                        <input type="password" id="current-password" 
                                               class="w-full px-4 py-3 bg-[#001d3d] border border-[#003566] rounded-xl text-gray-100 focus:outline-none focus:border-[#ffc300] focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200 placeholder-gray-400"
                                               placeholder="${getTranslation('settings', 'currentPasswordPlaceholder')}">
                                    </div>
                                    
                                    <div class="space-y-2">
                                        <label class="block text-sm font-medium text-gray-300">
                                            ${getTranslation('settings', 'newPasswordLabel')}
                                        </label>
                                        <input type="password" id="new-password" 
                                               class="w-full px-4 py-3 bg-[#001d3d] border border-[#003566] rounded-xl text-gray-100 focus:outline-none focus:border-[#ffc300] focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200 placeholder-gray-400"
                                               placeholder="${getTranslation('settings', 'newPasswordPlaceholder')}">
                                    </div>
                                </div>
                            </div>
                        </form>
                        
                        <div class="flex flex-col sm:flex-row gap-4 mt-8">
                            <button id="save-profile-btn" class="flex-1 py-3 px-6 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] text-[#000814] font-bold rounded-xl hover:from-[#ffd60a] hover:to-[#ffc300] transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg">
                                üíæ ${getTranslation('settings', 'saveChanges')}
                            </button>
                        </div>
                    </div>

                    <!-- Game Settings -->
                    <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-8 border border-[#003566] shadow-2xl">
                        <div class="flex items-center gap-4 mb-8">
                            <div class="w-16 h-16 bg-gradient-to-r from-[#003566] to-[#001d3d] rounded-full flex items-center justify-center border-2 border-[#ffc300]">
                                <span class="text-2xl">üéÆ</span>
                            </div>
                            <div>
                                <h2 class="text-2xl font-display font-bold text-[#ffc300]">
                                    ${getTranslation('settings', 'gameConfigSectionTitle')}
                                </h2>
                                <p class="text-gray-300">${getTranslation('settings', 'gameConfigSectionSubtitle')}</p>
                            </div>
                        </div>
                        
                        <form id="game-settings-form" class="space-y-6">
                            <!-- Language Setting -->
                            <div class="p-6 bg-[#001d3d] rounded-xl border border-[#003566] hover:border-[#ffc300] transition-all duration-300">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-4">
                                        <div class="w-12 h-12 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-lg flex items-center justify-center">
                                            <span class="text-lg">üåê</span>
                                        </div>
                                        <div>
                                            <div class="font-semibold text-gray-100">${getTranslation('settings', 'language')}</div>
                                            <div class="text-sm text-gray-400">${getTranslation('settings', 'languageText')}</div>
                                        </div>
                                    </div>
                                    <select id="language" class="bg-[#003566] text-gray-100 px-4 py-2 rounded-lg border border-[#ffc300] focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200">
                                        <option value="gl" ${settings.language === 'gl' ? 'selected' : ''}>GL Galego</option>
                                        <option value="es" ${settings.language === 'es' ? 'selected' : ''}>ES Castellano</option>
                                        <option value="en" ${settings.language === 'en' ? 'selected' : ''}>EN English</option>
                                        <option value="zh" ${settings.language === 'zh' ? 'selected' : ''}>ZH ‰∏≠Êñá</option>
                                    </select>
                                </div>
                            </div>
                            
                            <!-- Notifications -->
                            <div class="p-6 bg-[#001d3d] rounded-xl border border-[#003566] hover:border-[#ffc300] transition-all duration-300">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-4">
                                        <div class="w-12 h-12 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-lg flex items-center justify-center">
                                            <span class="text-lg">üîî</span>
                                        </div>
                                        <div>
                                            <div class="font-semibold text-gray-100">${getTranslation('settings', 'notifications')}</div>
                                            <div class="text-sm text-gray-400">${getTranslation('settings', 'notificationsText')}</div>
                                        </div>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="notifications" ${['1', 'true', true, 1].includes(settings.notifications) ? 'checked' : ''} class="sr-only peer">
                                        <div class="w-14 h-8 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[#ffc300] peer-focus:ring-opacity-50 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-7 after:w-7 after:transition-all peer-checked:bg-[#ffc300] shadow-lg"></div>
                                    </label>
                                </div>
                            </div>
                            
                            <!-- Double Factor -->
                            <div class="p-6 bg-[#001d3d] rounded-xl border border-[#003566] hover:border-[#ffc300] transition-all duration-300">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-4">
                                        <div class="w-12 h-12 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-lg flex items-center justify-center">
                                            <span class="text-lg">üîä</span>
                                        </div>
                                        <div>
                                            <div class="font-semibold text-gray-100">${getTranslation('settings', 'doubleFactor')}</div>
                                            <div class="text-sm text-gray-400">${getTranslation('settings', 'doubleFactorText')}</div>
                                        </div>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="double-factor" ${['1', 'true', true, 1].includes(settings.doubleFactor) ? 'checked' : ''} class="sr-only peer">
                                        <div class="w-14 h-8 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[#ffc300] peer-focus:ring-opacity-50 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-7 after:w-7 after:transition-all peer-checked:bg-[#ffc300] shadow-lg"></div>
                                    </label>
                                </div>
                            </div>
                            
                            <!-- Game Difficulty -->
                            <div class="p-6 bg-[#001d3d] rounded-xl border border-[#003566] hover:border-[#ffc300] transition-all duration-300">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-4">
                                        <div class="w-12 h-12 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] rounded-lg flex items-center justify-center">
                                            <span class="text-lg">üéØ</span>
                                        </div>
                                        <div>
                                            <div class="font-semibold text-gray-100">${getTranslation('settings', 'difficulty')}</div>
                                            <div class="text-sm text-gray-400">${getTranslation('settings', 'difficultyText')}</div>
                                        </div>
                                    </div>
                                    <select id="game-difficulty" class="bg-[#003566] text-gray-100 px-4 py-2 rounded-lg border border-[#ffc300] focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-50 transition-all duration-200">
                                        <option value="easy" ${settings.game_difficulty === 'easy' ? 'selected' : ''}>üü¢ ${getTranslation('settings', 'dif1')}</option>
                                        <option value="normal" ${settings.game_difficulty === 'normal' ? 'selected' : ''}>üü° ${getTranslation('settings', 'dif2')}</option>
                                        <option value="hard" ${settings.game_difficulty === 'hard' ? 'selected' : ''}>üî¥ ${getTranslation('settings', 'dif3')}</option>
                                    </select>
                                </div>
                            </div>
                        </form>
                        
                        <button id="save-game-settings-btn" class="w-full mt-8 py-3 px-6 bg-gradient-to-r from-[#003566] to-[#001d3d] text-[#ffc300] font-bold rounded-xl border-2 border-[#ffc300] hover:bg-[#ffc300] hover:text-[#000814] transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg">
                            üéÆ ${getTranslation('settings', 'saveConfig')}
                        </button>
                    </div>
                </div>

                <!-- Additional Info Section -->
                <div class="mt-12 bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-8 border border-[#003566] shadow-2xl">
                    <div class="text-center">
                        <h3 class="text-2xl font-display font-bold text-[#ffc300] mb-4">
                            ‚ÑπÔ∏è ${getTranslation('settings', 'moreInfo')}
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-gray-300">
                            <div class="p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                                <div class="text-2xl mb-2">üé≤</div>
                                <div class="font-semibold">${getTranslation('settings', 'playedGames')}s</div>
                                <div class="text-sm text-gray-400">${getTranslation('settings', 'playedGamesText')}</div>
                            </div>
                            <div class="p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                                <div class="text-2xl mb-2">üèÜ</div>
                                <div class="font-semibold">${getTranslation('settings', 'globalRanking')}</div>
                                <div class="text-sm text-gray-400">${getTranslation('settings', 'globalRankingText')}</div>
                            </div>
                            <div class="p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                                <div class="text-2xl mb-2">üîí</div>
                                <div class="font-semibold">${getTranslation('settings', 'security')}</div>
                                <div class="text-sm text-gray-400">${getTranslation('settings', 'securityText')}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    `;

    if (pageContent) {
        pageContent.innerHTML = settingsHtml;
        setupEventListeners();
    } else {
        console.error('Elemento con id "page-content" no encontrado para renderizar la p√°gina de configuraci√≥n.');
    }
}

function setupEventListeners(): void {
    // Bot√≥n para guardar perfil
    const saveProfileBtn = document.getElementById('save-profile-btn') as HTMLButtonElement;
    saveProfileBtn?.addEventListener('click', async (event) => {
        event.preventDefault();
        
        const username = (document.getElementById('username') as HTMLInputElement).value;
        const email = (document.getElementById('email') as HTMLInputElement).value;
        const currentPassword = (document.getElementById('current-password') as HTMLInputElement).value;
        const newPassword = (document.getElementById('new-password') as HTMLInputElement).value;

        const profileData: any = { username, email };
        
        if (currentPassword || newPassword) {
        profileData.current_password = currentPassword;
        profileData.new_password = newPassword;
}

        saveProfileBtn.disabled = true;
        saveProfileBtn.innerHTML = getTranslation('settings', 'saving');

        const result = await updateUserProfile(profileData);
        
        if (result.success) {
            alert(getTranslation('alerts', 'successProfile'));
            // Limpiar campos de contrase√±a
            (document.getElementById('current-password') as HTMLInputElement).value = '';
            (document.getElementById('new-password') as HTMLInputElement).value = '';
        } else {
            alert(`${getTranslation('alerts', 'errorLogin')}${result.message}`);
        }

        saveProfileBtn.disabled = false;
        saveProfileBtn.innerHTML = getTranslation('settings', 'saveChanges');
    });

    // Bot√≥n para guardar configuraciones del juego
    const saveGameSettingsBtn = document.getElementById('save-game-settings-btn') as HTMLButtonElement;
    saveGameSettingsBtn?.addEventListener('click', async (event) => {
        event.preventDefault();
        
        const language = (document.getElementById('language') as HTMLSelectElement).value;
        const notifications = (document.getElementById('notifications') as HTMLInputElement).checked ? 'true' : 'false';
        const doubleFactor = (document.getElementById('double-factor') as HTMLInputElement).checked ? 'true' : 'false';
        const gameDifficulty = (document.getElementById('game-difficulty') as HTMLSelectElement).value;

        const gameSettings: UserSettings = {
            language,
            notifications,
            doubleFactor,
            game_difficulty: gameDifficulty
        };

        saveGameSettingsBtn.disabled = true;
        saveGameSettingsBtn.innerHTML = getTranslation('settings', 'saving');

        const success = await updateUserSettings(gameSettings);
        
        if (success) {
            alert(getTranslation('alerts', 'successChanges'));
            
            // Aplicar configuraciones localmente
            setSetting('language', language);
            setSetting('notifications', notifications);
            setSetting('doubleFactor', doubleFactor);
            setSetting('game_difficulty', gameDifficulty);
            
            // Cambiar idioma si es necesario
            if (language) {
                localStorage.setItem('language', language);
                window.dispatchEvent(new CustomEvent('languageChanged', { detail: language }));
            }
            
        } else {
            alert(getTranslation('alerts', 'errorChanges'));
        }

        saveGameSettingsBtn.disabled = false;
        saveGameSettingsBtn.innerHTML = 'üéÆ Guardar Configuraci√≥n del Juego';
    });
    
    // === Manejo del toggle de 2FA ===
    const doubleFactorToggle = document.getElementById('double-factor') as HTMLInputElement;
    if (doubleFactorToggle) {
        doubleFactorToggle.addEventListener('change', async (event) => {
        const enabled = doubleFactorToggle.checked;
        const confirmed = enabled
            ? await setupTwoFactor()   // Activar: gu√≠a con QR + c√≥digo
            : await disableTwoFactor(); // Desactivar: pide pwd + c√≥digo

        if (!confirmed) {
            // Revertir el toggle si falla
            doubleFactorToggle.checked = !enabled;
        } else {
            // Si fue exitoso, guarda el estado en localStorage
            setSetting('doubleFactor', enabled ? 'true' : 'false');
        }
        });
    }
}

// Modal HTML para c√≥digo QR
function showQRModal(qrCodeDataUrl: string, onConfirm: (code: string) => void) {
  // Si ya existe un modal, no crear otro
  if (document.getElementById('qr-modal')) return;

  const modal = document.createElement('div');
  modal.id = 'qr-modal';
  modal.style.position = 'fixed';
  modal.style.zIndex = '9999';
  modal.style.left = '0';
  modal.style.top = '0';
  modal.style.width = '100%';
  modal.style.height = '100%';
  modal.style.overflow = 'auto';
  modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
  modal.style.display = 'flex';
  modal.style.justifyContent = 'center';
  modal.style.alignItems = 'center';

  modal.innerHTML = `
    <div style="background: #001d3d; padding: 2rem; border-radius: 1rem; text-align: center; max-width: 300px; width: 90%; color: white;">
      <h3 style="color: #ffc300; margin-bottom: 1rem;">${getTranslation('settings', 'setup2FA')}</h3>
      <p>${getTranslation('settings', 'scanQRThenEnterCode')}</p>
      <img src="${qrCodeDataUrl}" alt="QR Code" style="max-width: 200px; margin: 1rem auto; display: block;">
      <p>${getTranslation('settings', 'enterCodeFromApp')}</p>
      <input id="2fa-code-input" type="text" inputmode="numeric" maxlength="6" style="
        padding: 0.5rem;
        margin: 0.5rem 0;
        width: 100%;
        border: 1px solid #003566;
        border-radius: 0.5rem;
        background: #000814;
        color: white;
        text-align: center;
        font-size: 1.2rem;
      " placeholder="000000">
      <div style="margin-top: 1rem; display: flex; gap: 1rem; justify-content: center;">
        <button id="cancel-btn" style="
          padding: 0.5rem 1rem;
          background: #6b7280;
          color: white;
          border: none;
          border-radius: 0.5rem;
          cursor: pointer;
        ">${getTranslation('common', 'cancel')}</button>
        <button id="confirm-btn" style="
          padding: 0.5rem 1rem;
          background: #ffc300;
          color: #000814;
          font-weight: bold;
          border: none;
          border-radius: 0.5rem;
          cursor: pointer;
        ">${getTranslation('common', 'confirm')}</button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);

  const input = document.getElementById('2fa-code-input') as HTMLInputElement;
  const confirmBtn = document.getElementById('confirm-btn');
  const cancelBtn = document.getElementById('cancel-btn');

  const close = () => modal.remove();

  cancelBtn?.addEventListener('click', close);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) close();
  });

  confirmBtn?.addEventListener('click', () => {
    const code = input.value.trim();
    if (code.length === 6 && /^\d+$/.test(code)) {
      close();
      onConfirm(code);
    } else {
      alert(getTranslation('alerts', 'invalid2FACode'));
    }
  });

  input?.focus();
}

// Activar 2FA
async function setupTwoFactor(): Promise<boolean> {
  try {
    const response = await fetch('/api/auth/2fa/setup', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('jwt')}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const data = await response.json().catch(() => ({}));
      alert(data.message || getTranslation('alerts', 'error2FAShared'));
      return false;
    }

    const data = await response.json();
    const qrCodeDataUrl = data.qr_code;

    // ‚úÖ Usar el modal, NO prompt()
    return new Promise<boolean>((resolve) => {
      showQRModal(qrCodeDataUrl, async (code) => {
        try {
          const verifyRes = await fetch('/api/auth/2fa/confirm', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('jwt')}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ code })
          });

          const verifyData = await verifyRes.json();

          if (verifyRes.ok) {
            alert(getTranslation('alerts', 'twoFAEnabled'));
            resolve(true);
          } else {
            alert(verifyData.message || getTranslation('alerts', 'invalid2FACode'));
            resolve(false);
          }
        } catch (err) {
          console.error('Error al confirmar 2FA:', err);
          alert(getTranslation('alerts', 'connection'));
          resolve(false);
        }
      });
    });
  } catch (err) {
    console.error('Error configurando 2FA:', err);
    alert(getTranslation('alerts', 'connection'));
    return false;
  }
}

// Desactivar 2FA
async function disableTwoFactor(): Promise<boolean> {
    const password = prompt(getTranslation('settings', 'enterCurrentPassword'));
    if (!password) return false;

    const code = prompt(getTranslation('settings', 'enterCurrent2FACode'));
    if (!code) return false;

    try {
        const response = await fetch('/api/auth/2fa/disable', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('jwt')}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ password, code })
        });

        const data = await response.json();

        if (response.ok) {
        alert(getTranslation('alerts', 'twoFADisabled'));
        return true;
        } else {
        alert(data.message || getTranslation('alerts', 'error2FAShared'));
        return false;
        }
    } catch (err) {
        console.error('Error desactivando 2FA:', err);
        alert(getTranslation('alerts', 'connection'));
        return false;
    }
}[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/gameSpectator.ts ===[0m
import { navigateTo } from '../router';

let spectatorSocket: WebSocket | null = null;
let currentGameId: string | null = null;
let refreshInterval: number | null = null;

export function renderGameSpectator(): void {
  const content = document.getElementById('page-content');

  if (!content) {
    console.error('No se encontr√≥ el contenedor principal para renderizar el observador de juego.');
    return;
  }

  content.innerHTML = `
    <div class="w-full max-w-6xl mx-auto p-8">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-red-400 to-purple-600 bg-clip-text text-transparent">
          üëÅÔ∏è Modo Espectador
        </h1>
        <p class="text-lg text-gray-300">Observa partidas en vivo y aprende de otros jugadores</p>
      </div>
      
      <!-- Secci√≥n Partidas en Vivo -->
      <div class="bg-gradient-to-r from-red-800 to-red-900 rounded-lg p-6 mb-8 border-2 border-red-600">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-red-300">üî¥ Partidas en Vivo</h2>
          <div class="flex gap-3">
            <button id="refresh-live-games" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition-all duration-200 transform hover:scale-105">
              üîÑ Actualizar
            </button>
            <div class="flex items-center">
              <input type="checkbox" id="auto-refresh-spectator" class="mr-2" checked>
              <label for="auto-refresh-spectator" class="text-red-200 text-sm">Auto-actualizar</label>
            </div>
          </div>
        </div>
        
        <div id="live-games-container" class="space-y-4">
          <div class="text-center py-8">
            <div class="animate-spin inline-block w-8 h-8 border-4 border-red-500 border-t-transparent rounded-full mb-4"></div>
            <p class="text-red-300">üîÑ Buscando partidas en vivo...</p>
          </div>
        </div>
      </div>

      <!-- Visor de Partida -->
      <div id="game-viewer" class="bg-gradient-to-r from-purple-800 to-purple-900 rounded-lg p-6 mb-8 border-2 border-purple-600 hidden">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold text-purple-300">üéÆ Observando Partida</h2>
          <button id="stop-watching" class="bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 transition">
            ‚èπÔ∏è Dejar de Observar
          </button>
        </div>
        
        <div class="bg-black border-2 border-purple-400 rounded-lg p-4 mb-4">
          <canvas id="observerCanvas" width="600" height="400" class="w-full h-auto bg-black rounded"></canvas>
        </div>
        
        <div class="text-center">
          <div id="spectator-score" class="grid grid-cols-2 gap-4 text-lg font-bold mb-4">
            <div class="text-left bg-yellow-600/20 rounded-lg p-3 border border-yellow-400">
              <span class="text-yellow-400" id="spectator-player1">Jugador 1</span>: 
              <span class="text-2xl" id="spectator-score1">0</span>
            </div>
            <div class="text-right bg-blue-600/20 rounded-lg p-3 border border-blue-400">
              <span class="text-blue-400" id="spectator-player2">Jugador 2</span>: 
              <span class="text-2xl" id="spectator-score2">0</span>
            </div>
          </div>
          <div id="spectator-status" class="mt-4 text-purple-300 bg-purple-800/50 rounded-lg p-3">
            <p>üî¥ Observando partida en vivo</p>
          </div>
        </div>
      </div>

      <!-- Estad√≠sticas de Espectador -->
      <div class="bg-gradient-to-r from-gray-800 to-gray-900 rounded-lg p-6 mb-8 border-2 border-gray-600">
        <h3 class="text-xl font-bold mb-4 text-center text-gray-300">üìä Estado del Servidor</h3>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div>
            <div class="text-2xl font-bold text-green-400" id="total-live-games">-</div>
            <div class="text-xs text-gray-400">Partidas en Vivo</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-blue-400" id="total-players">-</div>
            <div class="text-xs text-gray-400">Jugadores Activos</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-purple-400" id="total-spectators">-</div>
            <div class="text-xs text-gray-400">Espectadores Totales</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-yellow-400" id="connection-status">üîÑ</div>
            <div class="text-xs text-gray-400">Estado Conexi√≥n</div>
          </div>
        </div>
      </div>
      
      <!-- Bot√≥n Volver -->
      <div class="text-center">
        <button id="back-to-play" class="bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105">
          ‚Üê Volver al Men√∫ Principal
        </button>
      </div>
    </div>
  `;

  // Event listeners
  document.getElementById('refresh-live-games')?.addEventListener('click', loadLiveGames);
  document.getElementById('stop-watching')?.addEventListener('click', stopWatching);
  document.getElementById('back-to-play')?.addEventListener('click', () => {
    cleanupSpectator();
    navigateTo('/play');
  });

  // Auto-refresh toggle
  const autoRefreshCheckbox = document.getElementById('auto-refresh-spectator') as HTMLInputElement;
  autoRefreshCheckbox?.addEventListener('change', toggleAutoRefresh);

  // Cargar partidas inicialmente
  loadLiveGames();
  startAutoRefresh();
}

function startAutoRefresh(): void {
  if (refreshInterval) {
    clearInterval(refreshInterval);
  }
  
  refreshInterval = window.setInterval(() => {
    const autoRefreshCheckbox = document.getElementById('auto-refresh-spectator') as HTMLInputElement;
    if (autoRefreshCheckbox?.checked && !spectatorSocket) {
      loadLiveGames();
    }
  }, 3000); // Actualizar cada 3 segundos
}

function toggleAutoRefresh(): void {
  const autoRefreshCheckbox = document.getElementById('auto-refresh-spectator') as HTMLInputElement;
  if (autoRefreshCheckbox?.checked) {
    startAutoRefresh();
  } else {
    if (refreshInterval) {
      clearInterval(refreshInterval);
      refreshInterval = null;
    }
  }
}

async function loadLiveGames(): Promise<void> {
  const liveGamesContainer = document.getElementById('live-games-container');
  if (!liveGamesContainer) return;

  try {
    const response = await fetch('/api/games', {
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üìã Partidas recibidas para espectador:', data);
    
    // Actualizar estad√≠sticas del servidor
    updateSpectatorStats(data.games || []);
    
    // Filtrar solo partidas en juego
    const liveGames = (data.games || []).filter((game: any) => 
      game.enJuego && game.jugadoresConectados >= 2
    );

    if (liveGames.length === 0) {
      liveGamesContainer.innerHTML = `
        <div class="bg-gray-700 rounded-lg p-8 text-center border-2 border-gray-600">
          <div class="text-6xl mb-4">üì∫</div>
          <h3 class="text-xl font-bold text-gray-300 mb-2">No hay partidas en vivo</h3>
          <p class="text-gray-400 mb-4">No se encontraron partidas en curso en este momento.</p>
          <p class="text-sm text-gray-500">üí° ¬°Vuelve m√°s tarde o crea tu propia partida!</p>
        </div>
      `;
      return;
    }

    // Renderizar partidas en vivo
    liveGamesContainer.innerHTML = liveGames.map((game: any) => `
      <div class="bg-gray-700 rounded-lg p-6 border-2 border-red-600 hover:border-red-400 transition-all duration-200 hover:shadow-lg">
        <div class="flex justify-between items-center">
          <div class="flex-1">
            <div class="flex items-center mb-3">
              <div class="text-2xl mr-3">üî¥</div>
              <div>
                <h3 class="text-lg font-bold text-white flex items-center">
                  ${game.nombre || `Partida ${game.id.substring(0, 8)}`}
                  <span class="ml-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold animate-pulse">
                    EN VIVO
                  </span>
                </h3>
                <p class="text-sm text-gray-400">ID: ${game.id.substring(0, 12)}...</p>
              </div>
            </div>
            
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div class="flex items-center">
                <span class="text-gray-400 mr-2">üë•</span>
                <span class="text-white font-semibold">${game.jugadoresConectados}/${game.capacidadMaxima}</span>
              </div>
              <div class="flex items-center">
                <span class="text-gray-400 mr-2">üéØ</span>
                <span class="text-white font-semibold">${game.gameMode === 'pvp' ? 'PvP' : 'PvE'}</span>
              </div>
              <div class="flex items-center">
                <span class="text-gray-400 mr-2">‚ö°</span>
                <span class="text-green-400 font-semibold">üéÆ Jugando</span>
              </div>
              <div class="flex items-center">
                <span class="text-gray-400 mr-2">üèÜ</span>
                <span class="text-white font-semibold">${game.puntuacion?.jugador1 || 0} - ${game.puntuacion?.jugador2 || 0}</span>
              </div>
            </div>

            ${game.jugadores && game.jugadores.length > 0 ? `
              <div class="mt-3 pt-3 border-t border-red-600">
                <div class="text-xs text-red-300 mb-1">Jugadores en partida:</div>
                <div class="flex flex-wrap gap-2">
                  ${game.jugadores.map((jugador: any, index: number) => `
                    <span class="bg-${index === 0 ? 'yellow' : 'blue'}-600 text-white px-2 py-1 rounded text-xs">
                      ${jugador.nombre} (#${jugador.numero})
                    </span>
                  `).join('')}
                </div>
              </div>
            ` : ''}

            <div class="mt-3 pt-3 border-t border-gray-600">
              <div class="flex items-center text-xs text-gray-400">
                <span class="mr-2">üëÅÔ∏è</span>
                <span>${game.espectadores || 0} espectadores observando</span>
              </div>
            </div>
          </div>
          
          <div class="ml-6">
            <button 
              class="watch-game-btn bg-red-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-red-600 transition-all duration-200 transform hover:scale-105 shadow-lg"
              data-game-id="${game.id}"
            >
              üëÅÔ∏è Observar
            </button>
          </div>
        </div>
      </div>
    `).join('');

    // Agregar event listeners a los botones de observar
    document.querySelectorAll('.watch-game-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const gameId = (e.target as HTMLElement).getAttribute('data-game-id');
        if (gameId) {
          watchGame(gameId);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå Error cargando partidas en vivo:', error);
    liveGamesContainer.innerHTML = `
      <div class="bg-red-800 rounded-lg p-6 text-center border-2 border-red-600">
        <div class="text-4xl mb-4">‚ùå</div>
        <h3 class="text-xl font-bold text-red-200 mb-2">Error al cargar partidas</h3>
        <p class="text-red-300 mb-4">${error instanceof Error ? error.message : 'Error desconocido'}</p>
        <button id="retry-load-live" class="bg-red-600 text-white font-semibold py-2 px-4 rounded hover:bg-red-700 transition">
          üîÑ Reintentar
        </button>
      </div>
    `;
    
    document.getElementById('retry-load-live')?.addEventListener('click', loadLiveGames);
  }
}

function updateSpectatorStats(games: any[]): void {
  const liveGames = games.filter(g => g.enJuego).length;
  const totalPlayers = games.reduce((sum, g) => sum + (g.jugadoresConectados || 0), 0);
  const totalSpectators = games.reduce((sum, g) => sum + (g.espectadores || 0), 0);

  const liveGamesEl = document.getElementById('total-live-games');
  const playersEl = document.getElementById('total-players');
  const spectatorsEl = document.getElementById('total-spectators');
  const statusEl = document.getElementById('connection-status');

  if (liveGamesEl) liveGamesEl.textContent = liveGames.toString();
  if (playersEl) playersEl.textContent = totalPlayers.toString();
  if (spectatorsEl) spectatorsEl.textContent = totalSpectators.toString();
  if (statusEl) statusEl.textContent = spectatorSocket ? 'üü¢' : 'üîÑ';
}

function watchGame(gameId: string): void {
  if (spectatorSocket) {
    spectatorSocket.close();
  }

  currentGameId = gameId;
  
  // Mostrar el visor de juego
  const gameViewer = document.getElementById('game-viewer');
  if (gameViewer) {
    gameViewer.classList.remove('hidden');
  }

  // Limpiar canvas inicial
  drawInitialCanvas();

  // Detener auto-refresh mientras observamos
  if (refreshInterval) {
    clearInterval(refreshInterval);
    refreshInterval = null;
  }

  // Conectar al WebSocket del observador
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/ws/spectate/${gameId}`;
  
  console.log('üîó Conectando al WebSocket del espectador:', wsUrl);
  spectatorSocket = new WebSocket(wsUrl);
  
  spectatorSocket.onopen = () => {
    console.log('‚úÖ Conectado al WebSocket del observador');
    updateSpectatorStatus('üîó Conectado, cargando partida...');
    updateConnectionStatus('üü¢');
  };

  spectatorSocket.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      console.log('üì° Mensaje del espectador recibido:', data);
      
      if (data.type === 'spectator_connected') {
        updateSpectatorStatus('‚úÖ Conectado como espectador');
      } else if (data.type === 'game_state' && data.data) {
        // Manejar estado del juego para espectadores
        if (data.data.gameState) {
          drawGame(data.data.gameState);
          updateSpectatorScore(data.data.gameState);
          updateSpectatorStatus('üî¥ Observando partida en vivo');
        }
      } else if (data.type === 'gameUpdate' && data.data) {
        // Actualizaci√≥n en tiempo real del juego
        if (data.data.gameState) {
          drawGame(data.data.gameState);
          updateSpectatorScore(data.data.gameState);
        }
      } else if (data.type === 'gameFinished' || data.tipo === 'partida_finalizada') {
        updateSpectatorStatus('üèÜ Partida finalizada');
        setTimeout(() => {
          stopWatching();
        }, 3000);
      } else if (data.type === 'error') {
        console.error('‚ùå Error del observador:', data.data?.message || data.mensaje);
        updateSpectatorStatus(`‚ùå Error: ${data.data?.message || data.mensaje || 'Error desconocido'}`);
      }
    } catch (error) {
      console.error('‚ùå Error procesando mensaje del espectador:', error);
    }
  };

  spectatorSocket.onclose = () => {
    console.log('üîå Desconectado del WebSocket del observador');
    updateSpectatorStatus('üîå Desconectado');
    updateConnectionStatus('üî¥');
    spectatorSocket = null;
  };

  spectatorSocket.onerror = (error) => {
    console.error('‚ùå Error en WebSocket del observador:', error);
    updateSpectatorStatus('‚ùå Error de conexi√≥n');
    updateConnectionStatus('‚ùå');
  };
}

function stopWatching(): void {
  if (spectatorSocket) {
    spectatorSocket.close();
    spectatorSocket = null;
  }
  
  currentGameId = null;
  
  const gameViewer = document.getElementById('game-viewer');
  if (gameViewer) {
    gameViewer.classList.add('hidden');
  }
  
  // Reanudar auto-refresh
  const autoRefreshCheckbox = document.getElementById('auto-refresh-spectator') as HTMLInputElement;
  if (autoRefreshCheckbox?.checked) {
    startAutoRefresh();
  }
  
  // Recargar la lista de partidas
  loadLiveGames();
}

function drawInitialCanvas(): void {
  const canvas = document.getElementById('observerCanvas') as HTMLCanvasElement;
  const ctx = canvas?.getContext('2d');
  if (!ctx) return;

  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Dibujar l√≠nea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([5, 5]);
  ctx.beginPath();
  ctx.moveTo(canvas.width / 2, 0);
  ctx.lineTo(canvas.width / 2, canvas.height);
  ctx.stroke();
  
  // Mensaje inicial
  ctx.fillStyle = 'white';
  ctx.font = '24px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('Conectando al espectador...', canvas.width / 2, canvas.height / 2);
}

function drawGame(gameState: any): void {
  const canvas = document.getElementById('observerCanvas') as HTMLCanvasElement;
  const ctx = canvas?.getContext('2d');
  if (!ctx) return;

  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Dibujar l√≠nea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([5, 5]);
  ctx.beginPath();
  ctx.moveTo(canvas.width / 2, 0);
  ctx.lineTo(canvas.width / 2, canvas.height);
  ctx.stroke();
  ctx.setLineDash([]);
  
  // Dibujar palas
  if (gameState.palas) {
    ctx.fillStyle = 'yellow'; // Pala jugador 1
    ctx.fillRect(
      gameState.palas.jugador1.x, 
      gameState.palas.jugador1.y, 
      gameState.palaAncho || 10, 
      gameState.palaAlto || 60
    );
    
    ctx.fillStyle = 'blue'; // Pala jugador 2
    ctx.fillRect(
      gameState.palas.jugador2.x, 
      gameState.palas.jugador2.y, 
      gameState.palaAncho || 10, 
      gameState.palaAlto || 60
    );
  }
  
  // Dibujar pelota
  if (gameState.pelota) {
    ctx.fillStyle = 'red';
    ctx.beginPath();
    ctx.arc(
      gameState.pelota.x, 
      gameState.pelota.y, 
      gameState.pelota.radio || 8, 
      0, 
      Math.PI * 2
    );
    ctx.fill();
  }
}

function updateSpectatorScore(gameState: any): void {
  const score1Element = document.getElementById('spectator-score1');
  const score2Element = document.getElementById('spectator-score2');
  
  if (score1Element && gameState.puntuacion) {
    score1Element.textContent = gameState.puntuacion.jugador1?.toString() || '0';
  }
  if (score2Element && gameState.puntuacion) {
    score2Element.textContent = gameState.puntuacion.jugador2?.toString() || '0';
  }
}

function updateSpectatorStatus(message: string): void {
  const statusElement = document.getElementById('spectator-status');
  if (statusElement) {
    statusElement.innerHTML = `<p>${message}</p>`;
  }
}

function updateConnectionStatus(status: string): void {
  const statusEl = document.getElementById('connection-status');
  if (statusEl) {
    statusEl.textContent = status;
  }
}

// Funciones requeridas por el router
export function startSpectatorAutoRefresh(): void {
  console.log('üëÅÔ∏è Auto-refresh del espectador iniciado');
  startAutoRefresh();
}

export function stopSpectatorAutoRefresh(): void {
  console.log('üëÅÔ∏è Auto-refresh del espectador detenido');
  if (refreshInterval) {
    clearInterval(refreshInterval);
    refreshInterval = null;
  }
}

export function cleanupSpectator(): void {
  console.log('üëÅÔ∏è Limpieza del espectador realizada');
  if (spectatorSocket) {
    spectatorSocket.close();
    spectatorSocket = null;
  }
  if (refreshInterval) {
    clearInterval(refreshInterval);
    refreshInterval = null;
  }
  currentGameId = null;
}

// Limpiar al salir de la p√°gina
window.addEventListener('beforeunload', cleanupSpectator);
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/profile.ts ===[0m
// src/pages/profile.ts

import { navigateTo } from '../router';
import { getTranslation } from '../i18n';
import { getCurrentUser } from '../auth';

interface User {
  id: number;
  username: string;
  email: string;
  avatar_url?: string;
}

interface UserStats {
  totalGames: number;
  wins: number;
  losses: number;
  winRate: number;
  elo: number;
  ranking: number;
  matchHistory: Array<{
    id: number;
    result: 'win' | 'loss';
    opponent: string;
    score: string;
    date: string;
  }>;
  avatar_url?: string; 
}

async function getUserStats(): Promise<UserStats | null> {
  const token = localStorage.getItem('jwt');
  if (!token) return null;

  try {
    const response = await fetch('http://localhost:9000/api/auth/profile/stats', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) return null;
    return await response.json();
  } catch {
    return null;
  }
}

export async function renderProfilePage(): Promise<void> {
  const maybeUser = getCurrentUser();
  if (!maybeUser) {
    navigateTo('/login');
    return;
  }
  const user: User = maybeUser;
  if (!user) {
    navigateTo('/login');
    return;
  }

  const pageContent = document.getElementById('page-content') as HTMLElement;
  if (pageContent) {
    pageContent.innerHTML = `
      <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
        <div class="max-w-6xl w-full">
          <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 sm:p-8 border border-[#003566] shadow-2xl mb-8">
            <div class="flex items-center justify-center">
              <div class="text-[#ffc300] text-xl">Cargando estad√≠sticas...</div>
            </div>
          </div>
        </div>
      </main>
    `;
  }

  const stats = await getUserStats();

  if (stats && user) {
    user.avatar_url = stats.avatar_url;
    if (stats.avatar_url && !stats.avatar_url.startsWith('http')) {
      stats.avatar_url = `http://localhost:8001${stats.avatar_url}`;
    }
    user.avatar_url = stats.avatar_url;
    localStorage.setItem('user', JSON.stringify(user));
  }

  const defaultStats: UserStats = {
    totalGames: 0, wins: 0, losses: 0, winRate: 0, elo: 1000, ranking: 999, matchHistory: []
  };
  const userStats = stats || defaultStats;

  const profileHtml = `
    <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100">
      <div class="max-w-6xl w-full">
        <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 sm:p-8 border border-[#003566] shadow-2xl mb-8">
          <div class="flex flex-col lg:flex-row items-center gap-8">
            ${
              user.avatar_url
                ? `<img src="${user.avatar_url}" alt="Avatar" class="w-32 h-32 rounded-full object-cover border-2 border-[#ffc300]" />`
                : `<div class="w-32 h-32 rounded-full bg-gradient-to-r from-[#ffc300] to-[#ffd60a] flex items-center justify-center text-[#000814] text-4xl font-bold">
                    ${user.username.charAt(0).toUpperCase()}
                  </div>`
            }
            <div class="text-center lg:text-left flex-grow">
              <h1 class="text-3xl sm:text-4xl font-display font-extrabold text-[#ffc300] mb-2">
                ${user.username}
              </h1>
              <p class="text-gray-300 mb-4">${user.email}</p>
              <div class="flex flex-wrap gap-4 justify-center lg:justify-start">
                <span class="px-4 py-2 bg-[#001d3d] rounded-full text-sm border border-[#003566]">${getTranslation('profile', 'ranking')}: #${userStats.ranking}</span>
                <span class="px-4 py-2 bg-[#001d3d] rounded-full text-sm border border-[#003566]">${getTranslation('profile', 'ELO')}: ${userStats.elo}</span>
                <span class="px-4 py-2 bg-[#001d3d] rounded-full text-sm border border-[#003566]">${getTranslation('profile', 'games')}: ${userStats.totalGames}</span>
              </div>
            </div>
            <div class="flex flex-col gap-3">
              <button id="edit-profile" class="px-6 py-3 bg-gradient-to-r from-[#ffc300] to-[#ffd60a] text-[#000814] font-bold rounded-xl hover:from-[#ffd60a] hover:to-[#ffc300] transition-all duration-300">
                ${getTranslation('profile', 'editProfileButton')}
              </button>
              <button id="upload-avatar-btn" class="px-6 py-3 border-2 border-[#003566] text-[#ffc300] font-semibold rounded-xl hover:bg-[#001d3d] hover:text-white transition-all duration-300">
                ${getTranslation('profile', 'uploadAvatarButton')}
              </button>
              <input type="file" id="avatar-input" accept="image/*" style="display:none" />
            </div>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl">
            <h2 class="text-2xl font-display font-bold text-[#ffc300] mb-6">
              ${getTranslation('profile', 'statsTitle')}
            </h2>
            <div class="grid grid-cols-2 gap-4">
              <div class="text-center p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                <div class="text-2xl font-bold text-[#ffc300]">${userStats.wins}</div>
                <div class="text-sm text-gray-300">${getTranslation('profile', 'totalWins')}</div>
              </div>
              <div class="text-center p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                <div class="text-2xl font-bold text-red-400">${userStats.losses}</div>
                <div class="text-sm text-gray-300">${getTranslation('profile', 'totalLosses')}</div>
              </div>
              <div class="text-center p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                <div class="text-2xl font-bold text-green-400">${userStats.winRate}%</div>
                <div class="text-sm text-gray-300">${getTranslation('profile', 'winRate')}</div>
              </div>
              <div class="text-center p-4 bg-[#001d3d] rounded-xl border border-[#003566]">
                <div class="text-2xl font-bold text-[#ffd60a]">${userStats.elo}</div>
                <div class="text-sm text-gray-300">${getTranslation('profile', 'eloRating')}</div>
              </div>
            </div>
          </div>

          <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-display font-bold text-[#ffc300]">
                ${getTranslation('profile', 'matchHistoryTitle')}
              </h2>
              <button id="download-history"
                class="text-sm text-blue-400 hover:underline">
                ${getTranslation('profile', 'download')}
              </button>
            </div>
            <div class="space-y-3 max-h-64 overflow-y-auto custom-scrollbar">
              ${userStats.matchHistory.length > 0 ? userStats.matchHistory.map(match => `
                <div class="flex items-center justify-between p-3 bg-[#001d3d] rounded-xl border border-[#003566]">
                  <div class="flex items-center gap-3">
                    <div class="w-2 h-2 ${match.result === 'win' ? 'bg-green-400' : 'bg-red-400'} rounded-full"></div>
                    <span class="${match.result === 'win' ? 'text-green-400' : 'text-red-400'} font-semibold">
                      ${match.result === 'win' ? getTranslation('profile', 'matchWin') : getTranslation('profile', 'matchLoss')}
                    </span>
                    <span class="text-gray-300">vs ${match.opponent}</span>
                  </div>
                  <span class="text-[#ffc300] font-bold">${match.score}</span>
                </div>
              `).join('') : `
                <div class="text-center p-4 text-gray-400">No hay partidas jugadas a√∫n</div>
              `}
            </div>
          </div>
        </div>
      </div>
    </main>
    <style>
      .custom-scrollbar::-webkit-scrollbar { width: 8px; }
      .custom-scrollbar::-webkit-scrollbar-track { background: #001d3d; border-radius: 10px; }
      .custom-scrollbar::-webkit-scrollbar-thumb { background: #003566; border-radius: 10px; }
      .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #004b80; }
    </style>
  `;

  if (pageContent) {
    pageContent.innerHTML = profileHtml;

    // Avatar
    const avatarInput = document.getElementById('avatar-input') as HTMLInputElement;
    const uploadBtn = document.getElementById('upload-avatar-btn');
    if (uploadBtn && avatarInput) {
      uploadBtn.addEventListener('click', () => avatarInput.click());
      avatarInput.addEventListener('change', async () => {
        const file = avatarInput.files?.[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);

        const token = localStorage.getItem('jwt');
        const res = await fetch('http://localhost:9000/api/auth/profile/avatar', {
          method: 'POST',
          headers: { Authorization: `Bearer ${token}` },
          body: formData
        });

        if (res.ok) {
          const data = await res.json();
          const user: User | null = getCurrentUser();
          const avatarPreview = document.getElementById('avatar-preview');
          if (user && user.avatar_url && avatarPreview) {
            avatarPreview.innerHTML = `<img src="${user.avatar_url}" alt="Avatar" style="width: 128px; height: 128px; border-radius: 50%; margin: auto; display: block;" />`;
          } else if (avatarPreview) {
            avatarPreview.innerHTML = '<p class="text-center">Avatar no disponible</p>';
          }
          if (user) {
            user.avatar_url = data.avatar_url;
            localStorage.setItem('user', JSON.stringify(user));
            renderProfilePage(); // Recarga perfil para que se vea
          }
          alert(getTranslation('alerts', 'avatarOk'));
        } else {
          alert(getTranslation('alerts', 'avatarFail'));
        }
      });
    }

    // Bot√≥n editar perfil
    const editProfile = document.getElementById('edit-profile');
    if (editProfile) {
      editProfile.addEventListener('click', () => navigateTo('/settings'));
    }
  
    // Descargar historial
    const downloadBtn = document.getElementById('download-history') as HTMLButtonElement;
    if (downloadBtn) {
      downloadBtn.addEventListener('click', async () => {
        const token = localStorage.getItem('jwt');
        if (!token) {
          alert(getTranslation('alerts', 'history'));
          return;
        }

        downloadBtn.textContent = 'Descargando...';
        downloadBtn.disabled = true;

        try {
          const response = await fetch('/api/auth/profile/download-historial', {
            headers: { Authorization: `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error('No se pudo descargar el historial');
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);

          const link = document.createElement('a');
          link.href = url;
          link.download = `historial_${user.id}.txt`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          window.URL.revokeObjectURL(url);

          downloadBtn.textContent = '‚úî Descargado';
        } catch (err) {
          console.error(err);
          alert(getTranslation('alerts', 'historyError'));
          downloadBtn.textContent = 'Descargar historial';
        } finally {
          setTimeout(() => {
            downloadBtn.textContent = 'Descargar historial';
            downloadBtn.disabled = false;
          }, 2000);
        }
      });
    }
  }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/chat.ts ===[0m
// src/pages/chat.ts
import { getTranslation } from '../i18n';

export function renderChatPage(): void {
    const chatHtml = `
        <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center justify-center gap-8 text-gray-100 animate__animated animate__fadeIn">
            <div class="rounded-3xl p-8 sm:p-10 lg:p-12 max-w-3xl w-full bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl border border-[#003566] shadow-2xl text-center transition-all duration-500 ease-in-out transform hover:scale-[1.01] hover:shadow-custom-deep">
                <div class="flex flex-col items-center space-y-6">
                    <!-- Icono de construcci√≥n -->
                    <div class="text-6xl sm:text-7xl lg:text-8xl">
                        üöß
                    </div>
                    <h2 class="text-3xl sm:text-4xl lg:text-5xl font-display font-extrabold text-[#ffc300] drop-shadow-md">
                        ${getTranslation('chat', 'underConstruction')}
                    </h2>
                    <p class="text-base sm:text-lg text-gray-300 leading-relaxed max-w-lg">
                        ${getTranslation('chat', 'comingSoon')}
                    </p>
                    <!-- Efecto de puntos animados -->
                    <div class="flex space-x-2 text-[#ffd60a] text-xl">
                        <span class="animate-pulse">‚Ä¢</span>
                        <span class="animate-pulse delay-100">‚Ä¢</span>
                        <span class="animate-pulse delay-200">‚Ä¢</span>
                    </div>
                </div>
            </div>
            <style>
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
                .animate-pulse {
                    animation: pulse 1.5s infinite;
                }
                .delay-100 {
                    animation-delay: 0.3s;
                }
                .delay-200 {
                    animation-delay: 0.6s;
                }
                .animate__animated.animate__fadeIn {
                    animation-duration: 0.6s;
                }
                .hover\\:shadow-custom-deep:hover {
                    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 0 50px rgba(255, 195, 0, 0.3);
                }
            </style>
        </main>
    `;

    const pageContent = document.getElementById('page-content') as HTMLElement;
    if (pageContent) {
        pageContent.innerHTML = chatHtml;
    } else {
        console.error('Elemento con id "page-content" no encontrado para renderizar la p√°gina de chat.');
    }
}[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/login.ts ===[0m
// src/pages/login.ts

import { navigateTo } from '../router';
import { getTranslation, setLanguage, getCurrentLanguage } from '../i18n';
import { applyUserSettings } from '../auth';

export function renderLoginPage(): void {
    const loginHtml = `
       <div
        class="min-h-screen flex justify-center items-center p-4 sm:p-8 bg-[#000814] font-inter text-gray-100 antialiased relative overflow-hidden"
       >
        <div class="absolute inset-0 z-0 opacity-20 login-bg-pattern"></div>
        <div class="absolute inset-0 z-0 bg-gradient-to-br from-[#000814] via-[#001d3d] to-[#000814] opacity-30 animate-pulse-subtle"></div>

        <div class="absolute top-4 right-4 sm:top-8 sm:right-8 z-50">
            <div class="relative inline-block text-left">
                <button
                    type="button"
                    id="language-dropdown-button"
                    class="inline-flex justify-center items-center gap-x-1.5 rounded-full bg-white bg-opacity-10 px-4 py-2 text-sm font-semibold text-gray-100 shadow-sm ring-1 ring-inset ring-[#003566] hover:bg-opacity-20 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-75"
                >
                    <span data-i18n="common.language">${getTranslation('common', 'language')}</span>
                    <svg class="-mr-1 h-5 w-5 text-gray-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.21 8.27a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>

                <div id="language-dropdown-menu" class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-[#001d3d] shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden" role="menu" aria-orientation="vertical" aria-labelledby="language-dropdown-button" tabindex="-1">
                    <div class="py-1" role="none">
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-es" data-lang="es" data-i18n="common.castellano">${getTranslation('common', 'castellano')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-en" data-lang="en" data-i18n="common.english">${getTranslation('common', 'english')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-gl" data-lang="gl" data-i18n="common.galego">${getTranslation('common', 'galego')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-zh" data-lang="zh" data-i18n="common.chinese">${getTranslation('common', 'chinese')}</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="relative bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl shadow-2xl p-6 sm:p-8 md:p-10 lg:p-12 w-full max-w-md mx-auto border border-[#003566] transform transition-all duration-500 ease-in-out z-10">
          <div class="text-center mb-8">
            <h1 class="text-4xl sm:text-5xl font-display font-extrabold text-[#ffc300] mb-2 drop-shadow-md" data-i18n="login.title">${getTranslation('login', 'title')}</h1>
            <h2 class="text-2xl sm:text-3xl font-display font-extrabold text-gray-100 mb-4 drop-shadow-md" data-i18n="login.welcomeBack">${getTranslation('login', 'welcomeBack')}</h2>
            <p class="text-base sm:text-lg text-gray-300" data-i18n="login.subtitle">${getTranslation('login', 'subtitle')}</p>
          </div>

          <form class="space-y-6">
            <div class="relative z-0 group">
              <input type="email" id="email" name="email" class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer" placeholder=" " required />
              <label for="email" class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6" data-i18n="login.emailLabel">Email</label>
            </div>

            <div class="relative z-0 group">
              <input type="password" id="password" name="password" class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer" placeholder=" " required />
              <label for="password" class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6" data-i18n="login.passwordLabel">${getTranslation('login', 'passwordLabel')}</label>
            </div>

            <button type="submit" id="login-button" class="w-full py-3 mt-6 rounded-xl bg-gradient-to-r from-[#ffc300] to-[#ffd60a] text-[#000814] font-bold text-xl shadow-lg hover:from-[#ffd60a] hover:to-[#ffc300] transition-all duration-300 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-75" data-i18n="login.loginButton">${getTranslation('login', 'loginButton')}</button>
          </form>

          <p class="text-center text-gray-400 text-sm mt-6" data-i18n="login.or">${getTranslation('login', 'or')}</p>

          <!-- Bot√≥n perrsonalizado para Google -->
          <div id="google-login-button" class="flex justify-center mt-6"></div>

          <p class="text-center text-gray-300 text-base mt-6">
            <span data-i18n-html="login.createAccountSentence">${getTranslation('login', 'noAccountYet')} <a href="/register" id="create-account-link" class="text-[#ffc300] hover:underline font-semibold transition-colors duration-200 hover:text-[#ffd60a]" data-i18n="login.createAccountButton">${getTranslation('register', 'registerButton')}</a></span>
          </p>
        </div>
        <style>
            .login-bg-pattern {
                background: radial-gradient(circle at center, rgba(0, 53, 102, 0.2) 1px, transparent 1px),
                            radial-gradient(circle at center, rgba(0, 29, 61, 0.2) 1px, transparent 1px);
                background-size: 30px 30px;
            }
            .animate-pulse-subtle {
                animation: pulse-subtle 10s infinite ease-in-out;
            }
            @keyframes pulse-subtle {
                0% { opacity: 0.3; }
                50% { opacity: 0.45; }
                100% { opacity: 0.3; }
            }
            .peer:focus ~ label,
            .peer:not(:placeholder-shown) ~ label {
                color: #ffc300;
                transform: translateY(-24px) scale(0.75);
            }
        </style>
       </div>
    `;

    const appRoot = document.getElementById('app-root') as HTMLElement;
    if (appRoot) {
        appRoot.innerHTML = loginHtml;

        // Login cl√°sico
        const loginButton = document.getElementById('login-button');
        if (loginButton) {
            loginButton.addEventListener('click', async (event) => {
                event.preventDefault();
                const email = (document.getElementById('email') as HTMLInputElement)?.value || '';
                const password = (document.getElementById('password') as HTMLInputElement)?.value || '';

                if (!email || !password) return alert(getTranslation('alerts', 'emptyFields'));

                try {
                    const res = await fetch('/api/auth/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, password }),
                    });
                    const data = await res.json();
                    if (res.ok) {
                        if (data.requires_2fa) {
                            const code = prompt(getTranslation('alerts', 'enter2FACode') || 'Ingresa el c√≥digo de autenticador');
                            if (!code) return;

                            const verifyRes = await fetch('/api/auth/verify-2fa', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ temp_token: data.temp_token, code })
                            });
                            const verifyData = await verifyRes.json();

                            if (verifyRes.ok && verifyData.token) {
                            localStorage.setItem('jwt', verifyData.token);
                            if (verifyData.user.language) {
                                localStorage.setItem('language', verifyData.user.language);
                                setLanguage(verifyData.user.language);
                            }
                            navigateTo('/home');
                            } else {
                            alert(verifyData.message || getTranslation('alerts', 'invalid2FACode'));
                            }
                        } else if (data.token) {
                            // Login normal
                            localStorage.setItem('jwt', data.token);
                            if (data.user.language) {
                            localStorage.setItem('language', data.user.language);
                            setLanguage(data.user.language);
                        }
                        navigateTo('/home');
                    }
                    } else {
                    alert(data.message || getTranslation('alerts', 'failLogin'));
                    }
                } catch (e) {
                    alert(getTranslation('alerts', 'connection'));
                    console.error(e);
                }
            });
        }

        // Callback global para Google
        (window as any).handleGoogleCredentialResponse = async (response: any) => {
        try {
            const res = await fetch('/api/auth/google', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ token: response.credential })
            });
            const data = await res.json();

            if (res.ok) {
            if (data.requires_2fa) {
                // 2FA requerido: pedir c√≥digo
                const code = prompt(getTranslation('alerts', 'enter2FACode') || 'Ingresa el c√≥digo de autenticador');
                if (!code) return;

                const verifyRes = await fetch('/api/auth/verify-2fa', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ temp_token: data.temp_token, code })
                });
                const verifyData = await verifyRes.json();

                if (verifyRes.ok && verifyData.token) {
                localStorage.setItem('jwt', verifyData.token);
                if (verifyData.user.language) {
                    localStorage.setItem('language', verifyData.user.language);
                    setLanguage(verifyData.user.language);
                }
                navigateTo('/home');
                } else {
                alert(verifyData.message || getTranslation('alerts', 'invalid2FACode'));
                }
            } else if (data.token) {
                // Login normal con Google
                localStorage.setItem('jwt', data.token);
                if (data.user.language) {
                localStorage.setItem('language', data.user.language);
                setLanguage(data.user.language);
                }
                navigateTo('/home');
            }
            } else {
            // ‚ùå Error en autenticaci√≥n
            alert(data.message || getTranslation('alerts', 'failGoogleLogin'));
            }
        } catch (error) {
            console.error('Error en autenticaci√≥n con Google:', error);
            alert(getTranslation('alerts', 'connection'));
        }
        };

        // Carga el script de Google y renderiza el bot√≥n
        const googleLoginDiv = document.getElementById('google-login-button');
        const renderGoogleButton = () => {
            const googleLoginDiv = document.getElementById('google-login-button');
            if (window.google?.accounts?.id && googleLoginDiv) {
                window.google.accounts.id.initialize({
                    client_id: "58128894262-ak29ohah5ovkh31dvp2srdbm16thp961.apps.googleusercontent.com",
                    callback: (window as any).handleGoogleCredentialResponse,
                });

                // ‚úÖ Aqu√≠ renderizas el bot√≥n oficial con estilo controlado
                window.google.accounts.id.renderButton(googleLoginDiv, {
                    theme: 'outline',
                    size: 'large',
                    width: '100%'
                });
            } else {
                setTimeout(renderGoogleButton, 100);
            }
        };

        if (!window.google) {
            const script = document.createElement('script');
            script.src = 'https://accounts.google.com/gsi/client';
            script.async = true;
            script.defer = true;
            script.onload = () => renderGoogleButton();
            document.head.appendChild(script);
        } else {
            renderGoogleButton();
        }

        // Navegaci√≥n a registro
        const createAccountLink = document.getElementById('create-account-link');
        if (createAccountLink) {
            createAccountLink.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/register');
            });
        }

        // Selector de idioma
        const languageDropdownButton = document.getElementById('language-dropdown-button');
        const languageDropdownMenu = document.getElementById('language-dropdown-menu');
        if (languageDropdownButton && languageDropdownMenu) {
            languageDropdownButton.addEventListener('click', () => {
                languageDropdownMenu.classList.toggle('hidden');
            });

            document.addEventListener('click', (event) => {
                if (!languageDropdownButton.contains(event.target as Node) && !languageDropdownMenu.contains(event.target as Node)) {
                    languageDropdownMenu.classList.add('hidden');
                }
            });

            languageDropdownMenu.querySelectorAll('[data-lang]').forEach(item => {
                item.addEventListener('click', (event) => {
                    event.preventDefault();
                    const newLang = (event.target as HTMLElement).getAttribute('data-lang');
                    if (newLang) {
                        setLanguage(newLang);
                        renderLoginPage();
                        languageDropdownMenu.classList.add('hidden');
                    }
                });
            });
        }
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/register.ts ===[0m
// src/pages/register.ts

import { navigateTo } from '../router';
import { getTranslation, setLanguage, getCurrentLanguage } from '../i18n';

export function renderRegister(): void {
    const registerHtml = `
        <div
            class="min-h-screen flex justify-center items-center p-4 sm:p-8 bg-[#000814] font-inter text-gray-100 antialiased relative overflow-hidden"
        >
            <div class="absolute inset-0 z-0 opacity-20 register-bg-pattern"></div>
            <div class="absolute inset-0 z-0 bg-gradient-to-br from-[#000814] via-[#001d3d] to-[#000814] opacity-30 animate-pulse-subtle"></div>

            <div class="absolute top-4 right-4 sm:top-8 sm:right-8 z-50">
                <div class="relative inline-block text-left">
                    <button
                        type="button"
                        id="language-dropdown-button"
                        class="inline-flex justify-center items-center gap-x-1.5 rounded-full bg-white bg-opacity-10 px-4 py-2 text-sm font-semibold text-gray-100 shadow-sm ring-1 ring-inset ring-[#003566] hover:bg-opacity-20 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-75"
                    >
                        <span data-i18n="common.language">${getTranslation('common', 'language')}</span>
                        <svg class="-mr-1 h-5 w-5 text-gray-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.21 8.27a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                        </svg>
                    </button>

                    <div id="language-dropdown-menu" class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-[#001d3d] shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden" role="menu" aria-orientation="vertical" aria-labelledby="language-dropdown-button" tabindex="-1">
                    <div class="py-1" role="none">
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-es" data-lang="es" data-i18n="common.castellano">${getTranslation('common', 'castellano')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-en" data-lang="en" data-i18n="common.english">${getTranslation('common', 'english')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-gl" data-lang="gl" data-i18n="common.galego">${getTranslation('common', 'galego')}</a>
                        <a href="#" class="text-gray-300 block px-4 py-2 text-sm hover:bg-[#002c53]" role="menuitem" tabindex="-1" id="lang-zh" data-lang="zh" data-i18n="common.chinese">${getTranslation('common', 'chinese')}</a>
                    </div>
                    </div>
                </div>
            </div>

            <div
                class="relative bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl shadow-2xl p-6 sm:p-8 md:p-10 lg:p-12 w-full max-w-md mx-auto border border-[#003566] transform transition-all duration-500 ease-in-out z-10"
            >
                <div class="text-center mb-8">
                    <h1 class="text-4xl sm:text-5xl font-display font-extrabold text-[#ffc300] mb-2 drop-shadow-md" data-i18n="register.title">${getTranslation('register', 'title')}</h1>
                    <h2 class="text-2xl sm:text-3xl font-display font-extrabold text-gray-100 mb-4 drop-shadow-md" data-i18n="register.joinExperience">${getTranslation('register', 'joinExperience')}</h2>
                    <p class="text-base sm:text-lg text-gray-300" data-i18n="register.subtitle">${getTranslation('register', 'subtitle')}</p>
                </div>

                <form class="space-y-6">
                    <div class="relative z-0 group">
                        <input
                            type="text"
                            id="username"
                            name="username"
                            class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer"
                            placeholder=" "
                            required
                        />
                        <label
                            for="username"
                            class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            data-i18n="register.usernameLabel"
                        >${getTranslation('register', 'usernameLabel')}</label>
                    </div>

                    <div class="relative z-0 group">
                        <input
                            type="email"
                            id="email"
                            name="email"
                            class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer"
                            placeholder=" "
                            required
                        />
                        <label
                            for="email"
                            class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            data-i18n="register.emailLabel"
                        >${getTranslation('register', 'emailLabel')}</label>
                    </div>

                    <div class="relative z-0 group">
                        <input
                            type="password"
                            id="password"
                            name="password"
                            class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer"
                            placeholder=" "
                            required
                        />
                        <label
                            for="password"
                            class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            data-i18n="register.passwordLabel"
                        >${getTranslation('register', 'passwordLabel')}</label>
                    </div>

                    <div class="relative z-0 group">
                        <input
                            type="password"
                            id="confirm-password"
                            name="confirm-password"
                            class="block py-2.5 px-0 w-full text-lg text-gray-100 bg-transparent border-0 border-b-2 border-[#003566] appearance-none focus:outline-none focus:ring-0 focus:border-[#ffc300] peer"
                            placeholder=" "
                            required
                        />
                        <label
                            for="confirm-password"
                            class="peer-focus:font-medium absolute text-lg text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-[#ffc300] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            data-i18n="register.confirmPasswordLabel"
                        >${getTranslation('register', 'confirmPasswordLabel')}</label>
                    </div>

                    <button
                        type="submit"
                        id="register-button"
                        class="w-full py-3 mt-6 rounded-xl bg-gradient-to-r from-[#ffc300] to-[#ffd60a] text-[#000814] font-bold text-xl shadow-lg hover:from-[#ffd60a] hover:to-[#ffc300] transition-all duration-300 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-75"
                        data-i18n="register.registerButton"
                    >${getTranslation('register', 'registerButton')}</button>
                </form>

                <p class="text-center text-gray-400 text-sm mt-6" data-i18n="register.or">${getTranslation('register', 'or')}</p>

                <div id="google-register-button" class="flex justify-center mt-6"></div>

                <p class="text-center text-gray-300 text-base mt-6" data-i18n-html="register.alreadyHaveAccountSentence">
                    ${getTranslation('register', 'alreadyHaveAccount')} <a href="/login" id="login-link" class="text-[#ffc300] hover:underline font-semibold transition-colors duration-200 hover:text-[#ffd60a]" data-i18n="register.loginHere">${getTranslation('register', 'loginHere')}</a>
                </p>
            </div>
            <style>
                .register-bg-pattern {
                    background: radial-gradient(circle at center, rgba(0, 53, 102, 0.2) 1px, transparent 1px),
                                radial-gradient(circle at center, rgba(0, 29, 61, 0.2) 1px, transparent 1px);
                    background-size: 30px 30px;
                }
                .animate-pulse-subtle {
                    animation: pulse-subtle 10s infinite ease-in-out;
                }
                @keyframes pulse-subtle {
                    0% { opacity: 0.3; }
                    50% { opacity: 0.45; }
                    100% { opacity: 0.3; }
                }
                .peer:focus ~ label,
                .peer:not(:placeholder-shown) ~ label {
                    color: #ffc300;
                    transform: translateY(-24px) scale(0.75);
                }
            </style>
        </div>
    `;

    const appRoot = document.getElementById('app-root') as HTMLElement;
    if (appRoot) {
        appRoot.innerHTML = registerHtml;

        // Registro normal (sin Google)
        const registerButton = document.getElementById('register-button');
        if (registerButton) {
            registerButton.addEventListener('click', async (event) => {
                event.preventDefault();
                
                const usernameInput = document.getElementById('username') as HTMLInputElement;
                const emailInput = document.getElementById('email') as HTMLInputElement;
                const passwordInput = document.getElementById('password') as HTMLInputElement;
                const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement;
                
                const username = usernameInput?.value || '';
                const email = emailInput?.value || '';
                const password = passwordInput?.value || '';
                const confirmPassword = confirmPasswordInput?.value || '';
                
                if (!username || !email || !password || !confirmPassword) {
                    alert(getTranslation('alerts', 'emptyFields'));
                    return;
                }
                
                if (password !== confirmPassword) {
                    alert(getTranslation('alerts', 'passError'));
                    return;
                }

                try {
                    const response = await fetch('/api/auth/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ username, email, password }),
                    });

                    if (response.ok) {
                        alert(getTranslation('alerts', 'successLogin'));
                        navigateTo('/login');
                    } else {
                        const error = await response.json();
                        alert(`${getTranslation('alerts', 'successLogin')}${error.message}`);
                    }
                } catch (error) {
                    console.error(getTranslation('alerts', 'registerError'), error);
                    alert(getTranslation('alerts', 'connection'));
                }
            });
        }

        const loginLink = document.getElementById('login-link');
        if (loginLink) {
            loginLink.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/login');
            });
        }

        // Google Sign-In callback
        (window as any).handleGoogleCredentialResponse = async (response: any) => {
            try {
                const res = await fetch('/api/auth/google', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token: response.credential })
                });
                const data = await res.json();
                if (res.ok && data.token) {
                    localStorage.setItem('jwt', data.token);
                    navigateTo('/home');
                } else {
                    alert(data.message || getTranslation('alerts', 'connection'));
                }
            } catch (error) {
                console.error(`${getTranslation('alerts', 'google')}:`, error);
                alert(getTranslation('alerts', 'serverError'));
            }
        };

        const googleDiv = document.getElementById('google-register-button');
        const renderGoogleButton = () => {
            if (window.google?.accounts?.id && googleDiv) {
                window.google.accounts.id.initialize({
                    client_id: '58128894262-ak29ohah5ovkh31dvp2srdbm16thp961.apps.googleusercontent.com',
                    callback: (window as any).handleGoogleCredentialResponse
                });
                window.google.accounts.id.renderButton(googleDiv, {
                    theme: 'outline',
                    size: 'large',
                    width: '100%'
                });
            } else {
                setTimeout(renderGoogleButton, 100);
            }
        };

        if (!window.google) {
            const script = document.createElement('script');
            script.src = 'https://accounts.google.com/gsi/client';
            script.async = true;
            script.defer = true;
            script.onload = () => renderGoogleButton();
            document.head.appendChild(script);
        } else {
            renderGoogleButton();
        }

        const languageDropdownButton = document.getElementById('language-dropdown-button');
        const languageDropdownMenu = document.getElementById('language-dropdown-menu');
        if (languageDropdownButton && languageDropdownMenu) {
            languageDropdownButton.addEventListener('click', () => {
                languageDropdownMenu.classList.toggle('hidden');
            });

            document.addEventListener('click', (event) => {
                if (!languageDropdownButton.contains(event.target as Node) && !languageDropdownMenu.contains(event.target as Node)) {
                    languageDropdownMenu.classList.add('hidden');
                }
            });

            languageDropdownMenu.querySelectorAll('[data-lang]').forEach(item => {
                item.addEventListener('click', (event) => {
                    event.preventDefault();
                    const newLang = (event.target as HTMLElement).getAttribute('data-lang');
                    if (newLang) {
                        setLanguage(newLang);
                        renderRegister();
                        languageDropdownMenu.classList.add('hidden');
                    }
                });
            });
        }

    } else {
        console.error('Elemento con id "app-root" no encontrado para renderizar la p√°gina de registro.');
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/unifiedGameLocal.ts ===[0m
import { UnifiedGameRenderer, GameMode } from '../components/UnifiedGameRenderer';
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';

export function renderUnifiedGameLocal(): void {
    const pageContent = document.getElementById('page-content');
    
    if (!pageContent) {
        console.error('No se encontr√≥ el contenedor de contenido de la p√°gina para "/unified-game-local".');
        return;
    }

    // Configurar la interfaz de juego directamente (sin botones)
    pageContent.innerHTML = `
        <div class="w-full max-w-6xl mx-auto">
            <!-- Header del juego -->
            <div class="text-center mb-6">
                <h1 class="text-3xl font-bold text-white mb-2">üè† Juego Local - 2 Jugadores</h1>
                <p class="text-gray-300">¬°Enfr√©ntense cara a cara en el mismo dispositivo!</p>
            </div>

            <!-- Informaci√≥n de controles -->
            <div class="bg-gray-800 rounded-lg p-4 mb-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="text-center">
                        <h3 class="text-lg font-bold text-yellow-400 mb-2">üü° Jugador 1 (Izquierda)</h3>
                        <div class="bg-yellow-600 text-black rounded-lg p-3">
                            <div class="text-xl font-bold mb-2">Controles:</div>
                            <div>‚¨ÜÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">W</kbd> - Subir</div>
                            <div>‚¨áÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">S</kbd> - Bajar</div>
                        </div>
                    </div>
                    <div class="text-center">
                        <h3 class="text-lg font-bold text-blue-400 mb-2">üîµ Jugador 2 (Derecha)</h3>
                        <div class="bg-blue-600 text-white rounded-lg p-3">
                            <div class="text-xl font-bold mb-2">Controles:</div>
                            <div>‚¨ÜÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">O</kbd> - Subir</div>
                            <div>‚¨áÔ∏è <kbd class="bg-gray-200 text-black px-2 py-1 rounded">L</kbd> - Bajar</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- √Årea de juego -->
            <div class="bg-black rounded-lg p-4 flex justify-center">
                <canvas id="game-canvas" width="800" height="600" class="border-2 border-white rounded"></canvas>
            </div>

            <!-- Informaci√≥n del juego -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                <div id="player-info" class="bg-gray-800 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-green-400 mb-2">üìä Informaci√≥n del Juego</h3>
                    <div class="space-y-2 text-sm">
                        <div>üèÜ Primer jugador en llegar a <span class="font-bold text-yellow-400">5 puntos</span> gana</div>
                        <div>‚ö° Las f√≠sicas se aceleran con cada rebote</div>
                        <div>üéØ √Ångulo de rebote basado en el punto de contacto</div>
                    </div>
                </div>
                <div id="score-display" class="bg-gray-800 rounded-lg p-4 text-center">
                    <h3 class="text-lg font-bold text-purple-400 mb-4">‚öΩ Marcador</h3>
                    <div class="flex justify-between items-center">
                        <div class="text-center">
                            <div class="text-3xl font-bold text-yellow-400" id="score-left">0</div>
                            <div class="text-sm text-gray-400">Jugador 1</div>
                        </div>
                        <div class="text-2xl font-bold text-white">-</div>
                        <div class="text-center">
                            <div class="text-3xl font-bold text-blue-400" id="score-right">0</div>
                            <div class="text-sm text-gray-400">Jugador 2</div>
                        </div>
                    </div>
                </div>
                <div id="game-status" class="bg-gray-800 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-blue-400 mb-2">üéÆ Estado del Juego</h3>
                    <div id="status-message" class="text-sm text-gray-300">Preparando juego...</div>
                    <div id="rally-counter" class="text-xs text-gray-500 mt-2">Rebotes: 0</div>
                </div>
            </div>

            <!-- Bot√≥n de regreso -->
            <div class="text-center mt-6">
                <button id="back-button" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded transition-colors">
                    ‚Üê Volver al Men√∫ Principal
                </button>
            </div>
        </div>
    `;

    // Configurar el juego
    setupLocalGame();
}

function setupLocalGame(): void {
    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;
    const currentUser = getCurrentUser();
    
    if (!canvas) {
        console.error('No se encontr√≥ el canvas del juego');
        return;
    }

    // Crear instancia del juego
    const game = new UnifiedGameRenderer(canvas, 'local');
    
    // Set up player info
    const player1Info = {
        numero: 1,
        displayName: 'Jugador 1',
        username: currentUser?.username || 'player1',
        controls: 'W/S'
    };

    const player2Info = {
        numero: 2,
        displayName: 'Jugador 2', 
        username: 'player2',
        controls: '‚Üë/‚Üì'
    };

    game.setPlayerInfo(player1Info, player2Info);
    
    // Configurar callbacks del juego
    game.setCallbacks({
        onScoreUpdate: (score) => {
            const leftScore = document.getElementById('score-left');
            const rightScore = document.getElementById('score-right');
            if (leftScore) leftScore.textContent = score.left.toString();
            if (rightScore) rightScore.textContent = score.right.toString();
        },
        onGameEnd: (winner, finalScore) => {
            const statusMsg = document.getElementById('status-message');
            if (statusMsg) {
                statusMsg.innerHTML = `
                    <div class="text-green-400 font-bold">üéâ ¬°${winner} ha ganado!</div>
                    <div class="text-sm text-gray-400 mt-1">Resultado final: ${finalScore.left} - ${finalScore.right}</div>
                    <button onclick="location.reload()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded mt-2 text-sm">
                        üîÑ Jugar de Nuevo
                    </button>
                `;
            }
        },
        onStatusUpdate: (status) => {
            const statusMsg = document.getElementById('status-message');
            if (statusMsg) statusMsg.textContent = status;
        },
        onGameStateUpdate: (gameState) => {
            const rallyCounter = document.getElementById('rally-counter');
            if (rallyCounter) {
                rallyCounter.textContent = `Rebotes: ${gameState.rallieCount || 0}`;
            }
        }
    });

    // Iniciar cuenta atr√°s autom√°ticamente
    game.startCountdown();
    
    // Setup back button
    const backButton = document.getElementById('back-button');
    backButton?.addEventListener('click', () => {
        game.cleanup();
        navigateTo('/play');
    });
    
    // Cleanup al salir de la p√°gina
    window.addEventListener('beforeunload', () => {
        game.cleanup();
    });
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/gameLobby.css ===[0m
.game-lobby {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    background: linear-gradient(135deg, #1a1a2e, #16213e);
    color: white;
    min-height: 100vh;
}

.lobby-header {
    text-align: center;
    margin-bottom: 30px;
}

.lobby-header h1 {
    font-size: 2.5rem;
    color: #00d4ff;
    text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
    margin-bottom: 10px;
}

.lobby-status {
    background: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    text-align: center;
    backdrop-filter: blur(10px);
}

.players-list {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.player-card {
    background: rgba(0, 212, 255, 0.2);
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #00d4ff;
    min-width: 150px;
    text-align: center;
}

.countdown {
    font-size: 3rem;
    color: #ff6b6b;
    text-align: center;
    margin: 20px 0;
    text-shadow: 0 0 20px rgba(255, 107, 107, 0.8);
}

.game-canvas-container {
    margin-top: 20px;
    border: 2px solid #00d4ff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
}

#gameCanvas {
    display: block;
    background: #000;
}

.lobby-controls {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.btn-primary {
    background: #00d4ff;
    color: #1a1a2e;
}

.btn-primary:hover {
    background: #00a8cc;
    transform: translateY(-2px);
}

.btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.btn-secondary:hover {
    background: rgba(255, 255, 255, 0.3);
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/friends.ts ===[0m
// src/pages/friends.ts

import { getTranslation } from '../i18n';
import { getCurrentUser } from '../auth';

declare global {
    interface Window {
        handleChallenge: (userId: number, username: string) => void;
        handleAcceptRequest: (senderId: number, rowElement: HTMLElement) => void;
        handleRejectRequest: (senderId: number, rowElement: HTMLElement) => void;
    }
}

interface Friend {
    id: number;
    username: string;
    isOnline: boolean;
    elo: number;
}

interface User {
    id: number;
    username: string;
}

async function fetchWithToken<T>(url: string): Promise<T> {
    const token = localStorage.getItem('jwt');
    if (!token) throw new Error('No JWT token found');

    const response = await fetch(url, {
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });

    if (!response.ok) {
        console.error(`Error fetching ${url}:`, response.status);
        return [] as any;
    }

    return await response.json();
}

async function getFriends(): Promise<Friend[]> {
    return await fetchWithToken<Friend[]>('/api/auth/friends');
}

async function getPendingRequests(): Promise<User[]> {
    return await fetchWithToken<User[]>('/api/auth/friends/requests');
}

async function getAvailableUsers(): Promise<User[]> {
    return await fetchWithToken<User[]>('/api/auth/friends/available');
}

let cachedAvailableUsers: User[] = [];
let isRenderingFriends = false; // ‚úÖ evitar renderizaciones m√∫ltiples

function renderAvailableUsersList(users: User[]): string {
    return users.length > 0
        ? users.map(user => `
            <div class="flex items-center justify-between p-3 bg-[#001d3d] rounded-xl border border-[#003566] mb-2">
              <div class="font-bold text-gray-100">${user.username}</div>
              <button
                class="btn-send-request text-xs font-semibold py-1 px-3 rounded-xl transition-all duration-200 
                        bg-[#ffc300] text-[#000814] hover:opacity-80 cursor-pointer"
                data-user-id="${user.id}"
                data-username="${user.username}">
                ${getTranslation('friends', 'sendRequestButton')}
              </button>
            </div>
          `).join('')
        : `<p class="text-gray-400 text-center">${getTranslation('friends', 'noUsersAvailable')}</p>`;
}

export async function renderFriendsPage(): Promise<void> {
    if (isRenderingFriends) return; // ‚úÖ evitar duplicados
    isRenderingFriends = true;

    const currentUser = getCurrentUser();
    const pageContent = document.getElementById('page-content') as HTMLElement;
    if (!pageContent) {
        console.error('Elemento con id "page-content" no encontrado para renderizar la p√°gina de amigos.');
        isRenderingFriends = false;
        return;
    }

    const [friends, pendingRequests, availableUsers] = await Promise.all([
        getFriends(),
        getPendingRequests(),
        getAvailableUsers()
    ]);

    cachedAvailableUsers = [...availableUsers];

    pageContent.innerHTML = `
        <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center text-gray-100">
            <div class="max-w-6xl w-full grid grid-cols-1 md:grid-cols-3 gap-6">
                
                <!-- T√≠tulo y subt√≠tulo -->
                <div class="col-span-1 md:col-span-3 text-center mb-4">
                    <h1 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-4 text-[#ffc300] drop-shadow-md leading-tight">
                        ${getTranslation('friends', 'friends')}
                    </h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-300">
                        ${getTranslation('friends', 'friendsManagement')}
                    </p>
                </div>

                <!-- Amigos -->
                <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl min-h-[425px]">
                    <h2 class="text-2xl font-bold text-[#ffc300] mb-4 text-center">${getTranslation('friends', 'yourFriends')}</h2>
                    ${friends.length > 0 ? friends.map(friend => `
                        <div class="flex items-center justify-between p-3 bg-[#001d3d] rounded-xl border border-[#003566] mb-2">
                            <div class="flex items-center gap-3">
                                <div class="w-3 h-3 rounded-full ${friend.isOnline ? 'bg-green-400' : 'bg-gray-400'}"></div>
                                <div>
                                    <div class="font-bold text-gray-100">${friend.username}</div>
                                    <div class="text-sm text-gray-300">ELO: ${friend.elo}</div>
                                </div>
                            </div>
                            <button class="text-xs font-semibold py-1 px-3 rounded-xl transition-all duration-200 
                                    ${friend.isOnline 
                                        ? 'bg-[#ffc300] text-[#000814] hover:opacity-80 cursor-pointer' 
                                        : 'bg-gray-600 text-gray-300 cursor-not-allowed opacity-60'}"
                                ${friend.isOnline ? '' : 'disabled'}
                                onclick="${friend.isOnline ? `handleChallenge(${friend.id}, '${friend.username}')` : ''}"
                            >
                                ${getTranslation('friends', 'challengeButton')}
                            </button>
                            <button 
                                class="text-xs bg-red-600 text-white font-semibold py-1 px-3 rounded-xl hover:opacity-80"
                                onclick="handleDeleteFriend(${friend.id}, this.parentElement.parentElement)">
                                ‚ùå
                            </button>
                        </div>
                    `).join('') : `<p class="text-gray-400 text-center">${getTranslation('friends', 'noFriends')}</p>`}
                </div>

                <!-- Peticiones -->
                <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl min-h-[425px]">
                    <h2 class="text-2xl font-bold text-[#ffc300] mb-4 text-center">${getTranslation('friends', 'sendRequests')}</h2>
                    <input type="text" id="search-available-users" placeholder="üîç ${getTranslation('friends', 'searchPlaceholder')}" 
                           class="w-full mb-4 p-2 rounded bg-[#000814] border border-[#003566] text-white placeholder-gray-400" />
                    <div id="available-users-list-container">
                        ${renderAvailableUsersList(availableUsers)}
                    </div>
                </div>

                <!-- Solicitudes -->
                <div class="bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl rounded-3xl p-6 border border-[#003566] shadow-2xl min-h-[425px]">
                    <h2 class="text-2xl font-bold text-[#ffc300] mb-4 text-center">${getTranslation('friends', 'incomingRequests')}</h2>
                    ${pendingRequests.length > 0 ? pendingRequests.map(user => `
                        <div class="flex items-center justify-between p-3 bg-[#001d3d] rounded-xl border border-[#003566] mb-2">
                            <div class="font-bold text-gray-100">${user.username}</div>
                            <div class="flex gap-2">
                                <button class="text-xs bg-green-500 text-white font-semibold py-1 px-3 rounded-xl hover:opacity-80"
                                        onclick="handleAcceptRequest(${user.id}, this.parentElement.parentElement)">
                                    ‚úÖ
                                </button>
                                <button class="text-xs bg-red-500 text-white font-semibold py-1 px-3 rounded-xl hover:opacity-80"
                                        onclick="handleRejectRequest(${user.id}, this.parentElement.parentElement)">
                                    ‚ùå
                                </button>
                            </div>          
                        </div>
                    `).join('') : `<p class="text-gray-400 text-center">${getTranslation('friends', 'noRequests')}</p>`}
                </div>

            </div>
        </main>
    `;

    const searchInput = document.getElementById('search-available-users') as HTMLInputElement;
    if (searchInput) {
        searchInput.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            const filteredUsers = cachedAvailableUsers.filter(user =>
                user.username.toLowerCase().includes(searchTerm)
            );

            const container = document.getElementById('available-users-list-container');
            if (container) {
                container.innerHTML = renderAvailableUsersList(filteredUsers);
            }
        });
    }

    window.handleChallenge = (userId: number, username: string) => {
        console.log(`Desafiando a ${username} (ID: ${userId})`);
        alert(`${getTranslation('friends', 'challenging')} ${username}!`);
    };

    window.handleAcceptRequest = async (senderId: number, rowElement: HTMLElement) => {
        const buttons = rowElement.querySelectorAll('button');
        buttons.forEach(btn => {
            btn.disabled = true;
            btn.textContent = '...';
        });
        if (!confirm('¬øAceptar solicitud de amistad?')) return;

        try {
            const token = localStorage.getItem('jwt');
            const response = await fetch('/api/auth/friends/requests/accept', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ senderId })
            });

            if (response.ok) {
                rowElement.remove();
                await renderFriendsPage();
                alert(getTranslation('friends', 'requestAccepted'));
            } else {
                const error = await response.json();
                alert(`Error: ${error.message} || ${getTranslation('alerts', 'noAccept')}`);
            }
        } catch (err) {
            console.error('Error aceptando solicitud:', err);
            alert(getTranslation('alerts', 'network'));
        }
    };

    (window as any).handleDeleteFriend = async (targetId: number, rowElement: HTMLElement) => {
        if (!confirm(getTranslation('friends', 'confirmDelete'))) return;

        const token = localStorage.getItem('jwt');
        try {
            const res = await fetch('/api/auth/friends/delete', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ targetId })
            });

            if (res.ok) {
                alert(getTranslation('friends', 'friendDeleted'));
                await renderFriendsPage();
            } else {
                const err = await res.json();
                alert(`Error: ${err.error || getTranslation('friends', 'deletingError')}`);
            }
        } catch (err) {
            console.error('Error eliminando amigo:', err);
            alert(getTranslation('alerts', 'network'));
        }
    };

    window.handleRejectRequest = async (senderId: number, rowElement: HTMLElement) => {
        const buttons = rowElement.querySelectorAll('button');
        buttons.forEach(btn => {
            btn.disabled = true;
            btn.textContent = '...';
        });
        if (!confirm('¬øRechazar solicitud de amistad?')) return;

        try {
            const token = localStorage.getItem('jwt');
            const response = await fetch('/api/auth/friends/requests/reject', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ senderId })
            });

            if (response.ok) {
                rowElement.remove();
                await renderFriendsPage();
                alert(`${getTranslation('friends', 'requestRejected')}`);
            } else {
                const error = await response.json();
                alert(`Error: ${error.message || 'No se pudo rechazar'}`);
            }
        } catch (err) {
            console.error(getTranslation('alerts', 'failRequest'), err);
            alert(getTranslation('alerts', 'network'));
        }
    };

    // ‚úÖ Mejora: limpiar listeners duplicados
    document.querySelectorAll('.btn-send-request').forEach(btn => {
        const clone = btn.cloneNode(true) as HTMLElement;
        btn.replaceWith(clone);
        clone.addEventListener('click', (event) => {
            const target = event.currentTarget as HTMLElement;
            const targetId = parseInt(target.getAttribute('data-user-id') || '0');
            const username = target.getAttribute('data-username') || '';
            (window as any).handleSendRequest(targetId, username, target);
        });
    });

    (window as any).handleSendRequest = async (targetId: number, username: string, buttonElement: HTMLElement) => {
        if (typeof targetId !== 'number' || isNaN(targetId) || targetId <= 0) {
            console.error('Invalid targetId:', targetId);
            alert(getTranslation('friends', 'sentError'));
            return;
        }

        if (!confirm(`${getTranslation('friends', 'confirmSendRequest')} ${username}?`)) {
            return;
        }

        const token = localStorage.getItem('jwt');
        if (!token) {
            alert(getTranslation('friends', 'sessionExpired'));
            window.location.href = '/login';
            return;
        }

        try {
            const response = await fetch('/api/auth/friends/request', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ targetId })
            });

            let data;
            try {
                data = await response.json();
            } catch (e) {
                const text = await response.text();
                console.error('Response is not JSON:', text);
                throw new Error('Invalid response from server');
            }

            if (response.ok && data.success) {
                if (buttonElement instanceof HTMLButtonElement ||
                    buttonElement instanceof HTMLInputElement) {
                    buttonElement.disabled = true;
                }
                buttonElement.innerText = getTranslation('friends', 'requestSent');
                buttonElement.classList.remove('bg-[#ffc300]', 'hover:opacity-80');
                buttonElement.classList.add('bg-gray-500', 'cursor-not-allowed');
                buttonElement.removeAttribute('onclick');

                alert(getTranslation('friends', 'requestSentSuccessfully'));
            } else {
                throw new Error(data.error || 'Request failed');
            }
        } catch (err: any) {
            console.error('Error enviando solicitud de amistad:', err);
            alert(`${getTranslation('alerts', 'failRequest')} ${err.message || ''}`);
        }
    };

    isRenderingFriends = false; // ‚úÖ liberar bloqueo
}[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/tournaments.ts ===[0m
import { renderNavbar } from '../components/navbar';
import { getCurrentUser } from '../auth';

const API_BASE = 'http://localhost:9000';

export function renderTournamentsPage() {
    // Render navbar at the top
    renderNavbar('/tournaments');

    // Main content HTML
    const tournamentsHtml = `
        <section class="bg-[#001d3d] rounded-xl shadow-lg p-8 w-full max-w-xl mx-auto">
            <h2 class="text-3xl font-extrabold text-[#ffc300] mb-6 text-center">Tournaments</h2>
            <div class="flex gap-4 justify-center mb-8">
                <button id="join-tab" class="px-4 py-2 rounded bg-[#003566] text-[#ffc300] font-bold hover:bg-[#ffc300] hover:text-[#003566] transition">Join Tournament</button>
                <button id="create-tab" class="px-4 py-2 rounded bg-[#003566] text-[#ffc300] font-bold hover:bg-[#ffc300] hover:text-[#003566] transition">Create Tournament</button>
            </div>
            <div id="tournament-content"></div>
        </section>
    `;

    const pageContent = document.getElementById('page-content');
    if (pageContent) {
        pageContent.innerHTML = tournamentsHtml;

        const content = document.getElementById('tournament-content');
        const createTab = document.getElementById('create-tab');
        const joinTab = document.getElementById('join-tab');

        function showCreateForm() {
            if (content) {
                content.innerHTML = `
                    <form id="create-tournament-form" class="flex flex-col gap-4">
                        <label class="font-semibold text-[#ffc300]">
                            Tournament Name:<br>
                            <input type="text" name="name" required class="mt-1 p-2 rounded w-full bg-[#003566] text-[#ffc300] border border-[#ffc300]" />
                        </label>
                        <button type="submit" class="px-4 py-2 rounded bg-[#ffc300] text-[#003566] font-bold hover:bg-[#003566] hover:text-[#ffc300] transition">Create</button>
                    </form>
                `;
                const form = document.getElementById('create-tournament-form') as HTMLFormElement | null;
                if (form) {
                    form.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const formData = new FormData(form);
                        const name = formData.get('name');
                        // Get authenticated user (window.getCurrentUser, localStorage, sessionStorage, log for debug)
                        let user = (window as any).getCurrentUser ? (window as any).getCurrentUser() : null;
                        if (!user || !user.id) {
                            try {
                                user = JSON.parse(localStorage.getItem('user') || 'null');
                            } catch {}
                        }
                        if (!user || !user.id) {
                            try {
                                user = JSON.parse(localStorage.getItem('currentUser') || 'null');
                            } catch {}
                        }
                        if (!user || !user.id) {
                            try {
                                user = JSON.parse(sessionStorage.getItem('user') || 'null');
                            } catch {}
                        }
                        if (!user || !user.id) {
                            try {
                                user = JSON.parse(sessionStorage.getItem('currentUser') || 'null');
                            } catch {}
                        }
                        console.log('[Tournaments] Detected user:', user);
                        if (!name) return;
                        if (!user || !user.id) {
                            alert('You must be logged in to create a tournament.');
                            return;
                        }
                        try {
const res = await fetch(`${API_BASE}/api/tournaments`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ name, created_by: user.id })
                            });
                            if (!res.ok) throw new Error(await res.text());
                            // Refresh the join list after creation
                            showJoinList();
                        } catch (err) {
                            alert('Error creating tournament: ' + err);
                        }
                    });
                }
            }
        }


        function showJoinList() {
            if (content) {
                // Use reliable JWT/session-based user
                let currentUser: any = getCurrentUser();
                // Now get tournaments
                fetch(`${API_BASE}/api/tournaments`)
                    .then(res => res.json())
                    .then((tournaments) => {
                        // Fetch joined players for all tournaments (to check if current user already joined)
                        Promise.all(
                            tournaments.map((t: any) =>
                                fetch(`${API_BASE}/api/tournaments/${t.id}/players`).then(r => r.json()).catch(() => [])
                            )
                        ).then(allPlayersArr => {
                            content.innerHTML = `
                                <h3 class="text-xl font-bold text-[#ffc300] mb-4">Available Tournaments</h3>
                                <ul class="space-y-4">
                                ${tournaments.map((t: any, i:number) => {
const players = Array.isArray(allPlayersArr[i]) ? allPlayersArr[i] : [];
const joined = !!(currentUser && currentUser.id && players.find((p:any) => p.id==currentUser.id));
                                    if (currentUser && currentUser.id && t.created_by === currentUser.id) {
                                        return `
                                            <li class="border border-[#ffc300] rounded-lg p-4 flex items-center justify-between bg-[#003566]">
                                                <span class="font-semibold text-[#ffc300]">${t.name}</span>
                                                <span class="text-[#ffd60a]">Status: ${t.status}</span>
                                                <button data-manage-id="${t.id}" class="ml-4 px-3 py-1 rounded bg-green-400 text-[#003566] font-bold hover:bg-green-600 hover:text-white transition">Manage</button>
                                            </li>
                                        `;
                                    } else {
                                        return `
                                            <li class="border border-[#ffc300] rounded-lg p-4 flex items-center justify-between bg-[#003566]">
                                                <span class="font-semibold text-[#ffc300]">${t.name}</span>
                                                <span class="text-[#ffd60a]">Status: ${t.status}</span>
                                                <button data-id="${t.id}" class="ml-4 px-3 py-1 rounded bg-[#ffc300] text-[#003566] font-bold hover:bg-[#003566] hover:text-[#ffc300] transition" ${joined ? 'disabled style="opacity:0.7;cursor:not-allowed"' : ''}>${joined ? 'Joined' : 'Join'}</button>
                                            </li>
                                        `;
                                    }
                                }).join('')}
                                </ul>
                            `;
                            attachJoinHandlers();
                            attachManageHandlers();
                        });

                        // Refactored event handlers:
                        function attachJoinHandlers() {
                            (content as HTMLElement).querySelectorAll('button[data-id]').forEach(btn => {
                                btn.addEventListener('click', async () => {
                                    const tournamentId = btn.getAttribute('data-id');
                                    let user = getCurrentUser();
                                    if (!user || !user.id) {
                                        alert('You must be logged in to join a tournament.');
                                        return;
                                    }
                                    try {
                                        const res = await fetch(`${API_BASE}/api/tournaments/${tournamentId}/join`, {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ user_id: user.id })
                                        });
                                        if (!res.ok) throw new Error(await res.text());
                                        showJoinList();
                                    } catch (err) {
                                        alert('Error joining tournament: ' + err);
                                    }
                                });
                            });
                        }

                        function attachManageHandlers() {
                            if (!content) return;
                            (content as HTMLElement).querySelectorAll('button[data-manage-id]').forEach(btn => {
                                btn.addEventListener('click', async () => {
                                    const tournamentId = btn.getAttribute('data-manage-id');
                                    // Toggle management panel
                                    let li = btn.closest('li');
                                    let existingPanel = li?.querySelector('.manage-panel');
                                    if (existingPanel) {
                                        existingPanel.remove();
                                        return;
                                    }
                                    // Fetch players
                                    let nPlayers = 0;
                                    let playersList: any[] = [];
                                    try {
                                        const res = await fetch(`${API_BASE}/api/tournaments/${tournamentId}/players`);
                                        if (res.ok) {
                                            playersList = await res.json();
                                            nPlayers = Array.isArray(playersList) ? playersList.length : 0;
                                        }
                                    } catch (e) {}
                                    // Render player names if available
                                    let playerListHtml = '';
                                    if (playersList && playersList.length > 0) {
                                        playerListHtml = `<ul class="mb-2 ml-4 list-disc">${playersList.map((p: any) => `<li>${p.username || p.name || p.id}</li>`).join('')}</ul>`;
                                    } else {
                                        playerListHtml = '<div class="mb-2 ml-4 text-gray-400">No players joined yet.</div>';
                                    }
                                    // Panel HTML
                                    const panel = document.createElement('div');
                                    panel.className = 'manage-panel mt-4 p-4 rounded border border-green-400 bg-[#001d3d] text-[#ffc300] flex flex-col gap-2 text-sm';
                                    panel.innerHTML = `
                                        <div><b>Players joined:</b> ${nPlayers}</div>
                                        ${playerListHtml}
                                        <div class="flex gap-4">
                                            <button class="start-btn px-3 py-1 rounded bg-blue-400 text-white font-bold hover:bg-blue-700 transition" data-tournament-id="${tournamentId}">Start Tournament</button>
                                            <button class="delete-btn px-3 py-1 rounded bg-red-400 text-white font-bold hover:bg-red-700 transition" data-tournament-id="${tournamentId}">Delete Tournament</button>
                                        </div>
                                    `;
                                    (li as HTMLElement | null)?.appendChild(panel);

                                    // Start Tournament handler
                                    panel.querySelector('.start-btn')?.addEventListener('click', async () => {
                                        try {
                                            const res = await fetch(`${API_BASE}/api/tournaments/${tournamentId}/start`, {
                                                method: 'POST',
                                            });
                                            if (!res.ok) throw new Error(await res.text());
                                            alert('Tournament started!');
                                            showJoinList();
                                        } catch (err) {
                                            alert('Error starting tournament: ' + err);
                                        }
                                    });
                                    // Delete Tournament handler
                                    panel.querySelector('.delete-btn')?.addEventListener('click', async () => {
                                        // Display modal for confirmation
                                        let modal = document.createElement('div');
                                        modal.innerHTML = `
                                            <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50" id="delete-modal">
                                                <div class="bg-[#001d3d] p-8 rounded-xl border-2 border-red-500 flex flex-col gap-4 text-center w-full max-w-xs">
                                                    <div class="text-[#ffc300]">Are you sure you want to delete this tournament?<br><b>This action cannot be undone.</b></div>
                                                    <div class="flex gap-4 justify-center mt-4">
                                                        <button id="confirm-delete" class="px-4 py-2 rounded bg-red-600 text-white font-bold hover:bg-red-800">Delete</button>
                                                        <button id="cancel-delete" class="px-4 py-2 rounded bg-gray-300 text-gray-900 font-bold hover:bg-gray-400">Cancel</button>
                                                    </div>
                                                </div>
                                            </div>
                                        `;
                                        document.body.appendChild(modal);
                                        // Cancel button handler
                                        document.getElementById('cancel-delete')?.addEventListener('click', () => {
                                            modal.remove();
                                        });
                                        // Confirm delete handler
                                        document.getElementById('confirm-delete')?.addEventListener('click', async () => {
                                            try {
                                                const res = await fetch(`${API_BASE}/api/tournaments/${tournamentId}`, {
                                                    method: 'DELETE',
                                                });
                                                if (!res.ok) throw new Error(await res.text());
                                                modal.remove();
                                                alert('Tournament deleted');
                                                showJoinList();
                                            } catch (err) {
                                                alert('Error deleting tournament: ' + err);
                                            }
                                        });
                                    });
                                });
                            });
                        }
                    })
                    .catch(() => {
                        if (content)
                            content.innerHTML = '<p class="text-red-400">Error loading tournaments.</p>';
                    });
            }
        }

        if (createTab && joinTab) {
            createTab.addEventListener('click', showCreateForm);
            joinTab.addEventListener('click', showJoinList);
            // Show create form by default
            showJoinList();
        }

        // Render footer
        let footer = document.getElementById('main-footer');
        if (!footer) {
            footer = document.createElement('footer');
            footer.id = 'main-footer';
            footer.className = 'w-full bg-[#000814] text-[#ffc300] text-center py-4 border-t border-[#003566] fixed bottom-0 left-0 z-10';
            footer.innerHTML = '<span class="font-bold">¬© 2025 PONG Tournament Platform</span>';
            document.body.appendChild(footer);
        }
    } else {
        console.error('No se encontr√≥ el contenedor #page-content para renderizar torneos.');
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/play.ts ===[0m
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';

export function renderPlay(): void {
  const content = document.getElementById('page-content');

  if (!content) {
    console.error('No se encontr√≥ el contenedor para mostrar la p√°gina de juego.');
    return;
  }

  content.innerHTML = `
    <div class="w-full max-w-6xl mx-auto text-center">
      <div class="mb-8">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">
          üéÆ Selecciona tu modo de juego
        </h1>
        <p class="text-lg text-gray-300">
          Elige c√≥mo quieres jugar al cl√°sico Pong con f√≠sicas mejoradas
        </p>
      </div>

      <!-- Grid ajustado a 4 columnas para mejor distribuci√≥n -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Juego Local -->
        <div class="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border-2 border-transparent hover:border-yellow-400" 
             id="local-game-card">
          <div class="text-6xl mb-4">üè†</div>
          <h2 class="text-xl font-bold text-yellow-400 mb-2">Juego Local</h2>
          <p class="text-gray-300 mb-4 text-sm">
            Juega contra un amigo en el mismo dispositivo. 
            Perfecto para partidas r√°pidas cara a cara.
          </p>
          <div class="text-xs text-gray-400 mb-4 space-y-1">
            <div>üë• 2 Jugadores</div>
            <div>üéÆ Mismo dispositivo</div>
            <div>‚ö° Partida instant√°nea</div>
            <div>üïπÔ∏è W/S vs ‚Üë/‚Üì</div>
          </div>
          <button class="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-2 px-4 rounded transition-colors w-full">
            Jugar Local
          </button>
        </div>

        <!-- Juego vs IA -->
        <div class="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border-2 border-transparent hover:border-green-400" 
             id="ai-game-card">
          <div class="text-6xl mb-4">ü§ñ</div>
          <h2 class="text-xl font-bold text-green-400 mb-2">vs Inteligencia Artificial</h2>
          <p class="text-gray-300 mb-4 text-sm">
            Enfr√©ntate a la IA con f√≠sicas realistas del Pong original. 
            Elige tu nivel de desaf√≠o.
          </p>
          <div class="text-xs text-gray-400 mb-4 space-y-1">
            <div>üéØ 3 Dificultades</div>
            <div>üß† IA adaptativa</div>
            <div>‚ö° F√≠sicas mejoradas</div>
            <div>üìä Entrena habilidades</div>
          </div>
          <button class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors w-full">
            Jugar vs IA
          </button>
        </div>

        <!-- Juego Online -->
        <div class="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border-2 border-transparent hover:border-blue-400" 
             id="online-game-card">
          <div class="text-6xl mb-4">üåê</div>
          <h2 class="text-xl font-bold text-blue-400 mb-2">Juego Online</h2>
          <p class="text-gray-300 mb-4 text-sm">
            Con√©ctate con jugadores de todo el mundo.
            Crea o √∫nete a partidas online multijugador.
          </p>
          <div class="text-xs text-gray-400 mb-4 space-y-1">
            <div>üåç Multijugador global</div>
            <div>üèÜ Partidas competitivas</div>
            <div>üí¨ Chat en tiempo real</div>
            <div>‚ö° F√≠sicas sincronizadas</div>
          </div>
          <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors w-full">
            Jugar Online
          </button>
        </div>

        <!-- Visor de Partidas -->
        <div class="bg-gray-800 rounded-lg p-6 hover:bg-gray-700 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border-2 border-transparent hover:border-purple-400" 
             id="observer-game-card">
          <div class="text-6xl mb-4">üëÅÔ∏è</div>
          <h2 class="text-xl font-bold text-purple-400 mb-2">Modo Espectador</h2>
          <p class="text-gray-300 mb-4 text-sm">
            Observa partidas en vivo de otros jugadores.
            Aprende estrategias y disfruta del espect√°culo.
          </p>
          <div class="text-xs text-gray-400 mb-4 space-y-1">
            <div>üì∫ Visualizaci√≥n en tiempo real</div>
            <div>üçø Modo espectador</div>
            <div>üìä Estad√≠sticas de partida</div>
            <div>üéØ Aprende de otros</div>
          </div>
          <button class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded transition-colors w-full">
            Ver Partidas
          </button>
        </div>
      </div>

      <!-- Secci√≥n de estad√≠sticas r√°pidas -->
      <div class="bg-gray-800 rounded-lg p-6 mb-8">
        <h3 class="text-2xl font-bold mb-4 text-purple-400">üìä Tus Estad√≠sticas</h3>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="stats-container">
          <div class="text-center">
            <div class="text-2xl font-bold text-yellow-400" id="total-games">-</div>
            <div class="text-sm text-gray-400">Partidas Totales</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-400" id="total-wins">-</div>
            <div class="text-sm text-gray-400">Victorias</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-400" id="win-rate">-</div>
            <div class="text-sm text-gray-400">% Victorias</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-400" id="best-streak">-</div>
            <div class="text-sm text-gray-400">Mejor Racha</div>
          </div>
        </div>
      </div>

      <!-- Informaci√≥n sobre las mejoras -->
      <div class="bg-gradient-to-r from-blue-900 to-purple-900 rounded-lg p-6">
        <h3 class="text-xl font-bold mb-4 text-yellow-400">‚ö° F√≠sicas Mejoradas del Pong Original</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-left">
          <div>
            <h4 class="font-semibold text-green-400 mb-2">üéØ Rebotes Realistas</h4>
            <ul class="text-sm text-gray-300 space-y-1">
              <li>‚Ä¢ √Ångulo basado en punto de contacto</li>
              <li>‚Ä¢ Velocidad variable seg√∫n posici√≥n</li>
              <li>‚Ä¢ Incremento progresivo de velocidad</li>
            </ul>
          </div>
          <div>
            <h4 class="font-semibold text-blue-400 mb-2">üöÄ Mec√°nicas Cl√°sicas</h4>
            <ul class="text-sm text-gray-300 space-y-1">
              <li>‚Ä¢ F√≠sica de pelota fiel al original</li>
              <li>‚Ä¢ Rebotes en paredes superior/inferior</li>
              <li>‚Ä¢ Sistema de puntuaci√≥n cl√°sico</li>
            </ul>
          </div>
          <div>
            <h4 class="font-semibold text-yellow-400 mb-2">‚è∞ Nuevas Caracter√≠sticas</h4>
            <ul class="text-sm text-gray-300 space-y-1">
              <li>‚Ä¢ Cuenta atr√°s antes de iniciar</li>
              <li>‚Ä¢ Partidas inmediatas sin botones</li>
              <li>‚Ä¢ Selector de dificultad para IA</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  `;

  // Load and display stats
  loadGameStats();

  // Set up event listeners for main game modes
  document.getElementById('local-game-card')?.addEventListener('click', () => {
    navigateTo('/unified-game-local');
  });

  document.getElementById('ai-game-card')?.addEventListener('click', () => {
    navigateTo('/unified-game-ai');
  });

  document.getElementById('online-game-card')?.addEventListener('click', () => {
    navigateTo('/unified-game-online');
  });

  document.getElementById('observer-game-card')?.addEventListener('click', () => {
    navigateTo('/spectator');
  });
}

function loadGameStats(): void {
  try {
    // Load stats from localStorage
    const savedStats = localStorage.getItem('pongGameStats');
    if (!savedStats) {
      // Show default values
      updateStatsDisplay({
        totalGames: 0,
        totalWins: 0,
        winRate: 0,
        bestStreak: 0
      });
      return;
    }

    const allStats = JSON.parse(savedStats);
    
    // Calculate aggregated stats
    const totalGames = allStats.length;
    const totalWins = allStats.filter((game: any) => 
      (game.player1Name === getCurrentUserName() && game.player1Score > game.player2Score) ||
      (game.player2Name === getCurrentUserName() && game.player2Score > game.player1Score)
    ).length;
    
    const winRate = totalGames > 0 ? Math.round((totalWins / totalGames) * 100) : 0;
    
    // Calculate best streak (simplified)
    let bestStreak = 0;
    let currentStreak = 0;
    
    for (const game of allStats) {
      const userWon = (game.player1Name === getCurrentUserName() && game.player1Score > game.player2Score) ||
                      (game.player2Name === getCurrentUserName() && game.player2Score > game.player1Score);
      
      if (userWon) {
        currentStreak++;
        bestStreak = Math.max(bestStreak, currentStreak);
      } else {
        currentStreak = 0;
      }
    }

    updateStatsDisplay({
      totalGames,
      totalWins,
      winRate,
      bestStreak
    });

  } catch (error) {
    console.error('Error loading game stats:', error);
    updateStatsDisplay({
      totalGames: 0,
      totalWins: 0,
      winRate: 0,
      bestStreak: 0
    });
  }
}

function updateStatsDisplay(stats: {
  totalGames: number;
  totalWins: number;
  winRate: number;
  bestStreak: number;
}): void {
  const totalGamesEl = document.getElementById('total-games');
  const totalWinsEl = document.getElementById('total-wins');
  const winRateEl = document.getElementById('win-rate');
  const bestStreakEl = document.getElementById('best-streak');

  if (totalGamesEl) totalGamesEl.textContent = stats.totalGames.toString();
  if (totalWinsEl) totalWinsEl.textContent = stats.totalWins.toString();
  if (winRateEl) winRateEl.textContent = `${stats.winRate}%`;
  if (bestStreakEl) bestStreakEl.textContent = stats.bestStreak.toString();
}

function getCurrentUserName(): string {
  // Use the getCurrentUser function from auth.ts
  try {
    const user = getCurrentUser();
    return user?.username || 'Jugador';
  } catch {
    return 'Jugador';
  }
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/gameLobby.ts ===[0m
import { UnifiedGameRenderer } from '../components/UnifiedGameRenderer';
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import './gameLobby.css';

interface GameLobbyState {
    gameId: string | null;
    playersConnected: number;
    countdownValue: number;
    countdownActive: boolean;
    gameStarted: boolean;
    playerNumber: number | null;
    opponentName: string | null;
}

class GameLobby {
    private container: HTMLElement;
    private ws: WebSocket | null = null;
    private state: GameLobbyState;
    private countdownInterval: number | null = null;
    private renderer: UnifiedGameRenderer | null = null;

    constructor(container: HTMLElement) {
        this.container = container;
        this.state = {
            gameId: null,
            playersConnected: 0,
            countdownValue: 3,
            countdownActive: false,
            gameStarted: false,
            playerNumber: null,
            opponentName: null
        };
    }

    public async init(): Promise<void> {
        this.render();
        await this.connectToGameService();
    }

    private async connectToGameService(): Promise<void> {
        try {
            const gameId = sessionStorage.getItem('currentGameId');
            if (!gameId) {
                console.error('No game ID found in session storage');
                navigateTo('/unified-game-online');
                return;
            }
            // LAN manual input prompt
            let serverHost = window.prompt('Introduce la IP o hostname del host (LAN):', window.location.hostname);
            if (!serverHost) serverHost = window.location.hostname;
            const currentUser = getCurrentUser();
            const username = encodeURIComponent(currentUser?.username || 'Usuario');
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${serverHost}:8002/pong/${gameId}?username=${username}`;
            this.ws = new WebSocket(wsUrl);

            this.ws.onopen = () => {
                console.log('Connected to game service [' + wsUrl + ']');
                // No need to send a join message, the connection itself handles joining
            };

            this.ws.onmessage = (event) => {
                this.handleWebSocketMessage(event);
            };

            this.ws.onclose = () => {
                console.log('Disconnected from game service');
                this.cleanup();
            };

            this.ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };

        } catch (error) {
            console.error('Failed to connect to game service:', error);
        }
    }


    private handleWebSocketMessage(event: MessageEvent): void {
        try {
            const data = JSON.parse(event.data);
            console.log('Received message:', data);

            switch (data.type) {
                case 'gameJoined':
                    this.state.gameId = data.gameId;
                    this.state.playerNumber = data.playerNumber;
                    this.state.playersConnected = data.playersConnected;
                    this.updateUI();
                    break;

                case 'playerJoined':
                    this.state.playersConnected = data.playersConnected;
                    if (data.playerName && data.playerNumber !== this.state.playerNumber) {
                        this.state.opponentName = data.playerName;
                    }
                    this.updateUI();
                    break;

                case 'countdownStart':
                    this.startCountdown();
                    break;

                case 'countdownUpdate':
                    this.state.countdownValue = data.count;
                    this.updateUI();
                    break;

                case 'gameStarted':
                    this.startGame();
                    break;

                case 'error':
                    console.error('Game service error:', data.message);
                    alert('Error: ' + data.message);
                    break;

                default:
                    console.log('Unknown message type:', data.type);
            }
        } catch (error) {
            console.error('Error parsing WebSocket message:', error);
        }
    }

    private startCountdown(): void {
        this.state.countdownActive = true;
        this.state.countdownValue = 3;
        this.updateUI();
    }

    private async startGame(): Promise<void> {
        console.log('Starting game...');
        this.state.gameStarted = true;
        this.state.countdownActive = false;

        // Clear the lobby UI
        this.container.innerHTML = '';

        // Create canvas element for the game
        const canvas = document.createElement('canvas');
        canvas.style.border = '2px solid #fff';
        canvas.style.display = 'block';
        canvas.style.margin = '0 auto';
        this.container.appendChild(canvas);
        
            // Initialize the game renderer and transfer the WebSocket connection
            this.renderer = new UnifiedGameRenderer(canvas, 'online');
            this.renderer.setCallbacks({
                onScoreUpdate: (score: { left: number; right: number }) => {
                    console.log('Score updated:', score);
                },
                onGameEnd: (winner: string) => {
                    console.log('Game ended, winner:', winner);
                    this.handleGameEnd(winner);
                }
            });

            // Transfer the existing WebSocket connection to the renderer
            if (this.state.gameId && this.state.playerNumber !== null && this.renderer && this.ws) {
                console.log('Transferring WebSocket connection to game renderer...');
                this.renderer.setWebSocketConnection(this.ws, this.state.gameId);
                this.renderer.startGame();
                
                // Transfer WebSocket message handling to the renderer
                this.ws.onmessage = (event) => {
                    try {
                        const message = JSON.parse(event.data);
                        this.renderer?.handleWebSocketMessage(message);
                    } catch (error) {
                        console.error('Error parsing WebSocket message in game:', error);
                    }
                };
                
                // Don't close the WebSocket in cleanup anymore since renderer owns it
                this.ws = null;
            }

            // Do NOT re-assign this.ws.onmessage (let renderer do it)
    }

    private handleGameEnd(winner: string): void {
        // Show game end screen or navigate back
        setTimeout(() => {
            navigateTo('/unified-game-online');
        }, 3000);
    }

    private updateUI(): void {
        if (this.state.gameStarted) {
            return; // Don't update UI once game has started
        }

        const lobbyHTML = `
            <div class="game-lobby">
                <div class="lobby-header">
                    <h1>Sala de Juego</h1>
                    ${this.state.gameId ? `<p class="game-id">ID: ${this.state.gameId}</p>` : ''}
                </div>

                <div class="players-section">
                    <div class="player-slot ${this.state.playerNumber === 1 ? 'current-player' : ''}">
                        <div class="player-info">
                            <h3>Jugador 1</h3>
                            <p>${this.state.playerNumber === 1 ? 'T√∫' : (this.state.opponentName || 'Waiting for a new challenger')}</p>
                        </div>
                        <div class="player-status ${this.state.playersConnected >= 1 ? 'connected' : 'waiting'}">
                            ${this.state.playersConnected >= 1 ? '‚úì Conectado' : '‚è≥ Esperando'}
                        </div>
                    </div>

                    <div class="vs-divider">VS</div>

                    <div class="player-slot ${this.state.playerNumber === 2 ? 'current-player' : ''}">
                        <div class="player-info">
                            <h3>Jugador 2</h3>
                            <p>${this.state.playerNumber === 2 ? 'T√∫' : (this.state.opponentName || 'Waiting for a new challenger')}</p>
                        </div>
                        <div class="player-status ${this.state.playersConnected >= 2 ? 'connected' : 'waiting'}">
                            ${this.state.playersConnected >= 2 ? '‚úì Conectado' : '‚è≥ Esperando'}
                        </div>
                    </div>
                </div>

                ${this.state.countdownActive ? `
                    <div class="countdown-section">
                        <div class="countdown-circle">
                            <span class="countdown-number">${this.state.countdownValue}</span>
                        </div>
                        <p class="countdown-text">¬°El juego comenzar√° pronto!</p>
                    </div>
                ` : ''}

                ${this.state.playersConnected < 2 ? `
                    <div class="waiting-section">
                        <div class="loading-spinner"></div>
                        <p>Esperando a que se conecte otro jugador...</p>
                    </div>
                ` : ''}

                <div class="lobby-actions">
                    <button class="btn-secondary" onclick="window.gameLobby.leaveLobby()">
                        Abandonar Sala
                    </button>
                </div>
            </div>
        `;

        this.container.innerHTML = lobbyHTML;
    }

    private render(): void {
        this.updateUI();
    }

    public leaveLobby(): void {
        this.cleanup();
        navigateTo('/unified-game-online');
    }

    private cleanup(): void {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }

        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }

        if (this.renderer) {
            this.renderer.cleanup();
            this.renderer = null;
        }
    }

    public destroy(): void {
        this.cleanup();
    }
}

// Export for global access
export { GameLobby };

// Global instance for button handlers
declare global {
    interface Window {
        gameLobby: GameLobby;
    }
}

// Funci√≥n de renderizado para el router
export function renderGameLobby(): void {
    const container = document.getElementById('page-content');
    if (!container) {
        console.error('Container #page-content not found');
        return;
    }

    // Crear instancia del lobby
const gameLobby = new GameLobby(container);
    
    // Hacer disponible globalmente para los botones
    window.gameLobby = gameLobby;
    
    // Inicializar el lobby
    gameLobby.init();
}
[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/home.ts ===[0m
// src/pages/home.ts

import { navigateTo } from '../router';
import { getTranslation } from '../i18n';

export function renderHomePage(): void {
    const homeHtml = `
        <main class="flex-grow w-full p-4 sm:p-8 flex flex-col items-center gap-8 text-gray-100 animate__animated animate__fadeIn">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-7xl w-full animate__animated animate__fadeInUp">
              <div
                  id="welcome-card"
                  class="rounded-3xl p-6 sm:p-8 lg:p-10 bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl border border-[#003566] shadow-2xl text-center transition-all duration-500 ease-in-out transform hover:scale-[1.01] hover:shadow-custom-deep flex flex-col justify-between"
              >
                  <div>
                      <h2 class="text-4xl sm:text-5xl lg:text-6xl font-display font-extrabold mb-6 text-[#ffc300] drop-shadow-md leading-tight">
                          ${getTranslation('home', 'welcomeTitle')} <span class="text-[#ffd60a]">Transcendence</span>!
                      </h2>
                      <p class="text-base sm:text-lg md:text-xl text-gray-300 mb-8">
                          ${getTranslation('home', 'welcomeSubtitle')}
                      </p>
                  </div>
                  <div class="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6 pt-6 pb-6 mt-auto">
                      <button id="play-button"
                          class="bg-gradient-to-r from-[#ffc300] to-[#ffd60a] text-[#000814] py-4 px-10 rounded-xl font-bold text-xl sm:text-2xl hover:from-[#ffd60a] hover:to-[#ffc300] transition-all duration-300 shadow-lg transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-[#ffc300] focus:ring-opacity-75"
                      >
                          ${getTranslation('home', 'playNowButton')}
                      </button>
                      <button id="tournaments-button"
                          type="button"
                          class="border-2 border-[#003566] text-[#ffc300] py-4 px-10 rounded-xl font-semibold text-xl sm:text-2xl hover:bg-[#001d3d] hover:text-white transition-all duration-300 shadow transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-[#003566] focus:ring-opacity-75"
                      >
                          ${getTranslation('home', 'viewTournamentsButton')}
                      </button>
                  </div>
              </div>

              <div
                  id="live-matches-box"
                  class="rounded-3xl p-4 sm:p-6 bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl border border-[#003566] shadow-2xl flex flex-col transition-all duration-500 ease-in-out hover:scale-[1.01] hover:shadow-custom-deep"
              >
                  <h3 class="text-2xl sm:text-3xl font-display font-extrabold text-[#ffc300] drop-shadow-md mb-6 text-center">
                      ${getTranslation('home', 'liveMatchesTitle')}
                  </h3>
                  <p class="text-base sm:text-lg text-gray-300 mb-6 text-center">
                      ${getTranslation('home', 'liveMatchesSubtitle')}
                  </p>
                  <div id="live-matches-container" class="flex-grow space-y-4 overflow-y-auto max-h-96 pr-2 custom-scrollbar"></div>
              </div>
          </div>

          <section class="w-full max-w-7xl mt-16 grid grid-cols-1 md:grid-cols-2 gap-8 mx-auto animate__animated animate__fadeInUp animate__delay-1s">
              <a href="/profile" class="block rounded-3xl p-4 sm:p-6 bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl border border-[#003566] shadow-2xl hover:shadow-custom-deep hover:scale-[1.01] transition-all duration-500">
                  <h3 class="text-xl sm:text-2xl font-display font-bold text-[#ffc300] mb-3">
                      ${getTranslation('home', 'yourProfileTitle')}
                  </h3>
                  <p class="text-sm sm:text-base text-gray-300">
                      ${getTranslation('home', 'yourProfileSubtitle')}
                  </p>
              </a>
              <a href="/ranking" class="block rounded-3xl p-4 sm:p-6 bg-white bg-opacity-5 backdrop-filter backdrop-blur-xl border border-[#003566] shadow-2xl hover:shadow-custom-deep hover:scale-[1.01] transition-all duration-500">
                  <h3 class="text-xl sm:text-2xl font-display font-bold text-[#ffc300] mb-3">
                      ${getTranslation('home', 'globalRankingTitle')}
                  </h3>
                  <p class="text-sm sm:text-base text-gray-300">
                      ${getTranslation('home', 'globalRankingSubtitle')}
                  </p>
              </a>
          </section>
        </main>
        <style>
            /* Custom Scrollbar for Match History */
            .custom-scrollbar::-webkit-scrollbar {
                width: 8px;
            }

            .custom-scrollbar::-webkit-scrollbar-track {
                background: #001d3d; /* Darker track */
                border-radius: 10px;
            }

            .custom-scrollbar::-webkit-scrollbar-thumb {
                background: #003566; /* Match border color */
                border-radius: 10px;
            }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background: #004b80; /* Slightly lighter on hover */
            }

            .animate__animated.animate__fadeIn {
                animation-duration: 0.5s;
            }

            .animate__animated.animate__fadeInUp {
                animation-duration: 0.8s;
            }

            .animate__animated.animate__delay-1s {
                animation-delay: 0.5s; /* Adjusted delay for better flow */
            }

            /* Custom Shadow for Hover Effect (deeper glow) */
            .hover\\:shadow-custom-deep:hover {
                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 0 50px rgba(255, 195, 0, 0.3); /* Deeper, yellowish glow */
            }
        </style>
    `;

    const pageContent = document.getElementById('page-content') as HTMLElement;
    if (pageContent) {
        pageContent.innerHTML = homeHtml;

        // Listener para el bot√≥n "Jugar Ahora"
        const playButton = document.getElementById('play-button');
        if (playButton) {
            playButton.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/play');
            });
        }

        // Listener para el bot√≥n "Ver Torneos"
        const tournamentsButton = document.getElementById('tournaments-button');
        if (tournamentsButton) {
            tournamentsButton.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/play'); // Asumiendo que Ver Torneos tambi√©n navega a la p√°gina de juego
            });
        }

        // Listeners para las tarjetas de "Tu Perfil" y "Ranking Global"
        const profileCardLink = document.querySelector('section a[href="/profile"]');
        if (profileCardLink) {
            profileCardLink.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/profile');
            });
        }

        const rankingsCardLink = document.querySelector('section a[href="/ranking"]');
        if (rankingsCardLink) {
            rankingsCardLink.addEventListener('click', (event) => {
                event.preventDefault();
                navigateTo('/ranking');
            });
        }

        // Event delegation para los enlaces de partidos en vivo
        document.querySelectorAll('#live-matches-box a').forEach(link => {
            link.addEventListener('click', (event) => {
                const href = link.getAttribute('href');
                if (href && href.startsWith('/match/')) {
                    event.preventDefault();
                    console.log(`Navegando a partida: ${href}`);
                    // En lugar de navegar, solo mostramos informaci√≥n del match
                    alert(`Esta es una funcionalidad de demostraci√≥n. Partida: ${href}`);
                }
            });
        renderLiveMatches();
        });

    } else {
        console.error('Elemento con id "page-content" no encontrado para renderizar la p√°gina de inicio.');
    }
}

function renderLiveMatches(): void {
    const liveMatchesBox = document.getElementById('live-matches-box');
    if (!liveMatchesBox) return;

    // Limpiar contenido anterior si existe
    liveMatchesBox.innerHTML = '';

    const container = document.createElement('div');
    container.className = 'flex-grow space-y-4 overflow-y-auto max-h-96 pr-2 custom-scrollbar';

    fetch('/api/auth/games/live')
        .then((res) => res.json())
        .then((games) => {
            if (!games.length) {
                container.innerHTML = `
                    <p class="text-gray-400 text-center">
                        ${getTranslation('home', 'noLiveMatches')}
                    </p>
                `;
            } else {
                for (const game of games) {
                    const html = `
                        <a href="/match/${game.id}" class="block p-4 rounded-xl bg-[#001d3d] bg-opacity-50 text-gray-100 hover:bg-opacity-70 transition-all duration-200 shadow-md hover:shadow-lg cursor-pointer group border border-[#003566]">
                            <div class="flex justify-between items-center">
                                <span class="font-semibold text-base sm:text-lg">
                                    ${game.player1.username} <span class="text-[#ffc300]">${getTranslation('home', 'vs')}</span> ${game.player2.username}
                                </span>
                                <span class="text-xl sm:text-2xl font-bold text-[#ffd60a]">${game.score1} - ${game.score2}</span>
                            </div>
                            <p class="text-sm text-gray-400 mt-1">
                                ${getTranslation('home', 'inProgressRound')} ${game.round}
                            </p>
                        </a>
                    `;
                    container.innerHTML += html;
                }
            }
            liveMatchesBox.appendChild(container);
        })
        .catch((err) => {
            console.error('Error al obtener partidas en vivo:', err);
            container.innerHTML = `<p class="text-red-400 text-center">${getTranslation('home', 'errorLoadingMatches')}</p>`;
            liveMatchesBox.appendChild(container);
        });
}[1;30m----------------------------------------[0m

[1;34m=== ./src/pages/unifiedGameOnline.ts ===[0m
import { getCurrentUser } from '../auth';
import { navigateTo } from '../router';

let refreshInterval: number | null = null;

export function renderUnifiedGameOnline(): void {
  const content = document.getElementById('page-content');

  if (!content) {
    console.error('No se encontr√≥ el contenedor principal.');
    return;
  }

  content.innerHTML = `
    <div class="w-full max-w-6xl mx-auto p-8">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">
          üåê Modo Online
        </h1>
        <p class="text-lg text-gray-300">Crea una nueva partida o √∫nete a una existente</p>
      </div>
      
      <!-- Secci√≥n Crear Partida -->
      <div class="bg-gradient-to-r from-green-800 to-green-900 rounded-lg p-6 mb-8 border-2 border-green-600">
        <h2 class="text-2xl font-bold mb-4 text-center text-green-300">
          ‚ûï Crear Nueva Partida Online
        </h2>
        <div class="text-center">
          <button id="create-game" class="bg-green-500 text-white py-3 px-8 rounded-xl hover:bg-green-600 transition-all duration-200 text-lg font-semibold transform hover:scale-105 shadow-lg">
            üéÆ Crear Partida Online
          </button>
          <p class="text-sm text-green-200 mt-3">
            Crea una nueva partida y espera a que se una un oponente
          </p>
        </div>
      </div>

      <!-- Secci√≥n Unirse a Partida -->
      <div class="bg-gradient-to-r from-blue-800 to-blue-900 rounded-lg p-6 mb-8 border-2 border-blue-600">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-blue-300">üîç Partidas Disponibles</h2>
          <div class="flex gap-3">
            <button id="refresh-games" class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-200 transform hover:scale-105">
              üîÑ Actualizar
            </button>
            <div id="auto-refresh-toggle" class="flex items-center">
              <input type="checkbox" id="auto-refresh" class="mr-2" checked>
              <label for="auto-refresh" class="text-blue-200 text-sm">Auto-actualizar</label>
            </div>
          </div>
        </div>
        
        <div id="games-container" class="space-y-4">
          <div class="text-center py-8">
            <div class="animate-spin inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mb-4"></div>
            <p class="text-blue-300">üîÑ Cargando partidas disponibles...</p>
          </div>
        </div>
      </div>

      <!-- Estad√≠sticas Online -->
      <div class="bg-gradient-to-r from-purple-800 to-purple-900 rounded-lg p-6 mb-8 border-2 border-purple-600">
        <h3 class="text-xl font-bold mb-4 text-center text-purple-300">üìä Estado del Servidor</h3>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div>
            <div class="text-2xl font-bold text-green-400" id="total-online-games">-</div>
            <div class="text-xs text-purple-200">Partidas Totales</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-yellow-400" id="waiting-games">-</div>
            <div class="text-xs text-purple-200">Esperando Jugadores</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-blue-400" id="active-games">-</div>
            <div class="text-xs text-purple-200">En Juego</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-red-400" id="spectators-count">-</div>
            <div class="text-xs text-purple-200">Espectadores</div>
          </div>
        </div>
      </div>

      <!-- Bot√≥n Volver -->
      <div class="text-center">
        <button id="back-to-play" class="bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105">
          ‚Üê Volver al Men√∫ Principal
        </button>
      </div>
    </div>
  `;

  // Event listeners
  document.getElementById('create-game')?.addEventListener('click', createNewGame);
  document.getElementById('refresh-games')?.addEventListener('click', loadAvailableGames);
  document.getElementById('back-to-play')?.addEventListener('click', () => {
    cleanupOnlineMode();
    navigateTo('/play');
  });

  // Auto-refresh toggle
  const autoRefreshCheckbox = document.getElementById('auto-refresh') as HTMLInputElement;
  autoRefreshCheckbox?.addEventListener('change', toggleAutoRefresh);

  // Cargar partidas al inicializar
  loadAvailableGames();
  startAutoRefresh();
}

function startAutoRefresh(): void {
  if (refreshInterval) {
    clearInterval(refreshInterval);
  }
  
  refreshInterval = window.setInterval(() => {
    const autoRefreshCheckbox = document.getElementById('auto-refresh') as HTMLInputElement;
    if (autoRefreshCheckbox?.checked) {
      loadAvailableGames();
    }
  }, 5000); // Actualizar cada 5 segundos
}

function stopAutoRefresh(): void {
  if (refreshInterval) {
    clearInterval(refreshInterval);
    refreshInterval = null;
  }
}

function toggleAutoRefresh(): void {
  const autoRefreshCheckbox = document.getElementById('auto-refresh') as HTMLInputElement;
  if (autoRefreshCheckbox?.checked) {
    startAutoRefresh();
  } else {
    stopAutoRefresh();
  }
}

function cleanupOnlineMode(): void {
  stopAutoRefresh();
}

async function createNewGame(): Promise<void> {
  const createButton = document.getElementById('create-game') as HTMLButtonElement;
  if (!createButton) return;

  // LAN manual input prompt
  let serverHost = window.prompt('Introduce la IP o hostname del host (LAN):', window.location.hostname);
  if (!serverHost) serverHost = window.location.hostname;

  // Deshabilitar bot√≥n mientras se crea la partida
  createButton.disabled = true;
  createButton.innerHTML = '‚è≥ Creando partida...';

  try {
    const currentUser = getCurrentUser();
    const gameName = `Partida de ${currentUser?.username || 'Usuario'} - ${new Date().toLocaleTimeString()}`;
    
    const response = await fetch('/api/games', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({ 
        nombre: gameName, 
        gameMode: 'pvp', 
        maxPlayers: 2,
        playerName: currentUser?.username || 'Usuario'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const game = await response.json();
    console.log('‚úÖ Partida creada:', game);
    
    // Mostrar mensaje de √©xito
    showNotification('‚úÖ Partida creada exitosamente! Dirigi√©ndote al lobby...', 'success');
    
    // Guardar informaci√≥n de la partida
    sessionStorage.setItem('currentGameId', game.id);
    sessionStorage.setItem('currentGameMode', 'pvp');
    sessionStorage.setItem('isGameCreator', 'true');
    
    // Actualizar lista inmediatamente
    setTimeout(() => {
      loadAvailableGames();
    }, 1000);
    
    // Redirigir al lobby despu√©s de un breve delay
    setTimeout(() => {
      navigateTo('/game-lobby');
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Error creando partida:', error);
    showNotification('‚ùå Error al crear la partida. Int√©ntalo de nuevo.', 'error');
    
    // Restaurar bot√≥n
    createButton.disabled = false;
    createButton.innerHTML = 'üéÆ Crear Partida Online';
  }
}

async function loadAvailableGames(): Promise<void> {
  const gamesContainer = document.getElementById('games-container');
  if (!gamesContainer) return;

  try {
    const response = await fetch('/api/games', {
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('üìã Partidas recibidas:', data);
    
    // Actualizar estad√≠sticas del servidor
    updateServerStats(data.games || []);
    
    // Filtrar solo partidas disponibles (no llenas y no en juego)
    const availableGames = (data.games || []).filter((game: any) => 
      game.jugadoresConectados < game.capacidadMaxima && !game.enJuego
    );

    if (availableGames.length === 0) {
      gamesContainer.innerHTML = `
        <div class="bg-gray-700 rounded-lg p-8 text-center border-2 border-gray-600">
          <div class="text-6xl mb-4">üò¥</div>
          <h3 class="text-xl font-bold text-gray-300 mb-2">No hay partidas disponibles</h3>
          <p class="text-gray-400 mb-4">No se encontraron partidas disponibles para unirse en este momento.</p>
          <p class="text-sm text-gray-500">üí° ¬°Crea tu propia partida para empezar a jugar!</p>
        </div>
      `;
      return;
    }

    // Renderizar partidas disponibles
    gamesContainer.innerHTML = availableGames.map((game: any) => {
      const isCreatedByMe = sessionStorage.getItem('currentGameId') === game.id;
      return `
        <div class="bg-gray-700 rounded-lg p-6 border-2 ${isCreatedByMe ? 'border-green-500 bg-green-900/20' : 'border-gray-600 hover:border-blue-500'} transition-all duration-200 hover:shadow-lg">
          <div class="flex justify-between items-center">
            <div class="flex-1">
              <div class="flex items-center mb-3">
                <div class="text-2xl mr-3">üéÆ</div>
                <div>
                  <h3 class="text-lg font-bold text-white flex items-center">
                    ${game.nombre || `Partida ${game.id.substring(0, 8)}`}
                    ${isCreatedByMe ? '<span class="ml-2 text-xs bg-green-500 text-white px-2 py-1 rounded-full">TU PARTIDA</span>' : ''}
                  </h3>
                  <p class="text-sm text-gray-400">ID: ${game.id.substring(0, 12)}...</p>
                </div>
              </div>
              
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div class="flex items-center">
                  <span class="text-gray-400 mr-2">üë•</span>
                  <span class="text-white font-semibold">${game.jugadoresConectados}/${game.capacidadMaxima}</span>
                </div>
                <div class="flex items-center">
                  <span class="text-gray-400 mr-2">üéØ</span>
                  <span class="text-white font-semibold">${game.gameMode === 'pvp' ? 'PvP' : 'PvE'}</span>
                </div>
                <div class="flex items-center">
                  <span class="text-gray-400 mr-2">‚è±Ô∏è</span>
                  <span class="text-yellow-400 font-semibold">
                    ${game.enJuego ? 'üéÆ En Juego' : '‚è≥ Esperando'}
                  </span>
                </div>
                <div class="flex items-center">
                  <span class="text-gray-400 mr-2">üïê</span>
                  <span class="text-white font-semibold text-xs">${new Date(game.createdAt || Date.now()).toLocaleTimeString()}</span>
          joinGame(gameId);
              </div>
              
              ${game.jugadores && game.jugadores.length > 0 ? `
                <div class="mt-3 pt-3 border-t border-gray-600">
                  <div class="text-xs text-gray-400 mb-1">Jugadores:</div>
                  <div class="flex flex-wrap gap-2">
                    ${game.jugadores.map((jugador: any) => `
                      <span class="bg-blue-600 text-white px-2 py-1 rounded text-xs">
                        ${jugador.nombre} (#${jugador.numero})
                      </span>
                    `).join('')}
                  </div>
                </div>
              ` : ''}
            </div>
            
            <div class="ml-6">
              <button 
                class="join-game-btn ${isCreatedByMe ? 'bg-green-500 hover:bg-green-600' : 'bg-blue-500 hover:bg-blue-600'} text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105"
                data-game-id="${game.id}"
                ${game.jugadoresConectados >= game.capacidadMaxima ? 'disabled' : ''}
              >
                ${game.jugadoresConectados >= game.capacidadMaxima ? 'üö´ Llena' : 
                  isCreatedByMe ? 'üéÆ Entrar' : '‚û°Ô∏è Unirse'}
              </button>
            </div>
          </div>
        </div>
      `;
    }).join('');

    // Agregar event listeners a los botones de unirse
    document.querySelectorAll('.join-game-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const gameId = (e.target as HTMLElement).getAttribute('data-game-id');
        if (gameId) {
joinGame(gameId);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå Error cargando partidas:', error);
    gamesContainer.innerHTML = `
      <div class="bg-red-800 rounded-lg p-6 text-center border-2 border-red-600">
        <div class="text-4xl mb-4">‚ùå</div>
        <h3 class="text-xl font-bold text-red-200 mb-2">Error al cargar partidas</h3>
        <p class="text-red-300 mb-4">${error instanceof Error ? error.message : 'Error desconocido'}</p>
        <button id="retry-load" class="bg-red-600 text-white font-semibold py-2 px-4 rounded hover:bg-red-700 transition">
          üîÑ Reintentar
        </button>
      </div>
    `;
    
    document.getElementById('retry-load')?.addEventListener('click', loadAvailableGames);
  }
}

function updateServerStats(games: any[]): void {
  const totalGames = games.length;
  const waitingGames = games.filter(g => !g.enJuego && g.jugadoresConectados < g.capacidadMaxima).length;
  const activeGames = games.filter(g => g.enJuego).length;
  const totalSpectators = games.reduce((sum, g) => sum + (g.espectadores || 0), 0);

  const totalEl = document.getElementById('total-online-games');
  const waitingEl = document.getElementById('waiting-games');
  const activeEl = document.getElementById('active-games');
  const spectatorsEl = document.getElementById('spectators-count');

  if (totalEl) totalEl.textContent = totalGames.toString();
  if (waitingEl) waitingEl.textContent = waitingGames.toString();
  if (activeEl) activeEl.textContent = activeGames.toString();
  if (spectatorsEl) spectatorsEl.textContent = totalSpectators.toString();
}

async function joinGame(gameId: string): Promise<void> {
  const joinButton = document.querySelector(`[data-game-id="${gameId}"]`) as HTMLButtonElement;
  if (!joinButton) return;

  // LAN manual input prompt
  let serverHost = window.prompt('Introduce la IP o hostname del host (LAN):', window.location.hostname);
  if (!serverHost) serverHost = window.location.hostname;

  // Deshabilitar bot√≥n mientras se une a la partida
  const originalText = joinButton.innerHTML;
  joinButton.disabled = true;
  joinButton.innerHTML = '‚è≥ Uni√©ndose...';

  try {
    console.log(`üîó Intentando unirse a la partida ${gameId}...`);
    
    // Verificar que la partida a√∫n est√© disponible
    const response = await fetch(`/api/games/${gameId}`, {
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const game = await response.json();
    console.log('üìã Informaci√≥n de la partida:', game);
    
    // Validar disponibilidad
    if (game.jugadoresConectados >= game.capacidadMaxima) {
      showNotification('‚ùå La partida est√° llena. Intenta con otra partida.', 'error');
      loadAvailableGames(); // Recargar la lista
      return;
    }
    
    if (game.enJuego) {
      showNotification('‚ùå La partida ya est√° en progreso. Intenta con otra partida.', 'error');
      loadAvailableGames(); // Recargar la lista
      return;
    }
    
    console.log('‚úÖ Uni√©ndose a la partida:', game);
    
    // Mostrar mensaje de √©xito
    showNotification('‚úÖ Te has unido a la partida! Dirigi√©ndote al juego...', 'success');
    
    // Guardar informaci√≥n de la partida
    sessionStorage.setItem('currentGameId', gameId);
    sessionStorage.setItem('currentGameMode', 'pvp');
    sessionStorage.removeItem('isGameCreator'); // No somos el creador
    
    // Redirigir al lobby despu√©s de un breve delay
    setTimeout(() => {
      navigateTo('/game-lobby');
    }, 1500);
    
  } catch (error) {
    console.error('‚ùå Error uni√©ndose a la partida:', error);
    showNotification('‚ùå Error al unirse a la partida. Int√©ntalo de nuevo.', 'error');
    
    // Restaurar bot√≥n
    joinButton.disabled = false;
    joinButton.innerHTML = originalText;
  }
}

function showNotification(message: string, type: 'success' | 'error'): void {
  // Remover notificaciones existentes
  document.querySelectorAll('.notification').forEach(n => n.remove());
  
  // Crear elemento de notificaci√≥n
  const notification = document.createElement('div');
  notification.className = `notification fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full max-w-md`;
  
  if (type === 'success') {
    notification.className += ' bg-green-500 text-white border-2 border-green-400';
  } else {
    notification.className += ' bg-red-500 text-white border-2 border-red-400';
  }
  
  notification.innerHTML = `
    <div class="flex items-center">
      <span class="mr-2 text-xl">${type === 'success' ? '‚úÖ' : '‚ùå'}</span>
      <span class="font-medium">${message}</span>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Animar entrada
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);
  
  // Remover despu√©s de 4 segundos
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 4000);
}

// Limpiar al salir de la p√°gina
window.addEventListener('beforeunload', cleanupOnlineMode);
[1;30m----------------------------------------[0m

[1;34m=== ./src/input.css ===[0m
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Importar temas */
[1;30m----------------------------------------[0m

[1;34m=== ./src/types/google.d.ts ===[0m
declare global {
  interface Window {
    google?: {
      accounts: {
        id: {
          initialize: (config: any) => void;
          renderButton: (element: HTMLElement, config: any) => void;
        };
      };
    };
  }
}

export {};
[1;30m----------------------------------------[0m

[1;34m=== ./src/main.ts ===[0m
// src/main.ts

import { navigateTo } from './router';
import { renderNavbar } from './components/navbar';
import { getCurrentLanguage, setLanguage } from './i18n';

// Funci√≥n para inicializar la aplicaci√≥n
function initializeApp(): void {
    console.log('üöÄ Inicializando Transcendence...');

    const savedLang = localStorage.getItem('lang') || 'es';
    setLanguage(savedLang)
    
    const currentPath = window.location.pathname;

    renderNavbar(currentPath); // üëà esto es lo que faltaba
    navigateTo(currentPath);
    
    console.log('‚úÖ Transcendence inicializado correctamente');
}

// Esperar a que el DOM est√© cargado
document.addEventListener('DOMContentLoaded', initializeApp);

window.addEventListener('languageChanged', () => {
  const currentPath = window.location.pathname;
  renderNavbar(currentPath);
  navigateTo(currentPath);
});
 [1;30m----------------------------------------[0m

[1;34m=== ./nginx.conf ===[0m

server {
    listen 8080; # Nginx within frontend container listens on 8080
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /api/auth/ {
        proxy_pass http://api-gateway:8000/api/auth/; # Redirect to API Gateway
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/games {
        proxy_pass http://game-service:8000/api/games; # Direct to game-service for game API
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/game/ {
        proxy_pass http://game-service:8000/api/game/; # Direct to game-service for game API
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket proxy for game connections
    location /pong/ {
        proxy_pass http://game-service:8000/pong/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket proxy for observer connections
    location /observar {
        proxy_pass http://game-service:8000/observar;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
[1;30m----------------------------------------[0m

[1;34m=== ./package.json ===[0m
{
	"name": "transcendance-frontend",
	"version": "1.0.0",
	"description": "Frontend-only de Transcendance Pong con datos hardcodeados",
	"scripts": {
	  "start": "webpack serve --config webpack.config.js --mode development",
	  "build": "webpack --config webpack.config.js --mode production",
	  "dev": "webpack serve --config webpack.config.js --mode development",
	  "test": "echo \"Error: no test specified\" && exit 1"
	},
	"keywords": ["pong", "frontend", "typescript", "tailwind"],
	"author": "transcendance",
	"license": "MIT",
	"devDependencies": {
  	  "@types/node": "^20.x.x",
	  "autoprefixer": "^10.4.19",
	  "clean-webpack-plugin": "^4.0.0",
	  "css-loader": "^7.1.2",
	  "html-webpack-plugin": "^5.6.0",
	  "postcss": "^8.4.38",
	  "postcss-loader": "^8.1.1",
	  "style-loader": "^4.0.0",
	  "tailwindcss": "^3.4.4",
	  "ts-loader": "^9.5.1",
	  "typescript": "^5.4.5",
	  "webpack": "^5.91.0",
	  "webpack-cli": "^5.1.4",
	  "webpack-dev-server": "^5.0.4"
	}
}
[1;30m----------------------------------------[0m

[1;34m=== ./webpack.config.js ===[0m
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const webpack = require('webpack');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    filename: 'bundle.[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/'
  },
  resolve: {
    extensions: ['.ts', '.js'],
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: 'ts-loader',
        exclude: /node_modules/,
      },
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      template: './index.html',
      filename: 'index.html',
    }),
    new webpack.DefinePlugin({
      'process.env.VITE_GOOGLE_CLIENT_ID': JSON.stringify(process.env.VITE_GOOGLE_CLIENT_ID || ''),
    }),
  ],
  devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
    compress: true,
    port: 8080,
    open: true,
    historyApiFallback: true, // Esto es CRUCIAL para SPAs
  },
};
[1;30m----------------------------------------[0m

[1;34m=== ./index.html ===[0m
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="description" content="Transcendence - A modern Pong game experience with online multiplayer, AI, and multiple game modes" />
    <meta name="keywords" content="pong, game, multiplayer, online, transcendence, paddle, ball" />
    <meta name="theme-color" content="#000814" />
    <title>Transcendence</title>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <link rel="icon" href="data:image/svg+xml,%3csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22%3e%3ctext y=%22.9em%22 font-size=%2290%22%3eüèì%3c/text%3e%3c/svg%3e">
    
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Montserrat:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              'primary-bg': '#000814',
              'secondary-bg': '#001d3d', 
              'tertiary-bg': '#003566',
              'accent': '#ffc300',
              'accent-light': '#ffd60a',
              'text-primary': '#ffd60a',
              'text-secondary': '#003566'
            },
            fontFamily: {
              'inter': ['Inter', 'system-ui', 'sans-serif'],
              'display': ['Montserrat', 'Inter', 'system-ui', 'sans-serif']
            },
            animation: {
              'spin-slow': 'spin 1s linear infinite',
              'fade-in': 'fadeIn 0.5s ease-in-out',
              'slide-up': 'slideUp 0.3s ease-out'
            },
            keyframes: {
              fadeIn: {
                '0%': { opacity: '0', transform: 'translateY(10px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' }
              },
              slideUp: {
                '0%': { opacity: '0', transform: 'translateY(20px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' }
              }
            },
            screens: {
              'xs': '320px',
              'sm': '640px', 
              'md': '768px',
              'lg': '1024px',
              'xl': '1280px',
              '2xl': '1536px'
            }
          }
        }
      }
    </script>
    
    <style>
      /* Essential browser fixes that can't be done with Tailwind */
      html, body {
        overflow-x: hidden;
        scroll-behavior: smooth;
        /* Safari viewport fixes */
        min-height: 100vh;
        min-height: -webkit-fill-available;
      }
      
      body {
        -webkit-overflow-scrolling: touch;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
        /* Safari rendering improvements */
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        /* Safari fix for viewport height */
        min-height: 100vh;
        min-height: -webkit-fill-available;
      }
      
      /* Prevent text selection on interactive elements */
      button, .no-select {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      /* Loading spinner animation */
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .loading-spinner {
        animation: spin 1s linear infinite;
      }
      
      /* Webkit scrollbar styling */
      ::-webkit-scrollbar {
        width: 8px;
      }
      
      ::-webkit-scrollbar-track {
        background: #000814;
      }
      
      ::-webkit-scrollbar-thumb {
        background: #003566;
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb:hover {
        background: #ffc300;
      }
      
      /* Safari-specific game container fixes */
      .game-container {
        /* Safari viewport fix */
        height: 100vh;
        height: -webkit-fill-available;
        /* Safari touch optimization */
        -webkit-user-select: none;
        -webkit-touch-callout: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      /* Safari canvas optimization */
      canvas {
        -webkit-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        /* Safari touch events */
        touch-action: none;
      }
      
      /* Safari button fixes */
      button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border: none;
        outline: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      /* Safari input fixes */
      input, textarea {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: 0;
      }
      
      /* Safari safe area support */
      @supports (padding: max(0px)) {
        .safe-area-top {
          padding-top: max(1rem, env(safe-area-inset-top));
        }
        
        .safe-area-bottom {
          padding-bottom: max(1rem, env(safe-area-inset-bottom));
        }
        
        .safe-area-left {
          padding-left: max(1rem, env(safe-area-inset-left));
        }
        
        .safe-area-right {
          padding-right: max(1rem, env(safe-area-inset-right));
        }
      }
    </style>
  </head>
  <body
    class="min-h-screen bg-gradient-to-br from-[#000814] via-[#001d3d] to-[#003566] font-inter text-gray-100 antialiased leading-relaxed"
  >
    <div id="app-root" class="flex flex-col min-h-screen relative z-10 w-full max-w-full overflow-x-hidden"></div>
    
    <!-- Loading indicator for better UX -->
    <div id="global-loading" class="fixed inset-0 bg-[#000814] bg-opacity-90 flex items-center justify-center z-50" style="display: none;">
      <div class="text-center">
        <div class="border-4 border-[#ffc300]/30 border-t-[#ffc300] rounded-full w-10 h-10 animate-spin mx-auto mb-4"></div>
        <p class="text-[#ffc300] text-lg font-semibold">Loading...</p>
      </div>
    </div>
  </body>
</html>
[1;30m----------------------------------------[0m

[1;34m=== ./frontend.txt ===[0m
[1;30m----------------------------------------[0m

[1;34m=== ./Dockerfile ===[0m
# Build stage
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm install && npm install --save-dev @types/node && npm install --save-dev @types/google.accounts
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=builder /app/dist/ /usr/share/nginx/html/
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
[1;30m----------------------------------------[0m
