
services:
  # Servicio de Autenticación y Perfiles de Usuario
  auth-service:
    build: ./auth-service
    image: auth-service
    container_name: auth-service
    ports:
      - "8001:8000" # Mapea el puerto 8000 interno a 8001 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      - db-service
      - vault
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Juego (Pong)
  game-service:
    build: ./game-service
    image: game-service
    container_name: game-service
    ports:
      - "8002:8000" # Mapea el puerto 8000 interno a 8002 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      - db-service
      - auth-service
      - vault
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Chat
  chat-service:
    build: ./chat-service
    image: chat-service
    container_name: chat-service
    ports:
      - "8003:8000" # Mapea el puerto 8000 interno a 8003 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      - db-service
      - auth-service
      - vault
    networks:
      - transcendence_net
    restart: on-failure

  # Pasarela API (API Gateway)
  api-gateway:
    build: ./api-gateway
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:8000" # Mapea el puerto 8000 interno a 9000 en el host
    environment:
      AUTH_SERVICE_URL: "http://auth-service:8000" # Apunta al puerto interno del servicio
      GAME_SERVICE_URL: "http://game-service:8000"
      CHAT_SERVICE_URL: "http://chat-service:8000"
    depends_on:
      - auth-service
      - game-service
      - chat-service
    networks:
      - transcendence_net
    restart: on-failure

  # Frontend
  frontend:
    build: ./frontend
    image: frontend
    container_name: frontend
    ports:
      - "9001:8080" # El Nginx del frontend usará el puerto 8080 interno
    depends_on:
      - api-gateway
    networks:
      - transcendence_net
    restart: on-failure

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:latest
    container_name: hashicorp_vault
    ports:
      - "8200:8200" # Vault ya usa un puerto no privilegiado por defecto
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - transcendence_net
    restart: on-failure

  # WAF (Web Application Firewall) - Nginx con ModSecurity como ejemplo
  waf:
    image: owasp/modsecurity-crs:nginx
    container_name: WAF
    ports:
      - "9002:8080" # El WAF escuchará en 9002 en el host
    environment:
      MODSECURITY_RULES_PATH: "/etc/nginx/modsecurity/modsecurity.conf"
      PROXY_PASS: "http://frontend:8080" # Apunta al puerto interno del frontend
    volumes:
      - ./nginx-waf/modsecurity.conf:/etc/nginx/modsecurity/modsecurity.conf:ro
    depends_on:
      - frontend
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Base de Datos (API de acceso a SQLite)
  db-service:
    build: ./db-service
    image: db-service
    container_name: db-service
    ports:
      - "8005:8000" # Mapea el puerto 8000 interno a 8005 en el host
    volumes:
      - db_data:/app/data # Monta un volumen para persistir la base de datos SQLite
    environment:
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      - vault
    networks:
      - transcendence_net
    restart: on-failure
  redis:
    build:
      context: ./db-service/redis
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_PATH}/redis:/data
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    healthcheck:
      test: ["CMD", "sh", "/usr/local/etc/redis/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - redis_password
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--maxmemory", "${REDIS_MAXMEMORY}"]
    networks:
      - transcendence_net
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=redis
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - transcendence_net
  sqlite-writer:
    build: ./db-service/sqlite-writer
    container_name: sqlite-writer
    depends_on:
      - redis
      - db-service
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - db_data:/app/data
    restart: on-failure



secrets:
  redis_password:
    file: ./secrets/redis/password.txt

volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/sqlite
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis

networks:
  transcendence_net:
    name: transcendence_net 
    driver: bridge