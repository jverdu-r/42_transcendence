services:
  # Servicio de Autenticación y Perfiles de Usuario
  auth-service:
    build: ./auth-service
    image: auth-service
    container_name: auth-service
    ports:
      - "8001:8000" # Mapea el puerto 8000 interno a 8001 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"  # Solo para certificados autofirmados
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      JWT_SECRET: "${JWT_SECRET}"
    depends_on:
      - db-service
      - vault
    volumes:
      - db_data:/app/data
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Juego (Pong)
  game-service:
    build: ./game-service
    image: game-service
    container_name: game-service
    ports:
      - "8002:8000" # Mapea el puerto 8000 interno a 8002 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"  # Solo para certificados autofirmados
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      JWT_SECRET: "${JWT_SECRET}"
    depends_on:
      - db-service
      - auth-service
      - vault
      - redis
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Chat
  chat-service:
    build: ./chat-service
    image: chat-service
    container_name: chat-service
    ports:
      - "8003:8000" # Mapea el puerto 8000 interno a 8003 en el host
    environment:
      DB_SERVICE_URL: "http://db-service:8005"
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"  # Solo para certificados autofirmados
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      JWT_SECRET: "${JWT_SECRET}"
    depends_on:
      - db-service
      - auth-service
      - vault
      - redis
    networks:
      - transcendence_net
    restart: on-failure

  # Pasarela API (API Gateway)
  api-gateway:
    build: ./api-gateway
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:8000" # Mapea el puerto 8000 interno a 9000 en el host
    environment:
      AUTH_SERVICE_URL: "${AUTH_SERVICE_URL}"
      GAME_SERVICE_URL: "${GAME_SERVICE_URL}"
      CHAT_SERVICE_URL: "${CHAT_SERVICE_URL}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"
      VAULT_TOKEN_API_GATEWAY: "${VAULT_TOKEN_API_GATEWAY}"
    depends_on:
      - auth-service
      - game-service
      - chat-service
      - redis
    networks:
      - transcendence_net
    restart: on-failure

  # Frontend
  frontend:
    build: ./frontend
    image: frontend
    container_name: frontend
    ports:
      - "9001:8080" # Main web access on port 80
    depends_on:
      - api-gateway
    networks:
      - transcendence_net
    restart: on-failure

  vault:
    build: ./vault
    image: vault-production
    container_name: hashicorp_vault
    ports:
      - "8200:8200" # Vault API
      - "8201:8201" # Vault cluster port
    environment:
      VAULT_ADDR: "https://localhost:8200"
      VAULT_API_ADDR: "https://vault:8200"
      VAULT_CLUSTER_ADDR: "https://vault:8201"
      VAULT_SKIP_VERIFY: "true"  # For self-signed certificates in development
    volumes:
      - vault_data:/vault/file
      - vault_logs:/vault/logs
      - ./vault/scripts:/vault/scripts:rw
      - ./vault/certs:/vault/certs:ro
      - ./vault/generated:/vault/generated:rw
    user: "0:0"
    networks:
      - transcendence_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "VAULT_SKIP_VERIFY=true vault status || exit 0"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s


  # WAF (Web Application Firewall) - Nginx con ModSecurity como ejemplo
  waf:
    image: owasp/modsecurity-crs:nginx
    container_name: WAF
    ports:
      - "9002:8080" # El WAF escuchará en 9002 en el host
    environment:
      MODSECURITY_RULES_PATH: "/etc/nginx/modsecurity/modsecurity.conf"
      BACKEND: "http://frontend:8080" # Apunta al puerto interno del frontend
      SSL_STAPLING: "off" # Disable SSL stapling to remove warning
      PARANOIA: "1" # Set paranoia level to reduce false positives
      ANOMALY_INBOUND: "10" # Set anomaly scoring threshold
      ANOMALY_OUTBOUND: "5" # Set anomaly scoring threshold
      # CORS configuration properties
      CORS_HEADER_ACCESS_CONTROL_ALLOW_HEADERS: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
      CORS_HEADER_403_CONTENT_TYPE: "text/plain"
      CORS_HEADER_403_ALLOW_ORIGIN: "*"
      CORS_HEADER_403_MAX_AGE: "1728000"
      CORS_HEADER_403_ALLOW_METHODS: "GET, POST, PUT, DELETE, OPTIONS"
    # volumes:
      # - ./nginx-waf/modsecurity.conf:/etc/modsecurity.d/modsecurity-override.conf:ro
      # - ./nginx-waf/proxy_backend.conf:/etc/nginx/templates/conf.d/proxy_backend.conf.template:ro
    depends_on:
      - frontend
    networks:
      - transcendence_net
    restart: on-failure
    user: "0:0" # Run as root to ensure proper permissions

  # Nginx Reverse Proxy for standard ports
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl/localhost.crt:/etc/ssl/certs/localhost.crt:ro
      - ./ssl/localhost.key:/etc/ssl/private/localhost.key:ro
    depends_on:
      - waf
      - api-gateway
    networks:
      - transcendence_net
    restart: on-failure

  # Servicio de Base de Datos (API de acceso a SQLite)
  db-service:
    build: ./db-service
    image: db-service
    container_name: db-service
    ports:
      - "8005:8000" # Mapea el puerto 8000 interno a 8005 en el host
    volumes:
      - db_data:/app/data # Monta un volumen para persistir la base de datos SQLite
    environment:
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"  # Solo para certificados autofirmados
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      JWT_SECRET: "${JWT_SECRET}"
    depends_on:
      - vault
      - redis
    networks:
      - transcendence_net
    restart: on-failure
  redis:
    build:
      context: ./db-service/redis
    image: redis
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "o-meu-contrasinal.42", "--maxmemory", "256mb"]
    networks:
      - transcendence_net
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - transcendence_net
  sqlite-writer:
    build: ./db-service/sqlite-writer
    image: sqlite-writer
    container_name: sqlite-writer
    depends_on:
      - redis
      - db-service
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    secrets:
      - redis_password
    volumes:
      - db_data:/app/data
    restart: on-failure
    networks:
      - transcendence_net




  # Monitoring Services
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring_system/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring_system/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - transcendence_net
    restart: unless-stopped

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring_system/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring_system/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - transcendence_net
    depends_on:
      - prometheus
    restart: unless-stopped

  # Alertmanager - Alert management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring_system/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://${MACHINE_IP}:9093'
    networks:
      - transcendence_net
    restart: unless-stopped

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - transcendence_net
    restart: unless-stopped

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=o-meu-contrasinal.42
    networks:
      - transcendence_net
    depends_on:
      - redis
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8084:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - transcendence_net
    restart: unless-stopped

  # Nginx Exporter - Nginx metrics for WAF and proxy
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx-proxy:80/nginx_status'
    networks:
      - transcendence_net
    depends_on:
      - nginx-proxy
    restart: unless-stopped

  # Blackbox Exporter - HTTP/TCP/ICMP monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    volumes:
      - ./monitoring_system/blackbox-exporter/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    ports:
      - "9115:9115"
    networks:
      - transcendence_net
    depends_on:
      - nginx-proxy
    restart: unless-stopped

secrets:
  redis_password:
    file: ./secrets/redis/password.txt

volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/sqlite
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/alertmanager
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/vault/data
  vault_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/vault/logs

networks:
  transcendence_net:
    name: transcendence_net 
    driver: bridge
