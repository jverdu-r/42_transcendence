version: '3.8'

services:
    # Servicio para el frontend de tu juego Pong (Nginx)
    pong-frontend:
      build:
        context: ./frontend/ # El contexto es el subdirectorio 'frontend'
        dockerfile: Dockerfile # El Dockerfile está directamente dentro de 'frontend'
      ports:
        - "8080:80" # Mapea el puerto 8080 del host al puerto 80 del contenedor (donde Nginx escucha)
      container_name: pong-frontend # Nombre del contenedor para fácil identificación
      restart: unless-stopped # Reinicia el contenedor a menos que se detenga manualmente
      # volumes:
        # El contenido está construido en la imagen, no necesitamos montar volúmenes en producción
        # - ./frontend/public:/usr/share/nginx/html:ro
      depends_on:
        - pong-backend # El frontend depende del backend para las peticiones proxy de API/WebSockets
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
        interval: 30s
        timeout: 10s
        retries: 3

    # Servicio para la base de datos SQLite
    database:
      build:
        context: ./database/
        dockerfile: Dockerfile
      container_name: pong-database
      restart: unless-stopped
      volumes:
        - database_data:/app/data # Volumen persistente para la base de datos
        - ./database/init.sql:/app/init.sql:ro # Script de inicialización
      healthcheck:
        test: ["CMD-SHELL", "sqlite3 /app/data/transcendance.db '.tables' || exit 1"]
        interval: 30s
        timeout: 10s
        retries: 3

    # Servicio para el backend de tu juego Pong (Node.js/Fastify)
    pong-backend:
      build:
        context: ./back/ # El contexto es el subdirectorio 'back'
        dockerfile: Dockerfile # El Dockerfile está directamente dentro de 'back'
      ports:
        # Este puerto 3000 del backend no necesita ser expuesto al host directamente
        # porque Nginx actuará como proxy para acceder a él.
        # Se expone aquí SOLO si necesitas depurar el backend directamente desde tu host.
        - "3000:3000"
      container_name: pong-backend # Nombre del contenedor
      restart: unless-stopped # Reinicia el contenedor a menos que se detenga manualmente
      volumes:
        - ./back:/usr/src/app # Monta el directorio de tu backend para cambios en caliente (útil en desarrollo)
        - /usr/src/app/node_modules # Evita que el node_modules del host sobrescriba el del contenedor
        - database_data:/usr/src/app/database # Comparte el volumen de la base de datos con el backend
      environment:
        NODE_ENV: production # O 'development' para modo dev
        DATABASE_PATH: /usr/src/app/database/transcendance.db # Ruta a la base de datos SQLite
      depends_on:
        - database # El backend depende de la base de datos
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"] # Usar endpoint de health check
        interval: 30s
        timeout: 10s
        retries: 3



# Definición de volúmenes para persistir datos entre reinicios del contenedor
volumes:
  database_data:   # Volumen para los datos de la base de datos SQLite

