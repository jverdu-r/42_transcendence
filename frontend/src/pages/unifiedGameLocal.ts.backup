/**
 * Unified Local Game Page - Uses UnifiedGameRenderer
 */
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import { UnifiedGameRenderer, GameCallbacks } from '../components/UnifiedGameRenderer';
import { PlayerDisplay, PlayerInfo } from '../components/playerDisplay';

export function renderUnifiedGameLocal(): void {
    const content = document.getElementById('page-content');

    if (!content) {
        console.error('No se encontró el contenedor principal para renderizar el juego local.');
        return;
    }

    // Get current user
    const currentUser = getCurrentUser();
    const player1Name = currentUser?.username || 'Jugador 1';
    const player2Name = 'Jugador 2';

    content.innerHTML = `
        <div class="w-full max-w-6xl mx-auto p-8">
            <h1 class="text-3xl font-bold text-center mb-4">🎮 Juego Local - Pong</h1>
            <p class="text-center mb-6">Juega contra otro jugador en el mismo dispositivo</p>
            
            <!-- Player Info Section -->
            <div id="player-info" class="bg-gray-800 rounded-lg p-4 mb-6">
                <div id="player-cards" class="mb-4">
                    <!-- Las tarjetas se generarán dinámicamente -->
                </div>
                <div id="player-role" class="text-center text-green-400 font-bold">
                    🎮 Juego Local - Dos jugadores en el mismo dispositivo
                </div>
            </div>
            
            <!-- Game Canvas Container -->
            <div class="bg-black border-2 border-gray-400 rounded-lg p-4 mb-6 flex justify-center">
                <canvas id="gameCanvas" width="800" height="600" class="border border-gray-600"></canvas>
            </div>
            
            <!-- Score Display -->
            <div class="text-center mb-4">
                <div id="score-container" class="grid grid-cols-2 gap-4 mb-4">
                    <div class="text-left">
                        <h3 class="text-xl font-bold text-yellow-400" id="score1-title">🟡 ${player1Name}</h3>
                        <p class="text-2xl font-bold" id="score1">0</p>
                    </div>
                    <div class="text-right">
                        <h3 class="text-xl font-bold text-blue-400" id="score2-title">🔵 ${player2Name}</h3>
                        <p class="text-2xl font-bold" id="score2">0</p>
                    </div>
                </div>
                
                <div id="game-status" class="mb-4">
                    <p class="text-lg font-semibold text-blue-400">🔄 Presiona "Iniciar Juego" para comenzar</p>
                </div>
                
                <!-- Game Controls -->
                <div class="flex flex-wrap gap-2 justify-center mb-4">
                    <button id="start-game" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🎮 Iniciar Juego
                    </button>
                    <button id="pause-game" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded transition-colors" disabled>
                        ⏸️ Pausar
                    </button>
                    <button id="reset-game" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🔄 Reiniciar
                    </button>
                </div>
                
                <!-- Controls Instructions -->
                <div class="bg-gray-800 rounded-lg p-4 mb-6">
                    <h3 class="text-lg font-bold mb-2">🎮 Controles:</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h4 class="font-bold text-yellow-400">🟡 Jugador 1:</h4>
                            <p>W - Mover hacia arriba</p>
                            <p>S - Mover hacia abajo</p>
                        </div>
                        <div>
                            <h4 class="font-bold text-blue-400">🔵 Jugador 2:</h4>
                            <p>↑ - Mover hacia arriba</p>
                            <p>↓ - Mover hacia abajo</p>
                        </div>
                    </div>
                </div>
                
                <!-- Navigation -->
                <button id="back-to-play" class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded transition-colors">
                    ← Volver a Selección
                </button>
            </div>
        </div>
        
        <!-- Game Result Modal -->
        <div id="game-result-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-gray-800 p-8 rounded-lg max-w-md w-full mx-4">
                <div id="modal-content" class="text-center">
                    <!-- Content will be filled dynamically -->
                </div>
                <div class="flex gap-4 mt-6">
                    <button id="play-again" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🎮 Jugar de Nuevo
                    </button>
                    <button id="back-to-menu" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        📋 Menú Principal
                    </button>
                </div>
            </div>
        </div>
    `;

    // Initialize game components
    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
    if (!canvas) {
        console.error('No se encontró el canvas del juego');
        return;
    }

    // Create game renderer
    const gameRenderer = new UnifiedGameRenderer(canvas, 'local');

    // Set up player info
    const player1Info: PlayerInfo = {
        numero: 1,
        displayName: player1Name,
        username: currentUser?.username || 'player1',
        controls: 'W/S'
    };

    const player2Info: PlayerInfo = {
        displayName: player2Name,
        numero: 2,
        username: 'player2',
        controls: '↑/↓'
    };

    gameRenderer.setPlayerInfo(player1Info, player2Info);

    // Set up player display

    // Game state variables
    let isGameRunning = false;
    let gameStartTime: Date | null = null;

    // Set up callbacks
    const callbacks: GameCallbacks = {
        onScoreUpdate: (score) => {
            const score1Element = document.getElementById('score1');
            const score2Element = document.getElementById('score2');
            
            if (score1Element) score1Element.textContent = score.left.toString();
            if (score2Element) score2Element.textContent = score.right.toString();
        },
        
        onGameEnd: (winner, score) => {
            isGameRunning = false;
            updateButtonStates();
            showGameResult(winner, score);
        },
        
        onStatusUpdate: (status) => {
            const statusElement = document.getElementById('game-status');
            if (statusElement) {
                statusElement.innerHTML = `<p class="text-lg font-semibold text-blue-400">${status}</p>`;
            }
        }
    };

    gameRenderer.setCallbacks(callbacks);

    // Button event handlers
    function updateButtonStates() {
        const startButton = document.getElementById('start-game') as HTMLButtonElement;
        const pauseButton = document.getElementById('pause-game') as HTMLButtonElement;
        
        if (startButton && pauseButton) {
            startButton.disabled = isGameRunning;
            pauseButton.disabled = !isGameRunning;
        }
    }

    function showGameResult(winner: string, score: { left: number; right: number }) {
        const modal = document.getElementById('game-result-modal');
        const modalContent = document.getElementById('modal-content');
        
        if (!modal || !modalContent) return;

        const isPlayer1Winner = score.left > score.right;
        const winnerColor = isPlayer1Winner ? 'text-yellow-400' : 'text-blue-400';
        const winnerEmoji = isPlayer1Winner ? '🟡' : '🔵';

        modalContent.innerHTML = `
            <h2 class="text-3xl font-bold mb-4">🎉 ¡Juego Terminado!</h2>
            <div class="text-6xl mb-4">${winnerEmoji}</div>
            <h3 class="text-2xl font-bold mb-4 ${winnerColor}">¡${winner} ganó!</h3>
            <div class="text-lg mb-4">
                <p><span class="text-yellow-400">🟡 ${player1Name}</span>: ${score.left}</p>
                <p><span class="text-blue-400">🔵 ${player2Name}</span>: ${score.right}</p>
            </div>
            ${gameStartTime ? `<p class="text-gray-400">Duración: ${Math.floor((Date.now() - gameStartTime.getTime()) / 1000)}s</p>` : ''}
        `;

        modal.classList.remove('hidden');
    }

    // Event listeners
    document.getElementById('start-game')?.addEventListener('click', () => {
        gameRenderer.startGame();
        isGameRunning = true;
        gameStartTime = new Date();
        updateButtonStates();
    });

    document.getElementById('pause-game')?.addEventListener('click', () => {
        gameRenderer.pauseGame();
        isGameRunning = false;
        updateButtonStates();
    });

    document.getElementById('reset-game')?.addEventListener('click', () => {
        gameRenderer.resetGame();
        isGameRunning = false;
        gameStartTime = null;
        updateButtonStates();
        
        // Hide modal if visible
        const modal = document.getElementById('game-result-modal');
        if (modal) modal.classList.add('hidden');
    });

    document.getElementById('back-to-play')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/play');
    });

    // Modal event listeners
    document.getElementById('play-again')?.addEventListener('click', () => {
        const modal = document.getElementById('game-result-modal');
        if (modal) modal.classList.add('hidden');
        
        gameRenderer.resetGame();
        gameRenderer.startGame();
        isGameRunning = true;
        gameStartTime = new Date();
        updateButtonStates();
    });

    document.getElementById('back-to-menu')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/play');
    });

    // Initialize button states
    updateButtonStates();

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        gameRenderer.cleanup();
    });
}
