import { getCurrentUser } from '../auth';
import { navigateTo } from '../router';

let lobbySocket: WebSocket | null = null;
let gameStarted = false;
let countdownInterval: number | null = null;
let playerNumber: number | null = null;
let currentGameId: string | null = null;

export function renderGameLobby(): void {
  const content = document.getElementById('page-content');

  if (!content) {
    console.error('No se encontró el contenedor principal para renderizar el lobby de juego.');
    return;
  }

  // Obtener gameId del sessionStorage
  const gameId = sessionStorage.getItem('currentGameId');
  const gameMode = sessionStorage.getItem('currentGameMode') || 'pvp';
  
  if (!gameId) {
    console.error('No se encontró gameId en sessionStorage');
    navigateTo('/unified-game-online');
    return;
  }

  currentGameId = gameId;
  const currentUser = getCurrentUser();
  const currentUserName = currentUser?.username || 'Usuario';

  content.innerHTML = `
    <div class="w-full max-w-5xl mx-auto p-8">
      <!-- Header del Lobby -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">
          🎮 Lobby de Juego Online
        </h1>
        <div class="bg-gray-800/50 rounded-lg p-4 mb-6">
          <p class="text-lg text-gray-300 mb-2">ID de Partida:</p>
          <code class="bg-gray-900 text-green-400 px-3 py-1 rounded font-mono text-sm">${gameId}</code>
        </div>
      </div>
      
      <!-- Estado de Conexión -->
      <div id="connection-status" class="bg-gradient-to-r from-yellow-800 to-orange-800 rounded-lg p-6 mb-8 border-2 border-yellow-600">
        <div class="flex items-center justify-center">
          <div class="animate-spin w-8 h-8 border-4 border-yellow-400 border-t-transparent rounded-full mr-4"></div>
          <div class="text-center">
            <h2 class="text-2xl font-bold text-yellow-300 mb-2">🔄 Conectando al servidor...</h2>
            <p class="text-yellow-200">Estableciendo conexión con el servidor de juegos</p>
          </div>
        </div>
      </div>

      <!-- Información de Jugadores -->
      <div id="players-section" class="bg-gray-800 rounded-lg p-6 mb-8 hidden">
        <h2 class="text-2xl font-bold text-center mb-6 text-white">👥 Jugadores en la Partida</h2>
        <div id="players-grid" class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Se llenará dinámicamente -->
        </div>
        
        <!-- Botón de Invitar -->
        <div class="text-center mt-6">
          <button id="copy-invite" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-200 transform hover:scale-105">
            📋 Copiar Enlace de Invitación
          </button>
          <p class="text-sm text-gray-400 mt-2">Comparte este enlace para que otros jugadores se unan</p>
        </div>
      </div>

      <!-- Cuenta Atrás -->
      <div id="countdown-section" class="bg-gradient-to-r from-green-800 to-blue-800 rounded-lg p-8 mb-8 hidden">
        <div class="text-center">
          <h2 class="text-3xl font-bold text-white mb-4">🚀 ¡Preparándose para comenzar!</h2>
          <div id="countdown-display" class="text-8xl font-bold text-yellow-400 mb-4">3</div>
          <p class="text-xl text-gray-200">¡Prepárate para jugar!</p>
          <div class="mt-4">
            <div class="inline-block bg-yellow-400 text-black px-4 py-2 rounded-full font-semibold">
              Controles: W (Arriba) / S (Abajo)
            </div>
          </div>
        </div>
      </div>

      <!-- Campo de Juego -->
      <div id="game-field" class="bg-black rounded-lg p-6 mb-8 hidden border-2 border-green-400">
        <div class="text-center mb-4">
          <h2 class="text-2xl font-bold text-green-400 mb-4">🎮 ¡Juego en Curso!</h2>
        </div>
        
        <!-- Canvas del Juego -->
        <div class="bg-black border-2 border-gray-400 rounded-lg mb-6 flex justify-center">
          <canvas id="gameCanvas" width="800" height="400" class="max-w-full h-auto bg-black rounded"></canvas>
        </div>
        
        <!-- Marcador -->
        <div id="score-display" class="grid grid-cols-2 gap-4 mb-4">
          <div class="bg-yellow-600/20 rounded-lg p-4 text-center border border-yellow-400">
            <h3 class="text-lg font-bold text-yellow-400" id="player1-name">Jugador 1</h3>
            <div class="text-4xl font-bold text-white" id="score1">0</div>
          </div>
          <div class="bg-blue-600/20 rounded-lg p-4 text-center border border-blue-400">
            <h3 class="text-lg font-bold text-blue-400" id="player2-name">Jugador 2</h3>
            <div class="text-4xl font-bold text-white" id="score2">0</div>
          </div>
        </div>
        
        <!-- Status del Juego -->
        <div id="game-status" class="text-center">
          <div class="bg-green-600/20 rounded-lg p-3 border border-green-400">
            <p class="text-green-400 font-semibold">🎮 Usa W y S para mover tu pala</p>
          </div>
        </div>
      </div>

      <!-- Botones de Control -->
      <div class="text-center">
        <button id="leave-lobby" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 mr-4">
          🚪 Salir del Lobby
        </button>
        <button id="ready-button" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 hidden">
          ✅ Listo para Jugar
        </button>
      </div>
    </div>
    
    <!-- Modal de Resultado -->
    <div id="game-result-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-xl p-8 max-w-md w-full mx-4 text-center transform transition-all">
        <div id="result-content">
          <!-- Se llenará dinámicamente -->
        </div>
        <button id="return-to-online" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 mt-6">
          🔙 Volver al Lobby Online
        </button>
      </div>
    </div>
  `;

  // Event listeners
  setupEventListeners();
  
  // Iniciar conexión al lobby
  connectToLobby(gameId, gameMode);
}

function setupEventListeners(): void {
  document.getElementById('leave-lobby')?.addEventListener('click', leaveLobby);
  document.getElementById('copy-invite')?.addEventListener('click', copyInviteLink);
  document.getElementById('ready-button')?.addEventListener('click', markAsReady);
  document.getElementById('return-to-online')?.addEventListener('click', returnToOnlineMenu);
}

function connectToLobby(gameId: string, gameMode: string): void {
  const statusElement = document.getElementById('connection-status');
  const playersSection = document.getElementById('players-section');
  
  // Construir URL WebSocket
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const currentUser = getCurrentUser();
  const username = encodeURIComponent(currentUser?.username || 'Usuario');
  const wsUrl = `${protocol}//${window.location.host}/pong/${gameId}?username=${username}`;

  console.log('🔗 Conectando al WebSocket del lobby:', wsUrl);
  
  if (lobbySocket) {
    lobbySocket.close();
  }
  
  lobbySocket = new WebSocket(wsUrl);
  
  lobbySocket.onopen = () => {
    console.log('✅ Conectado al lobby del juego');
    updateConnectionStatus('✅ Conectado al servidor', 'Esperando información del juego...', 'green');
  };

  lobbySocket.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      console.log('📡 Mensaje del lobby recibido:', data);
      
      handleLobbyMessage(data);
    } catch (error) {
      console.error('❌ Error procesando mensaje del lobby:', error);
    }
  };

  lobbySocket.onclose = () => {
    console.log('🔌 Desconectado del lobby');
    updateConnectionStatus('❌ Desconectado', 'Conexión perdida con el servidor', 'red');
  };

  lobbySocket.onerror = (error) => {
    console.error('❌ Error en WebSocket del lobby:', error);
    updateConnectionStatus('❌ Error de conexión', 'No se pudo conectar al servidor', 'red');
  };
}

function handleLobbyMessage(data: any): void {
  switch (data.tipo) {
    case 'bienvenida':
      handleWelcomeMessage(data);
      break;
    case 'jugadores_actualizados':
      updatePlayersDisplay(data.jugadores || []);
      break;
    case 'cuenta_atras':
      showCountdown(data.valor);
      break;
    case 'gameStarted':
      startGame();
      break;
    case 'estado':
      updateGameState(data.juego);
      break;
    case 'juego_finalizado':
      showGameResult(data);
      break;
    case 'jugador_desconectado':
      handlePlayerDisconnected(data);
      break;
    default:
      console.log('Tipo de mensaje no manejado:', data.tipo);
  }
}

function handleWelcomeMessage(data: any): void {
  playerNumber = data.numero;
  console.log(`🎮 Bienvenido como Jugador ${playerNumber}`);
  
  updateConnectionStatus('🎮 Conectado como jugador', `Eres el Jugador ${playerNumber}`, 'green');
  
  // Mostrar sección de jugadores
  const playersSection = document.getElementById('players-section');
  if (playersSection) {
    playersSection.classList.remove('hidden');
  }
  
  // Actualizar lista de jugadores
  if (data.jugadores) {
    updatePlayersDisplay(data.jugadores);
  }
}

function updatePlayersDisplay(jugadores: any[]): void {
  const playersGrid = document.getElementById('players-grid');
  if (!playersGrid) return;

  const currentUser = getCurrentUser();
  
  let html = '';
  
  // Jugador 1
  const jugador1 = jugadores.find(j => j.numero === 1);
  if (jugador1) {
    const isCurrentUser = jugador1.nombre === currentUser?.username;
    html += `
      <div class="bg-gradient-to-r from-yellow-600 to-yellow-700 rounded-lg p-6 border-2 ${isCurrentUser ? 'border-white shadow-lg' : 'border-yellow-500'}">
        <div class="flex items-center mb-4">
          <div class="text-4xl mr-4">🟡</div>
          <div>
            <h3 class="text-xl font-bold text-white">
              ${isCurrentUser ? '👤 Tú' : '🎮 Oponente'}
            </h3>
            <p class="text-yellow-200 font-semibold">${jugador1.nombre}</p>
          </div>
        </div>
        <div class="bg-yellow-800/50 rounded p-3">
          <p class="text-yellow-200 text-sm">
            <strong>Jugador 1</strong> • Pala Izquierda • Teclas: W/S
          </p>
          <div class="flex items-center mt-2">
            <div class="w-3 h-3 bg-green-400 rounded-full mr-2"></div>
            <span class="text-xs text-yellow-200">Conectado</span>
          </div>
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="bg-gray-700 rounded-lg p-6 border-2 border-gray-600 opacity-50">
        <div class="flex items-center mb-4">
          <div class="text-4xl mr-4">⏳</div>
          <div>
            <h3 class="text-xl font-bold text-gray-300">Esperando...</h3>
            <p class="text-gray-400">Jugador 1</p>
          </div>
        </div>
        <div class="bg-gray-800/50 rounded p-3">
          <p class="text-gray-400 text-sm">
            <strong>Pala Izquierda</strong> • Teclas: W/S
          </p>
        </div>
      </div>
    `;
  }
  
  // Jugador 2
  const jugador2 = jugadores.find(j => j.numero === 2);
  if (jugador2) {
    const isCurrentUser = jugador2.nombre === currentUser?.username;
    html += `
      <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-lg p-6 border-2 ${isCurrentUser ? 'border-white shadow-lg' : 'border-blue-500'}">
        <div class="flex items-center mb-4">
          <div class="text-4xl mr-4">🔵</div>
          <div>
            <h3 class="text-xl font-bold text-white">
              ${isCurrentUser ? '👤 Tú' : '🎮 Oponente'}
            </h3>
            <p class="text-blue-200 font-semibold">${jugador2.nombre}</p>
          </div>
        </div>
        <div class="bg-blue-800/50 rounded p-3">
          <p class="text-blue-200 text-sm">
            <strong>Jugador 2</strong> • Pala Derecha • Teclas: ↑/↓
          </p>
          <div class="flex items-center mt-2">
            <div class="w-3 h-3 bg-green-400 rounded-full mr-2"></div>
            <span class="text-xs text-blue-200">Conectado</span>
          </div>
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="bg-gray-700 rounded-lg p-6 border-2 border-gray-600 opacity-50">
        <div class="flex items-center mb-4">
          <div class="text-4xl mr-4">⏳</div>
          <div>
            <h3 class="text-xl font-bold text-gray-300">Esperando...</h3>
            <p class="text-gray-400">Jugador 2</p>
          </div>
        </div>
        <div class="bg-gray-800/50 rounded p-3">
          <p class="text-gray-400 text-sm">
            <strong>Pala Derecha</strong> • Teclas: ↑/↓
          </p>
        </div>
      </div>
    `;
  }
  
  playersGrid.innerHTML = html;
  
  // Mostrar botón Ready si hay 2 jugadores
  const readyButton = document.getElementById('ready-button');
  if (readyButton && jugadores.length === 2) {
    readyButton.classList.remove('hidden');
  }
}

function showCountdown(seconds: number): void {
  const countdownSection = document.getElementById('countdown-section');
  const countdownDisplay = document.getElementById('countdown-display');
  
  if (countdownSection && countdownDisplay) {
    countdownSection.classList.remove('hidden');
    countdownDisplay.textContent = seconds.toString();
    
    // Ocultar otras secciones
    document.getElementById('connection-status')?.classList.add('hidden');
    document.getElementById('players-section')?.classList.add('hidden');
  }
}

function startGame(): void {
  console.log('🎮 ¡Juego iniciado!');
  gameStarted = true;
  
  // Ocultar todas las secciones del lobby
  document.getElementById('connection-status')?.classList.add('hidden');
  document.getElementById('players-section')?.classList.add('hidden');
  document.getElementById('countdown-section')?.classList.add('hidden');
  
  // Mostrar campo de juego
  const gameField = document.getElementById('game-field');
  if (gameField) {
    gameField.classList.remove('hidden');
  }
  
  // Configurar controles de teclado
  setupGameControls();
  
  // Dibujar canvas inicial
  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
  if (canvas) {
    drawInitialCanvas(canvas);
  }
}

function setupGameControls(): void {
  const keys = { w: false, s: false, up: false, down: false };
  
  const handleKeyDown = (e: KeyboardEvent) => {
    switch (e.key.toLowerCase()) {
      case 'w':
        if (!keys.w) {
          keys.w = true;
          sendPlayerMove('up');
        }
        e.preventDefault();
        break;
      case 's':
        if (!keys.s) {
          keys.s = true;
          sendPlayerMove('down');
        }
        e.preventDefault();
        break;
      case 'arrowup':
        if (!keys.up) {
          keys.up = true;
          sendPlayerMove('up');
        }
        e.preventDefault();
        break;
      case 'arrowdown':
        if (!keys.down) {
          keys.down = true;
          sendPlayerMove('down');
        }
        e.preventDefault();
        break;
    }
  };
  
  const handleKeyUp = (e: KeyboardEvent) => {
    switch (e.key.toLowerCase()) {
      case 'w':
        keys.w = false;
        e.preventDefault();
        break;
      case 's':
        keys.s = false;
        e.preventDefault();
        break;
      case 'arrowup':
        keys.up = false;
        e.preventDefault();
        break;
      case 'arrowdown':
        keys.down = false;
        e.preventDefault();
        break;
    }
  };
  
  // Remover listeners existentes si los hay
  document.removeEventListener('keydown', handleKeyDown);
  document.removeEventListener('keyup', handleKeyUp);
  
  // Agregar nuevos listeners
  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keyup', handleKeyUp);
}

function sendPlayerMove(direction: string): void {
  if (lobbySocket && lobbySocket.readyState === WebSocket.OPEN) {
    lobbySocket.send(JSON.stringify({
      tipo: 'mover',
      direccion: direction,
      y: direction === 'up' ? -8 : 8
    }));
  }
}

function updateGameState(gameState: any): void {
  if (!gameStarted) return;
  
  // Actualizar canvas
  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
  if (canvas && gameState) {
    drawGame(canvas, gameState);
  }
  
  // Actualizar puntuación
  updateScore(gameState);
  
  // Actualizar nombres de jugadores en el marcador
  updatePlayerNames(gameState);
}

function drawInitialCanvas(canvas: HTMLCanvasElement): void {
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Línea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([10, 10]);
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(canvas.width / 2, 0);
  ctx.lineTo(canvas.width / 2, canvas.height);
  ctx.stroke();
  
  // Círculo central
  ctx.beginPath();
  ctx.arc(canvas.width / 2, canvas.height / 2, 50, 0, Math.PI * 2);
  ctx.stroke();
  
  // Mensaje inicial
  ctx.fillStyle = 'white';
  ctx.font = '24px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('¡Juego iniciado!', canvas.width / 2, canvas.height / 2);
}

function drawGame(canvas: HTMLCanvasElement, gameState: any): void {
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Línea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([10, 10]);
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(canvas.width / 2, 0);
  ctx.lineTo(canvas.width / 2, canvas.height);
  ctx.stroke();
  ctx.setLineDash([]);
  
  if (gameState.palas) {
    // Pala jugador 1 (izquierda)
    ctx.fillStyle = '#FCD34D'; // yellow-400
    ctx.fillRect(
      gameState.palas.jugador1.x, 
      gameState.palas.jugador1.y, 
      gameState.palaAncho || 10, 
      gameState.palaAlto || 60
    );
    
    // Pala jugador 2 (derecha)
    ctx.fillStyle = '#60A5FA'; // blue-400
    ctx.fillRect(
      gameState.palas.jugador2.x, 
      gameState.palas.jugador2.y, 
      gameState.palaAncho || 10, 
      gameState.palaAlto || 60
    );
  }
  
  // Pelota
  if (gameState.pelota) {
    ctx.fillStyle = '#EF4444'; // red-500
    ctx.beginPath();
    ctx.arc(
      gameState.pelota.x, 
      gameState.pelota.y, 
      gameState.pelota.radio || 8, 
      0, 
      Math.PI * 2
    );
    ctx.fill();
  }
}

function updateScore(gameState: any): void {
  const score1 = document.getElementById('score1');
  const score2 = document.getElementById('score2');
  
  if (score1 && gameState.puntuacion) {
    score1.textContent = gameState.puntuacion.jugador1?.toString() || '0';
  }
  if (score2 && gameState.puntuacion) {
    score2.textContent = gameState.puntuacion.jugador2?.toString() || '0';
  }
}

function updatePlayerNames(gameState: any): void {
  // Esta función puede expandirse para mostrar nombres específicos de los jugadores
  const player1Name = document.getElementById('player1-name');
  const player2Name = document.getElementById('player2-name');
  
  if (player1Name && player2Name) {
    // Aquí podrías usar información del gameState para mostrar nombres reales
    player1Name.textContent = 'Jugador 1';
    player2Name.textContent = 'Jugador 2';
  }
}

function showGameResult(data: any): void {
  const modal = document.getElementById('game-result-modal');
  const resultContent = document.getElementById('result-content');
  
  if (!modal || !resultContent) return;
  
  const isPlayer1Winner = data.ganador === 1;
  const winnerName = isPlayer1Winner ? 'Jugador 1' : 'Jugador 2';
  const player1Score = data.juego?.puntuacion?.jugador1 || 0;
  const player2Score = data.juego?.puntuacion?.jugador2 || 0;
  
  resultContent.innerHTML = `
    <div class="text-6xl mb-4">🏆</div>
    <h2 class="text-3xl font-bold ${isPlayer1Winner ? 'text-yellow-600' : 'text-blue-600'} mb-4">
      ¡${winnerName} Gana!
    </h2>
    <div class="bg-gray-100 rounded-lg p-6 mb-4">
      <h3 class="text-xl font-semibold text-gray-800 mb-4">Resultado Final</h3>
      <div class="flex justify-between text-lg">
        <span class="${isPlayer1Winner ? 'text-green-600 font-bold' : 'text-gray-600'}">
          Jugador 1: ${player1Score}
        </span>
        <span class="${!isPlayer1Winner ? 'text-green-600 font-bold' : 'text-gray-600'}">
          Jugador 2: ${player2Score}
        </span>
      </div>
    </div>
    <p class="text-gray-600">¡Buen juego! 🎉</p>
  `;
  
  modal.classList.remove('hidden');
  gameStarted = false;
}

function handlePlayerDisconnected(data: any): void {
  const modal = document.getElementById('game-result-modal');
  const resultContent = document.getElementById('result-content');
  
  if (!modal || !resultContent) return;
  
  resultContent.innerHTML = `
    <div class="text-6xl mb-4">🚪</div>
    <h2 class="text-3xl font-bold text-orange-600 mb-4">
      Jugador Desconectado
    </h2>
    <p class="text-gray-600 mb-4">
      Un jugador se ha desconectado de la partida.
    </p>
    <p class="text-green-600 font-semibold">¡Ganaste por abandono!</p>
  `;
  
  modal.classList.remove('hidden');
  gameStarted = false;
}

function updateConnectionStatus(title: string, message: string, color: string): void {
  const statusElement = document.getElementById('connection-status');
  if (!statusElement) return;
  
  const colorClasses = {
    green: 'from-green-800 to-green-900 border-green-600',
    red: 'from-red-800 to-red-900 border-red-600',
    yellow: 'from-yellow-800 to-orange-800 border-yellow-600'
  };
  
  const iconClasses = {
    green: '',
    red: '',
    yellow: 'animate-spin w-8 h-8 border-4 border-yellow-400 border-t-transparent rounded-full mr-4'
  };
  
  statusElement.className = `bg-gradient-to-r ${colorClasses[color as keyof typeof colorClasses]} rounded-lg p-6 mb-8 border-2`;
  
  statusElement.innerHTML = `
    <div class="flex items-center justify-center">
      ${color === 'yellow' ? '<div class="animate-spin w-8 h-8 border-4 border-yellow-400 border-t-transparent rounded-full mr-4"></div>' : ''}
      <div class="text-center">
        <h2 class="text-2xl font-bold text-${color}-300 mb-2">${title}</h2>
        <p class="text-${color}-200">${message}</p>
      </div>
    </div>
  `;
}

function copyInviteLink(): void {
  const gameId = currentGameId;
  if (!gameId) return;
  
  const inviteUrl = `${window.location.origin}${window.location.pathname}#/unified-game-online?join=${gameId}`;
  
  navigator.clipboard.writeText(inviteUrl).then(() => {
    const button = document.getElementById('copy-invite');
    if (button) {
      const originalText = button.innerHTML;
      button.innerHTML = '✅ ¡Copiado!';
      setTimeout(() => {
        button.innerHTML = originalText;
      }, 2000);
    }
  }).catch(() => {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = inviteUrl;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    const button = document.getElementById('copy-invite');
    if (button) {
      const originalText = button.innerHTML;
      button.innerHTML = '✅ ¡Copiado!';
      setTimeout(() => {
        button.innerHTML = originalText;
      }, 2000);
    }
  });
}

function markAsReady(): void {
  if (lobbySocket && lobbySocket.readyState === WebSocket.OPEN) {
    lobbySocket.send(JSON.stringify({
      tipo: 'listo'
    }));
    
    const button = document.getElementById('ready-button');
    if (button) {
      button.innerHTML = '⏳ Esperando al otro jugador...';
      (button as HTMLButtonElement).disabled = true;
    }
  }
}

function leaveLobby(): void {
  // Cerrar WebSocket
  if (lobbySocket) {
    lobbySocket.close();
    lobbySocket = null;
  }
  
  // Limpiar intervalos
  if (countdownInterval) {
    clearInterval(countdownInterval);
    countdownInterval = null;
  }
  
  // Limpiar sessionStorage
  sessionStorage.removeItem('currentGameId');
  sessionStorage.removeItem('currentGameMode');
  
  // Navegar de vuelta al menú online
  navigateTo('/unified-game-online');
}

function returnToOnlineMenu(): void {
  // Ocultar modal
  const modal = document.getElementById('game-result-modal');
  if (modal) {
    modal.classList.add('hidden');
  }
  
  leaveLobby();
}

// Cleanup al salir de la página
window.addEventListener('beforeunload', () => {
  if (lobbySocket) {
    lobbySocket.close();
    lobbySocket = null;
  }
});
