/**
 * Unified AI Game Page - Uses UnifiedGameRenderer
 */
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import { UnifiedGameRenderer, GameCallbacks } from '../components/UnifiedGameRenderer';
import { PlayerDisplay, PlayerInfo } from '../components/playerDisplay';

export function renderUnifiedGameAI(): void {
    const content = document.getElementById('page-content');

    if (!content) {
        console.error('No se encontró el contenedor principal para renderizar el juego contra IA.');
        return;
    }

    // Get current user
    const currentUser = getCurrentUser();
    const playerName = currentUser?.username || 'Jugador';

    content.innerHTML = `
        <div class="w-full max-w-6xl mx-auto p-8">
            <h1 class="text-3xl font-bold text-center mb-4">🤖 Juego vs IA - Pong</h1>
            <p class="text-center mb-6">Enfréntate a la inteligencia artificial</p>
            
            <!-- AI Difficulty Selection -->
            <div class="bg-gray-800 rounded-lg p-4 mb-6">
                <h3 class="text-xl font-bold mb-4 text-center">🎯 Selecciona la dificultad:</h3>
                <div class="flex justify-center gap-4">
                    <button id="difficulty-easy" class="difficulty-btn bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        😊 Fácil
                    </button>
                    <button id="difficulty-medium" class="difficulty-btn bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded transition-colors active">
                        😐 Medio
                    </button>
                    <button id="difficulty-hard" class="difficulty-btn bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        😤 Difícil
                    </button>
                </div>
                <div id="difficulty-description" class="text-center mt-4 text-gray-300">
                    <p>IA con velocidad y precisión moderadas - Perfecta para empezar</p>
                </div>
            </div>
            
            <!-- Player Info Section -->
            <div id="player-info" class="bg-gray-800 rounded-lg p-4 mb-6">
                <div id="player-cards" class="mb-4">
                    <!-- Las tarjetas se generarán dinámicamente -->
                </div>
                <div id="player-role" class="text-center text-green-400 font-bold">
                    🤖 Juego contra IA - Demuestra tu habilidad
                </div>
            </div>
            
            <!-- Game Canvas Container -->
            <div class="bg-black border-2 border-gray-400 rounded-lg p-4 mb-6 flex justify-center">
                <canvas id="gameCanvas" width="800" height="600" class="border border-gray-600"></canvas>
            </div>
            
            <!-- Score Display -->
            <div class="text-center mb-4">
                <div id="score-container" class="grid grid-cols-2 gap-4 mb-4">
                    <div class="text-left">
                        <h3 class="text-xl font-bold text-yellow-400" id="score1-title">🟡 ${playerName}</h3>
                        <p class="text-2xl font-bold" id="score1">0</p>
                    </div>
                    <div class="text-right">
                        <h3 class="text-xl font-bold text-blue-400" id="score2-title">🤖 IA</h3>
                        <p class="text-2xl font-bold" id="score2">0</p>
                    </div>
                </div>
                
                <div id="game-status" class="mb-4">
                    <p class="text-lg font-semibold text-blue-400">🔄 Selecciona dificultad y presiona "Iniciar Juego"</p>
                </div>
                
                <!-- Game Controls -->
                <div class="flex flex-wrap gap-2 justify-center mb-4">
                    <button id="start-game" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🎮 Iniciar Juego
                    </button>
                    <button id="pause-game" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded transition-colors" disabled>
                        ⏸️ Pausar
                    </button>
                    <button id="reset-game" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🔄 Reiniciar
                    </button>
                </div>
                
                <!-- Controls Instructions -->
                <div class="bg-gray-800 rounded-lg p-4 mb-6">
                    <h3 class="text-lg font-bold mb-2">🎮 Controles:</h3>
                    <div class="text-center">
                        <div>
                            <h4 class="font-bold text-yellow-400">🟡 Tu control:</h4>
                            <p>W - Mover hacia arriba</p>
                            <p>S - Mover hacia abajo</p>
                        </div>
                        <div class="mt-4">
                            <h4 class="font-bold text-blue-400">🤖 IA:</h4>
                            <p>Controlada automáticamente</p>
                        </div>
                    </div>
                </div>
                
                <!-- Navigation -->
                <button id="back-to-play" class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded transition-colors">
                    ← Volver a Selección
                </button>
            </div>
        </div>
        
        <!-- Game Result Modal -->
        <div id="game-result-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-gray-800 p-8 rounded-lg max-w-md w-full mx-4">
                <div id="modal-content" class="text-center">
                    <!-- Content will be filled dynamically -->
                </div>
                <div class="flex gap-4 mt-6">
                    <button id="play-again" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🎮 Jugar de Nuevo
                    </button>
                    <button id="back-to-menu" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        📋 Menú Principal
                    </button>
                </div>
            </div>
        </div>
    `;

    // Initialize game components
    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
    if (!canvas) {
        console.error('No se encontró el canvas del juego');
        return;
    }

    // Create game renderer
    const gameRenderer = new UnifiedGameRenderer(canvas, 'ai');

    // Game state variables
    let currentDifficulty: 'easy' | 'medium' | 'hard' = 'medium';
    let isGameRunning = false;
    let gameStartTime: Date | null = null;

    // Set up player info
    function updatePlayerInfo() {
        const difficultyNames = {
            easy: 'IA Fácil 😊',
            medium: 'IA Medio 😐',
            hard: 'IA Difícil 😤'
        };

        const player1Info: PlayerInfo = {
            numero: 1,
            displayName: playerName,
            username: currentUser?.username || 'player',
            controls: 'W/S'
        };

        const player2Info: PlayerInfo = {
            displayName: difficultyNames[currentDifficulty],
            numero: 2,
            username: 'ai',
            controls: 'Automático'
        };

        gameRenderer.setPlayerInfo(player1Info, player2Info);

    }

    // Initialize player info
    updatePlayerInfo();

    // Set up callbacks
    const callbacks: GameCallbacks = {
        onScoreUpdate: (score) => {
            const score1Element = document.getElementById('score1');
            const score2Element = document.getElementById('score2');
            
            if (score1Element) score1Element.textContent = score.left.toString();
            if (score2Element) score2Element.textContent = score.right.toString();
        },
        
        onGameEnd: (winner, score) => {
            isGameRunning = false;
            updateButtonStates();
            showGameResult(winner, score);
        },
        
        onStatusUpdate: (status) => {
            const statusElement = document.getElementById('game-status');
            if (statusElement) {
                statusElement.innerHTML = `<p class="text-lg font-semibold text-blue-400">${status}</p>`;
            }
        }
    };

    gameRenderer.setCallbacks(callbacks);

    // Difficulty selection handlers
    const difficultyDescriptions = {
        easy: 'IA lenta y predecible - Perfecta para principiantes',
        medium: 'IA con velocidad y precisión moderadas - Perfecta para empezar',
        hard: 'IA rápida y precisa - Para jugadores experimentados'
    };

    function updateDifficultyButtons() {
        document.querySelectorAll('.difficulty-btn').forEach(btn => {
            btn.classList.remove('active', 'ring-2', 'ring-white');
        });
        
        const activeButton = document.getElementById(`difficulty-${currentDifficulty}`);
        if (activeButton) {
            activeButton.classList.add('active', 'ring-2', 'ring-white');
        }

        const description = document.getElementById('difficulty-description');
        if (description) {
            description.innerHTML = `<p>${difficultyDescriptions[currentDifficulty]}</p>`;
        }
    }

    document.getElementById('difficulty-easy')?.addEventListener('click', () => {
        currentDifficulty = 'easy';
        gameRenderer.setAIDifficulty('easy');
        updateDifficultyButtons();
        updatePlayerInfo();
    });

    document.getElementById('difficulty-medium')?.addEventListener('click', () => {
        currentDifficulty = 'medium';
        gameRenderer.setAIDifficulty('medium');
        updateDifficultyButtons();
        updatePlayerInfo();
    });

    document.getElementById('difficulty-hard')?.addEventListener('click', () => {
        currentDifficulty = 'hard';
        gameRenderer.setAIDifficulty('hard');
        updateDifficultyButtons();
        updatePlayerInfo();
    });

    // Button event handlers
    function updateButtonStates() {
        const startButton = document.getElementById('start-game') as HTMLButtonElement;
        const pauseButton = document.getElementById('pause-game') as HTMLButtonElement;
        const difficultyButtons = document.querySelectorAll('.difficulty-btn') as NodeListOf<HTMLButtonElement>;
        
        if (startButton && pauseButton) {
            startButton.disabled = isGameRunning;
            pauseButton.disabled = !isGameRunning;
        }

        difficultyButtons.forEach(btn => {
            btn.disabled = isGameRunning;
        });
    }

    function showGameResult(winner: string, score: { left: number; right: number }) {
        const modal = document.getElementById('game-result-modal');
        const modalContent = document.getElementById('modal-content');
        
        if (!modal || !modalContent) return;

        const isPlayerWinner = score.left > score.right;
        const winnerColor = isPlayerWinner ? 'text-yellow-400' : 'text-blue-400';
        const winnerEmoji = isPlayerWinner ? '🟡' : '🤖';
        const resultMessage = isPlayerWinner ? '¡Felicidades!' : '¡La IA ganó!';

        modalContent.innerHTML = `
            <h2 class="text-3xl font-bold mb-4">🎉 ¡Juego Terminado!</h2>
            <div class="text-6xl mb-4">${winnerEmoji}</div>
            <h3 class="text-2xl font-bold mb-2 ${winnerColor}">${resultMessage}</h3>
            <p class="text-lg mb-4">${winner} ganó contra ${currentDifficulty} IA</p>
            <div class="text-lg mb-4">
                <p><span class="text-yellow-400">🟡 ${playerName}</span>: ${score.left}</p>
                <p><span class="text-blue-400">🤖 IA</span>: ${score.right}</p>
            </div>
            ${gameStartTime ? `<p class="text-gray-400">Duración: ${Math.floor((Date.now() - gameStartTime.getTime()) / 1000)}s</p>` : ''}
        `;

        modal.classList.remove('hidden');
    }

    // Event listeners
    document.getElementById('start-game')?.addEventListener('click', () => {
        gameRenderer.setAIDifficulty(currentDifficulty);
        gameRenderer.startGame();
        isGameRunning = true;
        gameStartTime = new Date();
        updateButtonStates();
    });

    document.getElementById('pause-game')?.addEventListener('click', () => {
        gameRenderer.pauseGame();
        isGameRunning = false;
        updateButtonStates();
    });

    document.getElementById('reset-game')?.addEventListener('click', () => {
        gameRenderer.resetGame();
        isGameRunning = false;
        gameStartTime = null;
        updateButtonStates();
        
        // Hide modal if visible
        const modal = document.getElementById('game-result-modal');
        if (modal) modal.classList.add('hidden');
    });

    document.getElementById('back-to-play')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/play');
    });

    // Modal event listeners
    document.getElementById('play-again')?.addEventListener('click', () => {
        const modal = document.getElementById('game-result-modal');
        if (modal) modal.classList.add('hidden');
        
        gameRenderer.resetGame();
        gameRenderer.setAIDifficulty(currentDifficulty);
        gameRenderer.startGame();
        isGameRunning = true;
        gameStartTime = new Date();
        updateButtonStates();
    });

    document.getElementById('back-to-menu')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/play');
    });

    // Initialize states
    updateDifficultyButtons();
    updateButtonStates();

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        gameRenderer.cleanup();
    });
}
