import { getCurrentUser } from '../auth';
import { navigateTo } from '../router';

export function renderGameOnline(): void {
  const content = document.getElementById('page-content');

  if (!content) {
    console.error('No se encontró el contenedor principal para renderizar el juego online.');
    return;
  }

  // Verificar si hay un gameId pendiente en sessionStorage
  const gameId = sessionStorage.getItem('pendingGameId');
  sessionStorage.removeItem('pendingGameId'); // Limpiar después de usar
  
  if (gameId && gameId.trim() !== '') {
    // Si hay gameId, ir directamente a la vista del juego
    console.log(`🎮 Conectando directamente al juego: ${gameId}`);
    showGameView(gameId);
    return;
  }

  content.innerHTML = `
    <div class="w-full max-w-4xl mx-auto p-8 text-center">
      <h1 class="text-4xl font-bold mb-8">Juego Online - Pong</h1>
      <p class="mb-6">Conéctate y juega contra otros jugadores en línea o enfréntate a la IA.</p>
      <div class="space-y-4">
          <button id="create-ai-game" class="w-full bg-green-500 text-white py-2 px-4 rounded-xl hover:bg-green-700 transition">
            Jugar contra la IA
          </button>
          <button id="create-online-game" class="w-full bg-blue-500 text-white py-2 px-4 rounded-xl hover:bg-blue-700 transition">
            Crear Partida Online
          </button>
          <button id="join-online-game" class="w-full bg-yellow-500 text-white py-2 px-4 rounded-xl hover:bg-yellow-700 transition">
            Unirse a Partida
          </button>
      </div>
      <button id="back-to-play" class="mt-6 bg-gray-500 text-white font-semibold py-2 px-4 rounded">
        Volver a Selección
      </button>
    </div>
  `;

  document.getElementById('create-ai-game')?.addEventListener('click', () => navigateTo('/game-ai'));
  document.getElementById('create-online-game')?.addEventListener('click', () => navigateTo('/game-multiplayer'));
  document.getElementById('join-online-game')?.addEventListener('click', () => navigateTo('/game-select'));
  document.getElementById('back-to-play')?.addEventListener('click', () => navigateTo('/play'));
}

async function createAIGame(): Promise<void> {
  try {
    console.log('🎮 Creando partida vs IA...');
    const response = await fetch('/api/games', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nombre: 'Online vs IA', gameMode: 'pve', maxPlayers: 2 })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const game = await response.json();
    console.log('✅ Partida creada:', game);
    
    // La IA se agrega automáticamente en el backend para partidas PvE
    console.log('🤖 IA agregada automáticamente por el backend');
    
    // Iniciar la partida
    await fetch(`/api/games/${game.id}/start`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });
    
    alert(`✅ Partida vs IA iniciada!\nID: ${game.id}\n\nConectando al juego...`);
    showGameView(game.id);
  } catch (error) {
    console.error('❌ Error creando la partida:', error);
    alert(`❌ Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

async function createOnlineGame(): Promise<void> {
  try {
    console.log('🌐 Creando partida multijugador...');
    const response = await fetch('/api/games', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nombre: 'Multijugador', gameMode: 'pvp', maxPlayers: 2 })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const game = await response.json();
    console.log('✅ Partida multijugador creada:', game);
    alert(`✅ Partida multijugador creada!\nID: ${game.id}\n\nConectando al juego...`);
    showGameView(game.id);
  } catch (error) {
    console.error('❌ Error creando partida multijugador:', error);
    alert(`❌ Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

async function joinOnlineGame(): Promise<void> {
  try {
    // Primero obtener lista de partidas disponibles
    const response = await fetch('/api/games');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    const availableGames = data.games.filter((g: any) => g.jugadoresConectados < g.capacidadMaxima);
    
    if (availableGames.length === 0) {
      console.log('❌ No hay partidas disponibles para unirse.');
      navigateTo('/game-select');
    }
    
    navigateTo('/game-select');
  } catch (error) {
    console.error('❌ Error uniéndose a la partida:', error);
    alert(`❌ Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

function showGameView(gameId: string): void {
  // Obtener usuario actual
  const currentUser = getCurrentUser();
  const currentUserName = currentUser?.username || "Usuario";
  const content = document.getElementById('page-content');
  if (!content) return;
  
  content.innerHTML = `
    <div class="w-full max-w-4xl mx-auto p-8">
      <h1 class="text-3xl font-bold text-center mb-4">🎮 Partida Online</h1>
      <p class="text-center mb-6">ID: ${gameId}</p>
      
      <!-- Player Role and Controls Info -->
      <div id="player-info" class="bg-gray-800 rounded-lg p-4 mb-6 text-center">
        <div id="player-cards" class="grid grid-cols-2 gap-4 mb-4">
          <!-- Las cartas se generarán dinámicamente -->
        </div>
        <div id="player-role" class="text-yellow-400 font-bold">
          🔄 Asignando rol de jugador...
        </div>
      </div>
      
      <div class="bg-black border-2 border-gray-400 rounded-lg p-4 mb-6">
        <canvas id="gameCanvas" width="600" height="400" class="w-full h-auto bg-black"></canvas>
      </div>
      
      <div class="text-center mb-4">
        <div id="score-container" class="grid grid-cols-2 gap-4 mb-4">
          <div class="text-left">
            <h3 class="text-xl font-bold text-yellow-400" id="score1-title">🟡 Jugador</h3>
            <p class="text-2xl font-bold" id="score1">0</p>
          </div>
          <div class="text-right">
            <h3 class="text-xl font-bold text-blue-400" id="score2-title">🔵 Jugador</h3>
            <p class="text-2xl font-bold" id="score2">0</p>
          </div>
        </div>
        
        <div id="game-status" class="mb-4">
          <p class="text-yellow-500">🔄 Conectando...</p>
        </div>
        
        <div class="space-x-4">
          <button id="leave-game" class="bg-red-500 text-white font-semibold py-2 px-4 rounded">Salir del Juego</button>
        </div>
      </div>
    </div>
    
    <!-- Winner Modal -->
    <div id="winner-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 text-center">
        <div id="winner-content" class="mb-6">
          <h2 class="text-3xl font-bold mb-4">🏆 Juego Terminado</h2>
          <p id="winner-message" class="text-xl mb-4">Mensaje del ganador</p>
          <div id="final-score" class="text-lg text-gray-600 mb-4">Puntuación final</div>
        </div>
        <button id="return-to-lobby" class="bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 transition">
          Volver al Lobby
        </button>
      </div>
    </div>
  `;
  
  document.getElementById('leave-game')?.addEventListener('click', () => {
    navigateTo('/game-online');
  });
  
  document.getElementById('return-to-lobby')?.addEventListener('click', () => {
    hideWinnerModal();
    navigateTo('/game-online');
  });
  
  connectToGame(gameId);
}

function showGameLobby(gameId: string): void {
  const content = document.getElementById('page-content');
  if (!content) return;
  
  content.innerHTML = `
    <div class="w-full max-w-4xl mx-auto p-8 text-center">
      <h1 class="text-3xl font-bold mb-4">🌐 Lobby Multijugador</h1>
      <p class="mb-6">ID de Partida: ${gameId}</p>
      
      <div class="bg-gray-800 rounded-lg p-6 mb-6">
        <h2 class="text-xl font-bold mb-4">Esperando Jugadores...</h2>
        <div id="players-list" class="space-y-2">
          <p>🔄 Cargando...</p>
        </div>
      </div>
      
      <div class="space-x-4">
        <button id="start-game" class="bg-green-500 text-white font-semibold py-2 px-4 rounded" disabled>Iniciar Partida</button>
        <button id="leave-lobby" class="bg-red-500 text-white font-semibold py-2 px-4 rounded">Salir del Lobby</button>
      </div>
    </div>
  `;
  
  document.getElementById('leave-lobby')?.addEventListener('click', () => {
    navigateTo('/game-online');
  });
  
  // Aquí se conectaría al lobby WebSocket
  checkGameStatus(gameId);
}

async function checkGameStatus(gameId: string): Promise<void> {
  try {
    const response = await fetch(`/api/games/${gameId}`);
    const game = await response.json();
    
    const playersList = document.getElementById('players-list');
    if (playersList) {
      playersList.innerHTML = `
        <p>👥 Jugadores: ${game.jugadoresConectados}/${game.capacidadMaxima}</p>
        <p>Estado: ${game.enJuego ? '🎮 En Juego' : '⏳ Esperando'}</p>
      `;
    }
    
    if (game.jugadoresConectados >= 2) {
      const startBtn = document.getElementById('start-game') as HTMLButtonElement;
      if (startBtn) {
        startBtn.disabled = false;
        startBtn.onclick = () => startMultiplayerGame(gameId);
      }
    }
  } catch (error) {
    console.error('Error verificando estado:', error);
  }
}

async function startMultiplayerGame(gameId: string): Promise<void> {
  try {
    await fetch(`/api/games/${gameId}/start`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });
    
    showGameView(gameId);
  } catch (error) {
    console.error('Error iniciando partida:', error);
  }
}

function connectToGame(gameId: string): void {
  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
  const ctx = canvas?.getContext('2d');
  const statusElement = document.getElementById('game-status');
  
  if (!canvas || !ctx) {
    console.error('Canvas no encontrado');
    return;
  }
  
  if (statusElement) {
    statusElement.innerHTML = '<p class="text-blue-500">🔗 Conectando al WebSocket...</p>';
  }
  
  // Construir URL WebSocket correcta
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/pong/${gameId}`;
  
  console.log('🔗 Conectando al WebSocket:', wsUrl);
  const socket = new WebSocket(wsUrl);
  let playerNumber: number | null = null;
  let gameMode: string = 'pvp'; // Por defecto PvP

  socket.onopen = () => {
    console.log(`✅ Conectado a la partida ${gameId}`);
    if (statusElement) {
      statusElement.innerHTML = '<p class="text-green-500">✅ Conectado! Esperando asignación...</p>';
    }
  };

  socket.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      console.log('📡 Mensaje recibido:', data);
      
      if (data.tipo === 'bienvenida') {
        playerNumber = data.numero;
        console.log(`🎮 Soy el jugador ${playerNumber}`);
        
        // Detectar el modo de juego basado en el gameId almacenado
        const currentUrl = window.location.pathname;
        if (currentUrl.includes('game-ai') || sessionStorage.getItem('gameType') === 'ai') {
          gameMode = 'pve';
        }
        
        if (playerNumber !== null) {
          updatePlayerRole(playerNumber, gameMode);
        }
        if (statusElement) {
          const modeText = gameMode === 'pve' ? 'IA' : 'otro jugador';
          statusElement.innerHTML = `<p class="text-green-500">🎮 Eres el ${currentUserName} vs ${modeText}! Usa W/S para mover</p>`;
        }
      }
      
      if (data.tipo === 'estado' && data.juego && ctx) {
        drawGame(ctx, data.juego);
        updateScore(data.juego);
      }
      
      if (data.tipo === 'estado_general') {
        if (statusElement) {
          // En modo PvE, no mostrar "Esperando jugador" si la IA ya está presente
          if (gameMode === 'pve' && data.estado && data.estado.includes('esperando_jugador')) {
            statusElement.innerHTML = '<p class="text-green-500">🎮 ¡Listo para jugar contra la IA!</p>';
          } else {
            statusElement.innerHTML = `<p class="text-yellow-500">⏳ ${data.estado}</p>`;
          }
        }
      }
      
      if (data.tipo === 'cuenta_atras') {
        if (statusElement) {
          statusElement.innerHTML = `<p class="text-orange-500">🔢 Iniciando en ${data.valor}...</p>`;
        }
      }
      
      if (data.tipo === 'juego_iniciado') {
        if (statusElement) {
          statusElement.innerHTML = '<p class="text-green-500">🎮 ¡Juego iniciado! Usa W/S para mover</p>';
        }
      }
      
      if (data.tipo === 'juego_finalizado') {
        showWinnerModal(data.mensaje, data.juego);
        if (statusElement) {
          statusElement.innerHTML = `<p class="text-blue-500">🏆 ${data.mensaje}</p>`;
        }
      }
      
      if (data.tipo === 'jugador_desconectado') {
        showWinnerModal('¡Has ganado! Tu oponente se desconectó.', data.juego);
        if (statusElement) {
          statusElement.innerHTML = '<p class="text-red-500">❌ Oponente desconectado</p>';
        }
      }
    } catch (error) {
      console.error('Error procesando mensaje:', error);
    }
  };

  socket.onclose = () => {
    console.log('❌ Desconectado del juego');
    if (statusElement) {
      statusElement.innerHTML = '<p class="text-red-500">❌ Desconectado del juego</p>';
    }
  };

  socket.onerror = (error) => {
    console.error('❌ Error en WebSocket:', error);
    if (statusElement) {
      statusElement.innerHTML = '<p class="text-red-500">❌ Error de conexión</p>';
    }
  };
  
  // Controles de teclado mejorados
  const keys = { w: false, s: false };
  let lastMoveTime = 0;
  
  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key.toLowerCase() === 'w' && !keys.w) {
      keys.w = true;
      e.preventDefault();
    }
    if (e.key.toLowerCase() === 's' && !keys.s) {
      keys.s = true;
      e.preventDefault();
    }
  };
  
  const handleKeyUp = (e: KeyboardEvent) => {
    if (e.key.toLowerCase() === 'w') {
      keys.w = false;
      e.preventDefault();
    }
    if (e.key.toLowerCase() === 's') {
      keys.s = false;
      e.preventDefault();
    }
  };
  
  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keyup', handleKeyUp);
  
  // Enviar movimientos con mejor control
  const moveInterval = setInterval(() => {
    if (socket.readyState === WebSocket.OPEN && playerNumber) {
      const now = Date.now();
      if (now - lastMoveTime > 30) { // Limitar a ~33 FPS
        if (keys.w) {
          socket.send(JSON.stringify({ tipo: 'mover', y: -8 })); // Increase speed
          lastMoveTime = now;
        }
        if (keys.s) {
          socket.send(JSON.stringify({ tipo: 'mover', y: 8 })); // Increase speed
          lastMoveTime = now;
        }
      }
    }
  }, 16); // ~60 FPS
  
  // Limpiar eventos cuando se cierre la conexión
  socket.addEventListener('close', () => {
    document.removeEventListener('keydown', handleKeyDown);
    document.removeEventListener('keyup', handleKeyUp);
    clearInterval(moveInterval);
  });
  
  // Dibujar estado inicial del canvas
  drawInitialCanvas(ctx);
}

function updatePlayerRole(playerNumber: number, gameMode: string = 'pvp'): void {
  const playerCardsContainer = document.getElementById('player-cards');
  const playerRoleElement = document.getElementById('player-role');
  const score1Title = document.getElementById('score1-title');
  const score2Title = document.getElementById('score2-title');
  
  if (!playerCardsContainer || !playerRoleElement) return;
  
  // Configuración de jugadores según el modo de juego
  const isPvE = gameMode === 'pve';
  const opponentInfo = isPvE ? 
    { type: 'IA', icon: '🤖', description: 'Inteligencia Artificial' } : 
    { type: 'Jugador Online', icon: '👤', description: 'Jugador humano' };
  
  const playerConfig = {
    1: {
      you: { color: 'yellow', bgColor: 'bg-yellow-600', side: 'Izquierdo', controls: 'W (arriba) / S (abajo)' },
      opponent: { color: 'blue', bgColor: 'bg-blue-600', side: 'Derecho', ...opponentInfo }
    },
    2: {
      you: { color: 'blue', bgColor: 'bg-blue-600', side: 'Derecho', controls: 'W (arriba) / S (abajo)' },
      opponent: { color: 'yellow', bgColor: 'bg-yellow-600', side: 'Izquierdo', ...opponentInfo }
    }
  };
  
  const config = playerConfig[playerNumber as keyof typeof playerConfig];
  
  if (config) {
    playerCardsContainer.innerHTML = `
      <div class="${config.you.bgColor} rounded-lg p-3">
        <h3 class="text-lg font-bold text-white">📱 Tú (${currentUserName})</h3>
        <p class="text-sm text-${config.you.color}-200">${config.you.color === 'yellow' ? 'Amarilla' : 'Azul'} - Lado ${config.you.side}</p>
        <p class="text-xs text-${config.you.color}-200">Controles: ${config.you.controls}</p>
      </div>
      <div class="${config.opponent.bgColor} rounded-lg p-3">
        <h3 class="text-lg font-bold text-white">${config.opponent.icon} ${config.opponent.type}</h3>
        <p class="text-sm text-${config.opponent.color}-200">${config.opponent.color === 'yellow' ? 'Amarilla' : 'Azul'} - Lado ${config.opponent.side}</p>
        <p class="text-xs text-${config.opponent.color}-200">${config.opponent.description}</p>
      </div>
    `;
    
    playerRoleElement.innerHTML = `
      <div class="text-green-400 font-bold">
        ✅ Eres el ${currentUserName} vs ${config.opponent.type} (Pala ${config.you.color === 'yellow' ? 'Amarilla' : 'Azul'} - Lado ${config.you.side})
      </div>
    `;
    
    // Actualizar títulos del marcador
    if (score1Title && score2Title) {
      if (playerNumber === 1) {
                  score1Title.innerHTML = ;
                  score2Title.innerHTML = isPvE ? '🔵 IA (Oponente)' : '🔵 Oponente';
      } else {
        score1Title.innerHTML = isPvE ? '🟡 IA (Oponente)' : '🟡 Oponente';
        score2Title.innerHTML = `🔵 ${currentUserName} (Tú)`;
      }
    }
  }
}

function drawInitialCanvas(ctx: CanvasRenderingContext2D): void {
  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
  
  // Línea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([5, 5]);
  ctx.beginPath();
  ctx.moveTo(ctx.canvas.width / 2, 0);
  ctx.lineTo(ctx.canvas.width / 2, ctx.canvas.height);
  ctx.stroke();
  
  // Mensaje de espera
  ctx.fillStyle = 'white';
  ctx.font = '24px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('Esperando jugadores...', ctx.canvas.width / 2, ctx.canvas.height / 2);
}

function drawGame(ctx: CanvasRenderingContext2D, gameState: any): void {
  // Limpiar canvas
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
  
  // Línea central
  ctx.strokeStyle = 'white';
  ctx.setLineDash([5, 5]);
  ctx.beginPath();
  ctx.moveTo(ctx.canvas.width / 2, 0);
  ctx.lineTo(ctx.canvas.width / 2, ctx.canvas.height);
  ctx.stroke();
  
  // Palas
  ctx.fillStyle = 'yellow'; // Pala jugador 1
  ctx.fillRect(gameState.palas.jugador1.x, gameState.palas.jugador1.y, gameState.palaAncho, gameState.palaAlto);
  ctx.fillStyle = 'blue'; // Pala jugador 2
  ctx.fillRect(gameState.palas.jugador2.x, gameState.palas.jugador2.y, gameState.palaAncho, gameState.palaAlto);
  
  // Pelota
  ctx.fillStyle = 'red';
  ctx.beginPath();
  ctx.arc(gameState.pelota.x, gameState.pelota.y, gameState.pelota.radio, 0, Math.PI * 2);
  ctx.fill();
}

function updateScore(gameState: any): void {
  const score1 = document.getElementById('score1');
  const score2 = document.getElementById('score2');
  if (score1) score1.textContent = gameState.puntuacion.jugador1.toString();
  if (score2) score2.textContent = gameState.puntuacion.jugador2.toString();
}

function showWinnerModal(message: string, gameState: any): void {
  const modal = document.getElementById('winner-modal');
  const winnerMessage = document.getElementById('winner-message');
  const finalScore = document.getElementById('final-score');
  
  if (modal && winnerMessage && finalScore) {
    winnerMessage.textContent = message;
    finalScore.textContent = `Puntuación Final: ${gameState?.puntuacion?.jugador1 || 0} - ${gameState?.puntuacion?.jugador2 || 0}`;
    modal.classList.remove('hidden');
  }
}

function hideWinnerModal(): void {
  const modal = document.getElementById('winner-modal');
  if (modal) {
    modal.classList.add('hidden');
  }
}
