/**
 * Unified Online Game Page - Uses UnifiedGameRenderer
 */
import { navigateTo } from '../router';
import { getCurrentUser } from '../auth';
import { UnifiedGameRenderer, GameCallbacks } from '../components/UnifiedGameRenderer';
import { PlayerDisplay, PlayerInfo } from '../components/playerDisplay';

export function renderUnifiedGameOnline(): void {
    const content = document.getElementById('page-content');

    if (!content) {
        console.error('No se encontró el contenedor principal para renderizar el juego online.');
        return;
    }

    // Check if there's a pending gameId
    const gameId = sessionStorage.getItem('pendingGameId');
    sessionStorage.removeItem('pendingGameId');
    
    if (gameId && gameId.trim() !== '') {
        showGameView(gameId);
        return;
    }

    // Show game selection menu
    content.innerHTML = `
        <div class="w-full max-w-4xl mx-auto p-8 text-center">
            <h1 class="text-4xl font-bold mb-8">🌐 Juego Online - Pong</h1>
            <p class="mb-6">Conéctate y juega contra otros jugadores en línea</p>
            
            <div class="space-y-4 mb-8">
                <button id="create-game" class="w-full bg-green-500 text-white py-3 px-6 rounded-xl hover:bg-green-600 transition text-lg font-bold">
                    🎮 Crear Nueva Partida
                </button>
                <button id="join-game" class="w-full bg-blue-500 text-white py-3 px-6 rounded-xl hover:bg-blue-600 transition text-lg font-bold">
                    🔗 Unirse a Partida
                </button>
                <button id="list-games" class="w-full bg-yellow-500 text-white py-3 px-6 rounded-xl hover:bg-yellow-600 transition text-lg font-bold">
                    📋 Ver Partidas Disponibles
                </button>
            </div>
            
            <!-- Games List Container -->
            <div id="games-list-container" class="hidden">
                <h3 class="text-2xl font-bold mb-4">🎯 Partidas Disponibles</h3>
                <div id="games-list" class="space-y-2 mb-4">
                    <!-- Games will be listed here -->
                </div>
                <button id="refresh-games" class="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition">
                    🔄 Actualizar Lista
                </button>
            </div>
            
            <!-- Join Game Form -->
            <div id="join-game-form" class="hidden bg-gray-800 rounded-lg p-6 mb-6">
                <h3 class="text-xl font-bold mb-4">🔗 Unirse a Partida</h3>
                <div class="space-y-4">
                    <input 
                        type="text" 
                        id="game-id-input" 
                        placeholder="ID de la partida" 
                        class="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:border-blue-500 focus:outline-none"
                    >
                    <div class="flex gap-4">
                        <button id="join-game-submit" class="flex-1 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition">
                            ✅ Unirse
                        </button>
                        <button id="cancel-join" class="flex-1 bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition">
                            ❌ Cancelar
                        </button>
                    </div>
                </div>
            </div>
            
            <button id="back-to-play" class="bg-gray-500 text-white font-semibold py-2 px-4 rounded hover:bg-gray-600 transition">
                ← Volver a Selección
            </button>
        </div>
    `;

    setupOnlineMenuHandlers();
}

function setupOnlineMenuHandlers(): void {
    const currentUser = getCurrentUser();
    const playerName = currentUser?.username || 'Jugador';

    // Create game handler
    document.getElementById('create-game')?.addEventListener('click', async () => {
        try {
            const response = await fetch('http://localhost:8000/api/games', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    nombre: `Partida de ${playerName}`,
                    gameMode: 'pvp',
                    maxPlayers: 2
                })
            });

            if (response.ok) {
                const gameData = await response.json();
                console.log('Game created:', gameData);
                showGameView(gameData.id, 1); // Player number 1 (creator)
            } else {
                console.error('Failed to create game');
                alert('Error al crear la partida. Inténtalo de nuevo.');
            }
        } catch (error) {
            console.error('Error creating game:', error);
            alert('Error de conexión. Verifica que el servidor esté disponible.');
        }
    });

    // Show join form handler
    document.getElementById('join-game')?.addEventListener('click', () => {
        document.getElementById('join-game-form')?.classList.remove('hidden');
        document.getElementById('games-list-container')?.classList.add('hidden');
    });

    // Cancel join handler
    document.getElementById('cancel-join')?.addEventListener('click', () => {
        document.getElementById('join-game-form')?.classList.add('hidden');
        const input = document.getElementById('game-id-input') as HTMLInputElement;
        if (input) input.value = '';
    });

    // Submit join handler
    document.getElementById('join-game-submit')?.addEventListener('click', async () => {
        const input = document.getElementById('game-id-input') as HTMLInputElement;
        const gameId = input.value.trim();

        if (!gameId) {
            alert('Por favor, ingresa un ID de partida válido.');
            return;
        }

        try {
            const response = await fetch(`http://localhost:8000/${gameId}/join`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    playerName: playerName
                })
            });

            if (response.ok) {
                showGameView(gameId, 2); // Player number 2 (joiner)
            } else {
                const errorData = await response.json().catch(() => ({}));
                alert(errorData.error || 'Error al unirse a la partida. Verifica el ID.');
            }
        } catch (error) {
            console.error('Error joining game:', error);
            alert('Error de conexión. Verifica que el servidor esté disponible.');
        }
    });

    // List games handler
    document.getElementById('list-games')?.addEventListener('click', loadGamesList);

    // Refresh games handler
    document.getElementById('refresh-games')?.addEventListener('click', loadGamesList);

    // Back to play handler
    document.getElementById('back-to-play')?.addEventListener('click', () => {
        navigateTo('/play');
    });
}

async function loadGamesList(): Promise<void> {
    try {
        const response = await fetch('http://localhost:8000/api/games');
        
        if (!response.ok) {
            throw new Error('Failed to fetch games');
        }

        const data = await response.json();
        const games = data.games || [];

        const gamesListContainer = document.getElementById('games-list-container');
        const gamesList = document.getElementById('games-list');

        if (!gamesListContainer || !gamesList) return;

        gamesListContainer.classList.remove('hidden');
        document.getElementById('join-game-form')?.classList.add('hidden');

        if (games.length === 0) {
            gamesList.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-4 text-center">
                    <p class="text-gray-400">📭 No hay partidas disponibles</p>
                    <p class="text-sm text-gray-500 mt-2">¡Sé el primero en crear una!</p>
                </div>
            `;
            return;
        }

        gamesList.innerHTML = games.map((game: any) => {
            const isAvailable = game.jugadoresConectados < game.capacidadMaxima;
            const statusColor = isAvailable ? 'text-green-400' : 'text-red-400';
            const statusIcon = isAvailable ? '🟢' : '🔴';
            
            return `
                <div class="bg-gray-800 rounded-lg p-4 flex justify-between items-center">
                    <div class="text-left">
                        <h4 class="font-bold text-lg">${game.nombre || `Partida ${game.id.substring(0, 8)}`}</h4>
                        <p class="text-sm text-gray-400">ID: ${game.id}</p>
                        <p class="text-sm ${statusColor}">
                            ${statusIcon} ${game.jugadoresConectados}/${game.capacidadMaxima} jugadores
                        </p>
                    </div>
                    <div class="text-right">
                        ${isAvailable ? `
                            <button 
                                onclick="joinSpecificGame('${game.id}')" 
                                class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition"
                            >
                                🔗 Unirse
                            </button>
                        ` : `
                            <span class="text-red-400 font-bold">LLENA</span>
                        `}
                    </div>
                </div>
            `;
        }).join('');

    } catch (error) {
        console.error('Error loading games list:', error);
        const gamesList = document.getElementById('games-list');
        if (gamesList) {
            gamesList.innerHTML = `
                <div class="bg-red-800 rounded-lg p-4 text-center">
                    <p class="text-red-200">❌ Error al cargar las partidas</p>
                    <p class="text-sm text-red-300 mt-2">Verifica la conexión con el servidor</p>
                </div>
            `;
        }
    }
}

// Global function for joining specific game
(window as any).joinSpecificGame = async function(gameId: string): Promise<void> {
    const currentUser = getCurrentUser();
    const playerName = currentUser?.username || 'Jugador';

    try {
        const response = await fetch(`http://localhost:8000/${gameId}/join`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                playerName: playerName
            })
        });

        if (response.ok) {
            showGameView(gameId, 2);
        } else {
            const errorData = await response.json().catch(() => ({}));
            alert(errorData.error || 'Error al unirse a la partida.');
        }
    } catch (error) {
        console.error('Error joining game:', error);
        alert('Error de conexión.');
    }
};

function showGameView(gameId: string, playerNumber?: number): void {
    const content = document.getElementById('page-content');
    if (!content) return;

    const currentUser = getCurrentUser();
    const playerName = currentUser?.username || 'Jugador';

    content.innerHTML = `
        <div class="w-full max-w-6xl mx-auto p-8">
            <h1 class="text-3xl font-bold text-center mb-4">🌐 Juego Online - Pong</h1>
            <p class="text-center mb-2">Partida: <span class="font-mono text-blue-400">${gameId}</span></p>
            <p class="text-center mb-6">Jugador ${playerNumber || 'Desconocido'}</p>
            
            <!-- Connection Status -->
            <div id="connection-status" class="bg-yellow-800 rounded-lg p-4 mb-6 text-center">
                <p class="text-yellow-200">🔄 Conectando al servidor de juego...</p>
            </div>
            
            <!-- Player Info Section -->
            <div id="player-info" class="bg-gray-800 rounded-lg p-4 mb-6">
                <div id="player-cards" class="mb-4">
                    <!-- Las tarjetas se generarán dinámicamente -->
                </div>
                <div id="player-role" class="text-center text-green-400 font-bold">
                    🌐 Juego Online - Esperando jugadores...
                </div>
            </div>
            
            <!-- Game Canvas Container -->
            <div class="bg-black border-2 border-gray-400 rounded-lg p-4 mb-6 flex justify-center">
                <canvas id="gameCanvas" width="800" height="600" class="border border-gray-600"></canvas>
            </div>
            
            <!-- Score Display -->
            <div class="text-center mb-4">
                <div id="score-container" class="grid grid-cols-2 gap-4 mb-4">
                    <div class="text-left">
                        <h3 class="text-xl font-bold text-yellow-400" id="score1-title">🟡 Jugador 1</h3>
                        <p class="text-2xl font-bold" id="score1">0</p>
                    </div>
                    <div class="text-right">
                        <h3 class="text-xl font-bold text-blue-400" id="score2-title">🔵 Jugador 2</h3>
                        <p class="text-2xl font-bold" id="score2">0</p>
                    </div>
                </div>
                
                <div id="game-status" class="mb-4">
                    <p class="text-lg font-semibold text-blue-400">⏳ Esperando conexión...</p>
                </div>
                
                <!-- Controls Instructions -->
                <div class="bg-gray-800 rounded-lg p-4 mb-6">
                    <h3 class="text-lg font-bold mb-2">🎮 Controles:</h3>
                    <div class="text-center">
                        <p>W - Mover hacia arriba</p>
                        <p>S - Mover hacia abajo</p>
                    </div>
                </div>
                
                <!-- Navigation -->
                <button id="leave-game" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded transition-colors mr-4">
                    🚪 Salir del Juego
                </button>
                <button id="back-to-online-menu" class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded transition-colors">
                    ← Volver al Menú Online
                </button>
            </div>
        </div>
        
        <!-- Game Result Modal -->
        <div id="game-result-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-gray-800 p-8 rounded-lg max-w-md w-full mx-4">
                <div id="modal-content" class="text-center">
                    <!-- Content will be filled dynamically -->
                </div>
                <div class="flex gap-4 mt-6">
                    <button id="play-again-online" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🎮 Nueva Partida
                    </button>
                    <button id="back-to-online-menu-modal" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors">
                        🌐 Menú Online
                    </button>
                </div>
            </div>
        </div>
    `;

    setupOnlineGame(gameId, playerNumber || 1);
}

async function setupOnlineGame(gameId: string, playerNumber: number): Promise<void> {
    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
    if (!canvas) {
        console.error('No se encontró el canvas del juego');
        return;
    }

    const currentUser = getCurrentUser();
    const playerName = currentUser?.username || 'Jugador';

    // Create game renderer
    const gameRenderer = new UnifiedGameRenderer(canvas, 'online');
    
    // Set up player info (initial)
    const player1Info: PlayerInfo = {
        numero: 1,
        displayName: playerNumber === 1 ? playerName : 'Esperando...',
        username: playerNumber === 1 ? (currentUser?.username || 'player1') : 'waiting',
        controls: 'W/S'
    };

    const player2Info: PlayerInfo = {
        displayName: playerNumber === 2 ? playerName : 'Esperando...',
        numero: 2,
        username: playerNumber === 2 ? (currentUser?.username || 'player2') : 'waiting',
        controls: 'W/S'
    };

    gameRenderer.setPlayerInfo(player1Info, player2Info);

    // Set up player display

    // Set up callbacks
    const callbacks: GameCallbacks = {
        onScoreUpdate: (score) => {
            const score1Element = document.getElementById('score1');
            const score2Element = document.getElementById('score2');
            
            if (score1Element) score1Element.textContent = score.left.toString();
            if (score2Element) score2Element.textContent = score.right.toString();
        },
        
        onGameEnd: (winner, score) => {
            showOnlineGameResult(winner, score);
        },
        
        onStatusUpdate: (status) => {
            const statusElement = document.getElementById('game-status');
            if (statusElement) {
                statusElement.innerHTML = `<p class="text-lg font-semibold text-blue-400">${status}</p>`;
            }
        }
    };

    gameRenderer.setCallbacks(callbacks);

    // Connect to online game
    try {
        const connected = await gameRenderer.connectToOnlineGame(gameId, playerNumber);
        
        if (connected) {
            const connectionStatus = document.getElementById('connection-status');
            if (connectionStatus) {
                connectionStatus.innerHTML = `
                    <p class="text-green-200">✅ Conectado al servidor de juego</p>
                    <p class="text-sm text-green-300">Esperando que se unan todos los jugadores...</p>
                `;
                connectionStatus.className = 'bg-green-800 rounded-lg p-4 mb-6 text-center';
            }
        }
    } catch (error) {
        console.error('Failed to connect to online game:', error);
        const connectionStatus = document.getElementById('connection-status');
        if (connectionStatus) {
            connectionStatus.innerHTML = `
                <p class="text-red-200">❌ Error de conexión</p>
                <p class="text-sm text-red-300">No se pudo conectar al servidor de juego</p>
            `;
            connectionStatus.className = 'bg-red-800 rounded-lg p-4 mb-6 text-center';
        }
    }

    // Event listeners
    document.getElementById('leave-game')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/game-online');
    });

    document.getElementById('back-to-online-menu')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/game-online');
    });

    document.getElementById('back-to-online-menu-modal')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/game-online');
    });

    document.getElementById('play-again-online')?.addEventListener('click', () => {
        gameRenderer.cleanup();
        navigateTo('/game-online');
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        gameRenderer.cleanup();
    });
}

function showOnlineGameResult(winner: string, score: { left: number; right: number }): void {
    const modal = document.getElementById('game-result-modal');
    const modalContent = document.getElementById('modal-content');
    
    if (!modal || !modalContent) return;

    const isPlayer1Winner = score.left > score.right;
    const winnerColor = isPlayer1Winner ? 'text-yellow-400' : 'text-blue-400';
    const winnerEmoji = isPlayer1Winner ? '🟡' : '🔵';

    modalContent.innerHTML = `
        <h2 class="text-3xl font-bold mb-4">🎉 ¡Juego Terminado!</h2>
        <div class="text-6xl mb-4">${winnerEmoji}</div>
        <h3 class="text-2xl font-bold mb-4 ${winnerColor}">¡${winner} ganó!</h3>
        <div class="text-lg mb-4">
            <p><span class="text-yellow-400">🟡 Jugador 1</span>: ${score.left}</p>
            <p><span class="text-blue-400">🔵 Jugador 2</span>: ${score.right}</p>
        </div>
        <p class="text-gray-400">¡Gracias por jugar online!</p>
    `;

    modal.classList.remove('hidden');
}
