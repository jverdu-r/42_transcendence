export interface User {
  id: number;
  username: string;
  email: string;
}

// Obtiene el JWT del localStorage
function getToken(): string | null {
  return localStorage.getItem('jwt');
}

// Decodifica el JWT manualmente (sin librerías)
function parseJwt(token: string): any {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map(c => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`)
        .join('')
    );
    return JSON.parse(jsonPayload);
  } catch (err) {
    console.error(':x: Error al parsear JWT:', err);
    return null;
  }
}

export function isAuthenticated(): boolean {
  const token = getToken();
  if (!token) return false;
  
  const payload = parseJwt(token);
  const now = Math.floor(Date.now() / 1000);
  return payload?.exp && payload.exp > now;
}

export function getCurrentUser(): User | null {
  const token = getToken();
  if (!token) return null;
  
  const payload = parseJwt(token);
  if (!payload?.user_id) return null;
  
  return {
    id: payload.user_id,
    username: payload.username || 'Usuario',
    email: payload.email || 'desconocido@example.com'
  };
}

export function logout(): void {
  localStorage.removeItem('jwt');
  console.log(':candado: Sesión cerrada');
  window.location.href = '/login';
}
